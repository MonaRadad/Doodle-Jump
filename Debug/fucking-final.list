
fucking-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f8  080099f8  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  080099f8  080099f8  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099f8  080099f8  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099fc  080099fc  000199fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08009a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          000007b0  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009c4  200009c4  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e0df  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c4  00000000  00000000  0003e323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  000415e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001568  00000000  00000000  00042c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021561  00000000  00000000  00044188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c92a  00000000  00000000  000656e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5941  00000000  00000000  00082013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147954  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006afc  00000000  00000000  001479a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014e4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0014e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009708 	.word	0x08009708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	08009708 	.word	0x08009708

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08e      	sub	sp, #56	; 0x38
 80002a4:	af0a      	add	r7, sp, #40	; 0x28
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	4608      	mov	r0, r1
 80002aa:	4611      	mov	r1, r2
 80002ac:	461a      	mov	r2, r3
 80002ae:	4603      	mov	r3, r0
 80002b0:	817b      	strh	r3, [r7, #10]
 80002b2:	460b      	mov	r3, r1
 80002b4:	813b      	strh	r3, [r7, #8]
 80002b6:	4613      	mov	r3, r2
 80002b8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <LiquidCrystal+0x90>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d019      	beq.n	80002f6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002c2:	8939      	ldrh	r1, [r7, #8]
 80002c4:	897a      	ldrh	r2, [r7, #10]
 80002c6:	2300      	movs	r3, #0
 80002c8:	9308      	str	r3, [sp, #32]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9307      	str	r3, [sp, #28]
 80002ce:	2300      	movs	r3, #0
 80002d0:	9306      	str	r3, [sp, #24]
 80002d2:	2300      	movs	r3, #0
 80002d4:	9305      	str	r3, [sp, #20]
 80002d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002d8:	9304      	str	r3, [sp, #16]
 80002da:	8c3b      	ldrh	r3, [r7, #32]
 80002dc:	9303      	str	r3, [sp, #12]
 80002de:	8bbb      	ldrh	r3, [r7, #28]
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	8b3b      	ldrh	r3, [r7, #24]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	460b      	mov	r3, r1
 80002ec:	68f9      	ldr	r1, [r7, #12]
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 f820 	bl	8000334 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002f4:	e018      	b.n	8000328 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002f6:	8939      	ldrh	r1, [r7, #8]
 80002f8:	897a      	ldrh	r2, [r7, #10]
 80002fa:	2300      	movs	r3, #0
 80002fc:	9308      	str	r3, [sp, #32]
 80002fe:	2300      	movs	r3, #0
 8000300:	9307      	str	r3, [sp, #28]
 8000302:	2300      	movs	r3, #0
 8000304:	9306      	str	r3, [sp, #24]
 8000306:	2300      	movs	r3, #0
 8000308:	9305      	str	r3, [sp, #20]
 800030a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800030c:	9304      	str	r3, [sp, #16]
 800030e:	8c3b      	ldrh	r3, [r7, #32]
 8000310:	9303      	str	r3, [sp, #12]
 8000312:	8bbb      	ldrh	r3, [r7, #28]
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	8b3b      	ldrh	r3, [r7, #24]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	88fb      	ldrh	r3, [r7, #6]
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	460b      	mov	r3, r1
 8000320:	68f9      	ldr	r1, [r7, #12]
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f806 	bl	8000334 <init>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000000 	.word	0x20000000

08000334 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	4611      	mov	r1, r2
 800033e:	461a      	mov	r2, r3
 8000340:	4603      	mov	r3, r0
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	460b      	mov	r3, r1
 8000346:	81bb      	strh	r3, [r7, #12]
 8000348:	4613      	mov	r3, r2
 800034a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800034c:	4a1a      	ldr	r2, [pc, #104]	; (80003b8 <init+0x84>)
 800034e:	89bb      	ldrh	r3, [r7, #12]
 8000350:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000352:	4a1a      	ldr	r2, [pc, #104]	; (80003bc <init+0x88>)
 8000354:	88fb      	ldrh	r3, [r7, #6]
 8000356:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000358:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <init+0x8c>)
 800035a:	8b3b      	ldrh	r3, [r7, #24]
 800035c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <init+0x90>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000364:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <init+0x94>)
 8000366:	8bbb      	ldrh	r3, [r7, #28]
 8000368:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800036a:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <init+0x94>)
 800036c:	8c3b      	ldrh	r3, [r7, #32]
 800036e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000370:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <init+0x94>)
 8000372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000374:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <init+0x94>)
 8000378:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800037a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <init+0x94>)
 800037e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000380:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <init+0x94>)
 8000384:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000386:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <init+0x94>)
 800038a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800038c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <init+0x94>)
 8000390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000392:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <init+0x98>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
 80003a0:	e002      	b.n	80003a8 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <init+0x98>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80003a8:	2102      	movs	r1, #2
 80003aa:	2010      	movs	r0, #16
 80003ac:	f000 f810 	bl	80003d0 <begin>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200003cc 	.word	0x200003cc
 80003bc:	200003ac 	.word	0x200003ac
 80003c0:	200003ca 	.word	0x200003ca
 80003c4:	200003b0 	.word	0x200003b0
 80003c8:	200003b8 	.word	0x200003b8
 80003cc:	200003c9 	.word	0x200003c9

080003d0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	4613      	mov	r3, r2
 80003de:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d906      	bls.n	80003f4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003e6:	4b77      	ldr	r3, [pc, #476]	; (80005c4 <begin+0x1f4>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b74      	ldr	r3, [pc, #464]	; (80005c4 <begin+0x1f4>)
 80003f2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003f4:	4a74      	ldr	r2, [pc, #464]	; (80005c8 <begin+0x1f8>)
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	3340      	adds	r3, #64	; 0x40
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f988 	bl	8000718 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000408:	4b70      	ldr	r3, [pc, #448]	; (80005cc <begin+0x1fc>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d009      	beq.n	8000424 <begin+0x54>
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d106      	bne.n	8000424 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000416:	4b6b      	ldr	r3, [pc, #428]	; (80005c4 <begin+0x1f4>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b68      	ldr	r3, [pc, #416]	; (80005c4 <begin+0x1f4>)
 8000422:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000424:	f000 f8e4 	bl	80005f0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	2303      	movs	r3, #3
 800042a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000430:	4b67      	ldr	r3, [pc, #412]	; (80005d0 <begin+0x200>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d01b      	beq.n	8000470 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000438:	4b66      	ldr	r3, [pc, #408]	; (80005d4 <begin+0x204>)
 800043a:	881a      	ldrh	r2, [r3, #0]
 800043c:	4b66      	ldr	r3, [pc, #408]	; (80005d8 <begin+0x208>)
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b65      	ldr	r3, [pc, #404]	; (80005dc <begin+0x20c>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	4b64      	ldr	r3, [pc, #400]	; (80005e0 <begin+0x210>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4313      	orrs	r3, r2
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b62      	ldr	r3, [pc, #392]	; (80005e0 <begin+0x210>)
 8000456:	885b      	ldrh	r3, [r3, #2]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <begin+0x210>)
 800045e:	889b      	ldrh	r3, [r3, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b5e      	ldr	r3, [pc, #376]	; (80005e0 <begin+0x210>)
 8000466:	88db      	ldrh	r3, [r3, #6]
 8000468:	4313      	orrs	r3, r2
 800046a:	b29b      	uxth	r3, r3
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	e02a      	b.n	80004c6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <begin+0x204>)
 8000472:	881a      	ldrh	r2, [r3, #0]
 8000474:	4b58      	ldr	r3, [pc, #352]	; (80005d8 <begin+0x208>)
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b57      	ldr	r3, [pc, #348]	; (80005dc <begin+0x20c>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000484:	4b56      	ldr	r3, [pc, #344]	; (80005e0 <begin+0x210>)
 8000486:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800048c:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <begin+0x210>)
 800048e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000494:	4b52      	ldr	r3, [pc, #328]	; (80005e0 <begin+0x210>)
 8000496:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800049c:	4b50      	ldr	r3, [pc, #320]	; (80005e0 <begin+0x210>)
 800049e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <begin+0x210>)
 80004a6:	891b      	ldrh	r3, [r3, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b4c      	ldr	r3, [pc, #304]	; (80005e0 <begin+0x210>)
 80004ae:	895b      	ldrh	r3, [r3, #10]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <begin+0x210>)
 80004b6:	899b      	ldrh	r3, [r3, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <begin+0x210>)
 80004be:	89db      	ldrh	r3, [r3, #14]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004c4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004c6:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <begin+0x214>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f107 020c 	add.w	r2, r7, #12
 80004ce:	4611      	mov	r1, r2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 fb6b 	bl	8003bac <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004d6:	2032      	movs	r0, #50	; 0x32
 80004d8:	f003 fa32 	bl	8003940 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004dc:	4b41      	ldr	r3, [pc, #260]	; (80005e4 <begin+0x214>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <begin+0x204>)
 80004e2:	8811      	ldrh	r1, [r2, #0]
 80004e4:	2200      	movs	r2, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f003 fcf2 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004ec:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <begin+0x214>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a3a      	ldr	r2, [pc, #232]	; (80005dc <begin+0x20c>)
 80004f2:	8811      	ldrh	r1, [r2, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fcea 	bl	8003ed0 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <begin+0x208>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d007      	beq.n	8000514 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000504:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <begin+0x214>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a33      	ldr	r2, [pc, #204]	; (80005d8 <begin+0x208>)
 800050a:	8811      	ldrh	r1, [r2, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fcde 	bl	8003ed0 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <begin+0x1f4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f003 0310 	and.w	r3, r3, #16
 800051c:	2b00      	cmp	r3, #0
 800051e:	d115      	bne.n	800054c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000520:	2003      	movs	r0, #3
 8000522:	f000 fa45 	bl	80009b0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000526:	2005      	movs	r0, #5
 8000528:	f003 fa0a 	bl	8003940 <HAL_Delay>

    // second try
    write4bits(0x03);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 fa3f 	bl	80009b0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000532:	2005      	movs	r0, #5
 8000534:	f003 fa04 	bl	8003940 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000538:	2003      	movs	r0, #3
 800053a:	f000 fa39 	bl	80009b0 <write4bits>
    HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f003 f9fe 	bl	8003940 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fa33 	bl	80009b0 <write4bits>
 800054a:	e01d      	b.n	8000588 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <begin+0x1f4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f9a4 	bl	80008a4 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800055c:	2005      	movs	r0, #5
 800055e:	f003 f9ef 	bl	8003940 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <begin+0x1f4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f999 	bl	80008a4 <command>
    HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f003 f9e4 	bl	8003940 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <begin+0x1f4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f043 0320 	orr.w	r3, r3, #32
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f98e 	bl	80008a4 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <begin+0x1f4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f986 	bl	80008a4 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <begin+0x218>)
 800059a:	2204      	movs	r2, #4
 800059c:	701a      	strb	r2, [r3, #0]
  display();
 800059e:	f000 f917 	bl	80007d0 <display>

  // clear it off
  clear();
 80005a2:	f000 f8d9 	bl	8000758 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <begin+0x21c>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <begin+0x21c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f974 	bl	80008a4 <command>

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200003c9 	.word	0x200003c9
 80005c8:	200003b5 	.word	0x200003b5
 80005cc:	20000230 	.word	0x20000230
 80005d0:	20000000 	.word	0x20000000
 80005d4:	200003cc 	.word	0x200003cc
 80005d8:	200003ac 	.word	0x200003ac
 80005dc:	200003ca 	.word	0x200003ca
 80005e0:	200003b8 	.word	0x200003b8
 80005e4:	200003b0 	.word	0x200003b0
 80005e8:	200003b4 	.word	0x200003b4
 80005ec:	200003c8 	.word	0x200003c8

080005f0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	; 0x24
 80005f4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005f6:	4b41      	ldr	r3, [pc, #260]	; (80006fc <enableClock+0x10c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005fe:	d10c      	bne.n	800061a <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <enableClock+0x110>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <enableClock+0x110>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000618:	e06a      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <enableClock+0x10c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a39      	ldr	r2, [pc, #228]	; (8000704 <enableClock+0x114>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d10c      	bne.n	800063e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <enableClock+0x110>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a35      	ldr	r2, [pc, #212]	; (8000700 <enableClock+0x110>)
 800062a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <enableClock+0x110>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000638:	61bb      	str	r3, [r7, #24]
 800063a:	69bb      	ldr	r3, [r7, #24]
}
 800063c:	e058      	b.n	80006f0 <enableClock+0x100>
  else if(_port == GPIOB)
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <enableClock+0x10c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <enableClock+0x114>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d10c      	bne.n	8000662 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <enableClock+0x110>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <enableClock+0x110>)
 800064e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000652:	6153      	str	r3, [r2, #20]
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <enableClock+0x110>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]
}
 8000660:	e046      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <enableClock+0x10c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a28      	ldr	r2, [pc, #160]	; (8000708 <enableClock+0x118>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d10c      	bne.n	8000686 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <enableClock+0x110>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <enableClock+0x110>)
 8000672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000676:	6153      	str	r3, [r2, #20]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <enableClock+0x110>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
}
 8000684:	e034      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000686:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <enableClock+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <enableClock+0x11c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10c      	bne.n	80006aa <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <enableClock+0x110>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <enableClock+0x110>)
 8000696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <enableClock+0x110>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	e022      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOE)
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <enableClock+0x10c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <enableClock+0x120>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d10c      	bne.n	80006ce <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <enableClock+0x110>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <enableClock+0x110>)
 80006ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <enableClock+0x110>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
}
 80006cc:	e010      	b.n	80006f0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <enableClock+0x10c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <enableClock+0x124>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d10b      	bne.n	80006f0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <enableClock+0x110>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <enableClock+0x110>)
 80006de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006e2:	6153      	str	r3, [r2, #20]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <enableClock+0x110>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
}
 80006f0:	bf00      	nop
 80006f2:	3724      	adds	r7, #36	; 0x24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200003b0 	.word	0x200003b0
 8000700:	40021000 	.word	0x40021000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000800 	.word	0x48000800
 800070c:	48000c00 	.word	0x48000c00
 8000710:	48001000 	.word	0x48001000
 8000714:	48001400 	.word	0x48001400

08000718 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <setRowOffsets+0x3c>)
 800072c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <setRowOffsets+0x3c>)
 8000734:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <setRowOffsets+0x3c>)
 800073c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <setRowOffsets+0x3c>)
 8000744:	70da      	strb	r2, [r3, #3]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200003a8 	.word	0x200003a8

08000758 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800075c:	2001      	movs	r0, #1
 800075e:	f000 f8a1 	bl	80008a4 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000762:	2002      	movs	r0, #2
 8000764:	f003 f8ec 	bl	8003940 <HAL_Delay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800077c:	2304      	movs	r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d803      	bhi.n	8000790 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3b01      	subs	r3, #1
 800078e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <setCursor+0x5c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d303      	bcc.n	80007a2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <setCursor+0x5c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <setCursor+0x60>)
 80007a6:	5cd2      	ldrb	r2, [r2, r3]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4413      	add	r3, r2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f873 	bl	80008a4 <command>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200003b5 	.word	0x200003b5
 80007cc:	200003a8 	.word	0x200003a8

080007d0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <display+0x28>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <display+0x28>)
 80007e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <display+0x28>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f859 	bl	80008a4 <command>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200003b4 	.word	0x200003b4

080007fc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <print+0x12>
 800080a:	2300      	movs	r3, #0
 800080c:	e01d      	b.n	800084a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fce6 	bl	80001e4 <strlen>
 8000818:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800081e:	e00c      	b.n	800083a <print+0x3e>
    if (write(*buffer++)) n++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	617a      	str	r2, [r7, #20]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f849 	bl	80008c0 <write>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <print+0x4a>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	613a      	str	r2, [r7, #16]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ed      	bne.n	8000820 <print+0x24>
 8000844:	e000      	b.n	8000848 <print+0x4c>
    else break;
 8000846:	bf00      	nop
  }
  return n;
 8000848:	68fb      	ldr	r3, [r7, #12]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	6039      	str	r1, [r7, #0]
 800085c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	b25b      	sxtb	r3, r3
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	b25b      	sxtb	r3, r3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f815 	bl	80008a4 <command>
  for (int i=0; i<8; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e009      	b.n	8000894 <createChar+0x42>
    write(charmap[i]);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f819 	bl	80008c0 <write>
  for (int i=0; i<8; i++) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b07      	cmp	r3, #7
 8000898:	ddf2      	ble.n	8000880 <createChar+0x2e>
  }
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f814 	bl	80008e0 <send>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <write>:

inline size_t write(uint8_t value) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f806 	bl	80008e0 <send>
  return 1; // assume sucess
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <send+0x6c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a16      	ldr	r2, [pc, #88]	; (8000950 <send+0x70>)
 80008f6:	8811      	ldrh	r1, [r2, #0]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fae8 	bl	8003ed0 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <send+0x74>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d007      	beq.n	8000918 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <send+0x6c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a11      	ldr	r2, [pc, #68]	; (8000954 <send+0x74>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fadc 	bl	8003ed0 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <send+0x78>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <send+0x4e>
    write8bits(value); 
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f86c 	bl	8000a04 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800092c:	e009      	b.n	8000942 <send+0x62>
    write4bits(value>>4);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f83b 	bl	80009b0 <write4bits>
    write4bits(value);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f837 	bl	80009b0 <write4bits>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200003b0 	.word	0x200003b0
 8000950:	200003cc 	.word	0x200003cc
 8000954:	200003ac 	.word	0x200003ac
 8000958:	200003c9 	.word	0x200003c9

0800095c <pulseEnable>:

void pulseEnable(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <pulseEnable+0x4c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <pulseEnable+0x50>)
 8000966:	8811      	ldrh	r1, [r2, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fab0 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000970:	2001      	movs	r0, #1
 8000972:	f002 ffe5 	bl	8003940 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <pulseEnable+0x4c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <pulseEnable+0x50>)
 800097c:	8811      	ldrh	r1, [r2, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f003 faa5 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000986:	2001      	movs	r0, #1
 8000988:	f002 ffda 	bl	8003940 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <pulseEnable+0x4c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <pulseEnable+0x50>)
 8000992:	8811      	ldrh	r1, [r2, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fa9a 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800099c:	2001      	movs	r0, #1
 800099e:	f002 ffcf 	bl	8003940 <HAL_Delay>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200003b0 	.word	0x200003b0
 80009ac:	200003ca 	.word	0x200003ca

080009b0 <write4bits>:

void write4bits(uint8_t value) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e013      	b.n	80009e8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <write4bits+0x4c>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <write4bits+0x50>)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	fa42 f303 	asr.w	r3, r2, r3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	f003 fa77 	bl	8003ed0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	dde8      	ble.n	80009c0 <write4bits+0x10>
  }

  pulseEnable();
 80009ee:	f7ff ffb5 	bl	800095c <pulseEnable>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200003b0 	.word	0x200003b0
 8000a00:	200003b8 	.word	0x200003b8

08000a04 <write8bits>:

void write8bits(uint8_t value) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e013      	b.n	8000a3c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <write8bits+0x4c>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <write8bits+0x50>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	fa42 f303 	asr.w	r3, r2, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	f003 fa4d 	bl	8003ed0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b07      	cmp	r3, #7
 8000a40:	dde8      	ble.n	8000a14 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a42:	f7ff ff8b 	bl	800095c <pulseEnable>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200003b0 	.word	0x200003b0
 8000a54:	200003b8 	.word	0x200003b8

08000a58 <menu>:
#include "stdio.h"
#include <stdlib.h>
#include <math.h>
#include <time.h>

void menu(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	clear();
 8000a5c:	f7ff fe7c 	bl	8000758 <clear>
	setCursor(1, 0);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe82 	bl	800076c <setCursor>
	print("Menu:");
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <menu+0x38>)
 8000a6a:	f7ff fec7 	bl	80007fc <print>
	setCursor(8, 1);
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff fe7b 	bl	800076c <setCursor>
	print("1.Start");
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <menu+0x3c>)
 8000a78:	f7ff fec0 	bl	80007fc <print>
	setCursor(8, 2);
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	2008      	movs	r0, #8
 8000a80:	f7ff fe74 	bl	800076c <setCursor>
	print("2.About");
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <menu+0x40>)
 8000a86:	f7ff feb9 	bl	80007fc <print>

//	HAL_Delay(50);
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	08009720 	.word	0x08009720
 8000a94:	08009728 	.word	0x08009728
 8000a98:	08009730 	.word	0x08009730

08000a9c <numberTOBCD>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void numberTOBCD(int i){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

	int x1 = i&1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
	int x2 = i&2;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
	int x3 = i&4;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60fb      	str	r3, [r7, #12]
	int x4 = i&8;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60bb      	str	r3, [r7, #8]

	if(x1 > 0) x1 = 1;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dd01      	ble.n	8000ace <numberTOBCD+0x32>
 8000aca:	2301      	movs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
	if(x2 > 0) x2 = 1;
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dd01      	ble.n	8000ad8 <numberTOBCD+0x3c>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
	if(x3 > 0) x3 = 1;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dd01      	ble.n	8000ae2 <numberTOBCD+0x46>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
	if(x4 > 0) x4 = 1;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd01      	ble.n	8000aec <numberTOBCD+0x50>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(GPIOB	, GPIO_PIN_12, x1);
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	480f      	ldr	r0, [pc, #60]	; (8000b34 <numberTOBCD+0x98>)
 8000af8:	f003 f9ea 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, x2);
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <numberTOBCD+0x98>)
 8000b08:	f003 f9e2 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, x3);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <numberTOBCD+0x98>)
 8000b18:	f003 f9da 	bl	8003ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, x4);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b26:	4803      	ldr	r0, [pc, #12]	; (8000b34 <numberTOBCD+0x98>)
 8000b28:	f003 f9d2 	bl	8003ed0 <HAL_GPIO_WritePin>


}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	48000400 	.word	0x48000400

08000b38 <HAL_GPIO_EXTI_Callback>:
GPIO_TypeDef *const Column_ports[] = {GPIOD, GPIOD, GPIOD, GPIOD};
const uint16_t Column_pins[] = {GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8};
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
  if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x44>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000b4a:	f002 feed 	bl	8003928 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	429c      	cmp	r4, r3
 8000b52:	d80e      	bhi.n	8000b72 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8000b54:	f002 fee8 	bl	8003928 <HAL_GetTick>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x44>)
 8000b5c:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8000b5e:	23ff      	movs	r3, #255	; 0xff
 8000b60:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 8000b62:	23ff      	movs	r3, #255	; 0xff
 8000b64:	73bb      	strb	r3, [r7, #14]

  if (GPIO_Pin == GPIO_PIN_0)
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d103      	bne.n	8000b74 <HAL_GPIO_EXTI_Callback+0x3c>
  {


	  menu();
 8000b6c:	f7ff ff74 	bl	8000a58 <menu>
 8000b70:	e000      	b.n	8000b74 <HAL_GPIO_EXTI_Callback+0x3c>
    return;
 8000b72:	bf00      	nop

  }



}
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd90      	pop	{r4, r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200005d0 	.word	0x200005d0

08000b80 <PWM_Start>:

TIM_HandleTypeDef *pwm_timer = &htim1; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel = TIM_CHANNEL_2;  // Specify configured PWM channel

void PWM_Start()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <PWM_Start+0x18>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <PWM_Start+0x1c>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f005 fbda 	bl	8006348 <HAL_TIM_PWM_Start>

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000017c 	.word	0x2000017c
 8000b9c:	20000180 	.word	0x20000180

08000ba0 <PWM_Stop>:

void PWM_Stop()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <PWM_Stop+0x18>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <PWM_Stop+0x1c>)
 8000baa:	6812      	ldr	r2, [r2, #0]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f005 fcca 	bl	8006548 <HAL_TIM_PWM_Stop>

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000017c 	.word	0x2000017c
 8000bbc:	20000180 	.word	0x20000180

08000bc0 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
  if (pwm_freq == 0 || pwm_freq > 20000)
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <PWM_Change_Tone+0x20>
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d937      	bls.n	8000c50 <PWM_Change_Tone+0x90>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000be0:	4b52      	ldr	r3, [pc, #328]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d105      	bne.n	8000bf4 <PWM_Change_Tone+0x34>
 8000be8:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf2:	e097      	b.n	8000d24 <PWM_Change_Tone+0x164>
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d105      	bne.n	8000c08 <PWM_Change_Tone+0x48>
 8000bfc:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	6393      	str	r3, [r2, #56]	; 0x38
 8000c06:	e08d      	b.n	8000d24 <PWM_Change_Tone+0x164>
 8000c08:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	d105      	bne.n	8000c1c <PWM_Change_Tone+0x5c>
 8000c10:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	2300      	movs	r3, #0
 8000c18:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c1a:	e083      	b.n	8000d24 <PWM_Change_Tone+0x164>
 8000c1c:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b0c      	cmp	r3, #12
 8000c22:	d105      	bne.n	8000c30 <PWM_Change_Tone+0x70>
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	e079      	b.n	8000d24 <PWM_Change_Tone+0x164>
 8000c30:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b10      	cmp	r3, #16
 8000c36:	d105      	bne.n	8000c44 <PWM_Change_Tone+0x84>
 8000c38:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	6593      	str	r3, [r2, #88]	; 0x58
 8000c42:	e06f      	b.n	8000d24 <PWM_Change_Tone+0x164>
 8000c44:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c4e:	e069      	b.n	8000d24 <PWM_Change_Tone+0x164>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000c50:	f004 fc10 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8000c54:	61f8      	str	r0, [r7, #28]
    // const uint16_t prescaler = 1;
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4a35      	ldr	r2, [pc, #212]	; (8000d34 <PWM_Change_Tone+0x174>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0b9b      	lsrs	r3, r3, #14
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3301      	adds	r3, #1
 8000c6a:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000c6c:	8b7b      	ldrh	r3, [r7, #26]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c74:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	4a2b      	ldr	r2, [pc, #172]	; (8000d38 <PWM_Change_Tone+0x178>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	09db      	lsrs	r3, r3, #7
 8000c90:	60fb      	str	r3, [r7, #12]

    pwm_timer->Instance->PSC = prescaler - 1;
 8000c92:	8b7b      	ldrh	r3, [r7, #26]
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer->Instance->ARR = period_cycles - 1;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	3a01      	subs	r2, #1
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <PWM_Change_Tone+0x108>
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000cc6:	e02d      	b.n	8000d24 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d105      	bne.n	8000cdc <PWM_Change_Tone+0x11c>
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000cda:	e023      	b.n	8000d24 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d105      	bne.n	8000cf0 <PWM_Change_Tone+0x130>
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000cee:	e019      	b.n	8000d24 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d105      	bne.n	8000d04 <PWM_Change_Tone+0x144>
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d02:	e00f      	b.n	8000d24 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <PWM_Change_Tone+0x16c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b10      	cmp	r3, #16
 8000d0a:	d105      	bne.n	8000d18 <PWM_Change_Tone+0x158>
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000d16:	e005      	b.n	8000d24 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <PWM_Change_Tone+0x170>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000d22:	e7ff      	b.n	8000d24 <PWM_Change_Tone+0x164>
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000180 	.word	0x20000180
 8000d30:	2000017c 	.word	0x2000017c
 8000d34:	45e7b273 	.word	0x45e7b273
 8000d38:	10624dd3 	.word	0x10624dd3

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f002 fd97 	bl	8003874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f8ad 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fc03 	bl	8001554 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d4e:	f000 f913 	bl	8000f78 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d52:	f000 f9ab 	bl	80010ac <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d56:	f000 fbdb 	bl	8001510 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000d5a:	f000 f94d 	bl	8000ff8 <MX_RTC_Init>
  MX_TIM2_Init();
 8000d5e:	f000 fa8f 	bl	8001280 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000d62:	f000 fb53 	bl	800140c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8000d66:	f000 fba3 	bl	80014b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d6a:	f000 fad7 	bl	800131c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d6e:	f000 f9db 	bl	8001128 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LiquidCrystal(GPIOD, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15);
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d96:	4836      	ldr	r0, [pc, #216]	; (8000e70 <main+0x134>)
 8000d98:	f7ff fa82 	bl	80002a0 <LiquidCrystal>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d9c:	4835      	ldr	r0, [pc, #212]	; (8000e74 <main+0x138>)
 8000d9e:	f005 fa07 	bl	80061b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000da2:	4835      	ldr	r0, [pc, #212]	; (8000e78 <main+0x13c>)
 8000da4:	f005 fa04 	bl	80061b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8000da8:	4834      	ldr	r0, [pc, #208]	; (8000e7c <main+0x140>)
 8000daa:	f005 fa01 	bl	80061b0 <HAL_TIM_Base_Start_IT>
//  HAL_ADC_Start_IT(&hadc1);
  begin(20,4);
 8000dae:	2104      	movs	r1, #4
 8000db0:	2014      	movs	r0, #20
 8000db2:	f7ff fb0d 	bl	80003d0 <begin>





    createChar(1,doodle);
 8000db6:	4932      	ldr	r1, [pc, #200]	; (8000e80 <main+0x144>)
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fd4a 	bl	8000852 <createChar>
    createChar(2,stair);
 8000dbe:	4931      	ldr	r1, [pc, #196]	; (8000e84 <main+0x148>)
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f7ff fd46 	bl	8000852 <createChar>
    createChar(3,brokenstair);
 8000dc6:	4930      	ldr	r1, [pc, #192]	; (8000e88 <main+0x14c>)
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f7ff fd42 	bl	8000852 <createChar>
    createChar(4,monster);
 8000dce:	492f      	ldr	r1, [pc, #188]	; (8000e8c <main+0x150>)
 8000dd0:	2004      	movs	r0, #4
 8000dd2:	f7ff fd3e 	bl	8000852 <createChar>
    createChar(5,hole);
 8000dd6:	492e      	ldr	r1, [pc, #184]	; (8000e90 <main+0x154>)
 8000dd8:	2005      	movs	r0, #5
 8000dda:	f7ff fd3a 	bl	8000852 <createChar>
    createChar(6,spring);
 8000dde:	492d      	ldr	r1, [pc, #180]	; (8000e94 <main+0x158>)
 8000de0:	2006      	movs	r0, #6
 8000de2:	f7ff fd36 	bl	8000852 <createChar>
    createChar(7,doodlemenu);
 8000de6:	492c      	ldr	r1, [pc, #176]	; (8000e98 <main+0x15c>)
 8000de8:	2007      	movs	r0, #7
 8000dea:	f7ff fd32 	bl	8000852 <createChar>



    RTC_TimeTypeDef mytime;

    mytime.Hours = 11;
 8000dee:	230b      	movs	r3, #11
 8000df0:	713b      	strb	r3, [r7, #4]
    mytime.Minutes = 45;
 8000df2:	232d      	movs	r3, #45	; 0x2d
 8000df4:	717b      	strb	r3, [r7, #5]
    mytime.Seconds = 00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71bb      	strb	r3, [r7, #6]

    HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4826      	ldr	r0, [pc, #152]	; (8000e9c <main+0x160>)
 8000e02:	f004 fe32 	bl	8005a6a <HAL_RTC_SetTime>

    RTC_DateTypeDef myDate;

    myDate.Year = 3;
 8000e06:	2303      	movs	r3, #3
 8000e08:	70fb      	strb	r3, [r7, #3]
    myDate.Month = 7;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	707b      	strb	r3, [r7, #1]
    myDate.Date = 12;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	70bb      	strb	r3, [r7, #2]

    HAL_RTC_SetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4820      	ldr	r0, [pc, #128]	; (8000e9c <main+0x160>)
 8000e1a:	f004 ff41 	bl	8005ca0 <HAL_RTC_SetDate>

    srand(mytime.Seconds);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f007 fa2b 	bl	800827c <srand>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4811      	ldr	r0, [pc, #68]	; (8000e70 <main+0x134>)
 8000e2c:	f003 f850 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <main+0x134>)
 8000e36:	f003 f84b 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	480c      	ldr	r0, [pc, #48]	; (8000e70 <main+0x134>)
 8000e40:	f003 f846 	bl	8003ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <main+0x134>)
 8000e4c:	f003 f840 	bl	8003ed0 <HAL_GPIO_WritePin>


  setCursor(3, 1);
 8000e50:	2101      	movs	r1, #1
 8000e52:	2003      	movs	r0, #3
 8000e54:	f7ff fc8a 	bl	800076c <setCursor>
  print("Doodle Jump");
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <main+0x164>)
 8000e5a:	f7ff fccf 	bl	80007fc <print>
  setCursor(15, 1);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	200f      	movs	r0, #15
 8000e62:	f7ff fc83 	bl	800076c <setCursor>
  write(7);
 8000e66:	2007      	movs	r0, #7
 8000e68:	f7ff fd2a 	bl	80008c0 <write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <main+0x130>
 8000e6e:	bf00      	nop
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	20000584 	.word	0x20000584
 8000e78:	20000468 	.word	0x20000468
 8000e7c:	2000041c 	.word	0x2000041c
 8000e80:	20000024 	.word	0x20000024
 8000e84:	20000004 	.word	0x20000004
 8000e88:	20000034 	.word	0x20000034
 8000e8c:	2000001c 	.word	0x2000001c
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000014 	.word	0x20000014
 8000e98:	2000002c 	.word	0x2000002c
 8000e9c:	200004b4 	.word	0x200004b4
 8000ea0:	0800973c 	.word	0x0800973c

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09e      	sub	sp, #120	; 0x78
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f007 f9da 	bl	800826c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	223c      	movs	r2, #60	; 0x3c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f007 f9cc 	bl	800826c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ed8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000edc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000eea:	2301      	movs	r3, #1
 8000eec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fa32 	bl	800436c <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f0e:	f000 fc17 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2302      	movs	r3, #2
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 f924 	bl	800517c <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f3a:	f000 fc01 	bl	8001740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <SystemClock_Config+0xd0>)
 8000f40:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 fb43 	bl	80055e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f68:	f000 fbea 	bl	8001740 <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3778      	adds	r7, #120	; 0x78
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	00031022 	.word	0x00031022

08000f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_I2C1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <MX_I2C1_Init+0x7c>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fb4:	f002 ffd6 	bl	8003f64 <HAL_I2C_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fbe:	f000 fbbf 	bl	8001740 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fc6:	f003 f85c 	bl	8004082 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd0:	f000 fbb6 	bl	8001740 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_I2C1_Init+0x74>)
 8000fd8:	f003 f89e 	bl	8004118 <HAL_I2CEx_ConfigDigitalFilter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fbad 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200003d0 	.word	0x200003d0
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	2000090e 	.word	0x2000090e

08000ff8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_RTC_Init+0xac>)
 8001012:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <MX_RTC_Init+0xb0>)
 8001014:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_RTC_Init+0xac>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_RTC_Init+0xac>)
 800101e:	227f      	movs	r2, #127	; 0x7f
 8001020:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_RTC_Init+0xac>)
 8001024:	22ff      	movs	r2, #255	; 0xff
 8001026:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_RTC_Init+0xac>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_RTC_Init+0xac>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_RTC_Init+0xac>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800103a:	481a      	ldr	r0, [pc, #104]	; (80010a4 <MX_RTC_Init+0xac>)
 800103c:	f004 fc84 	bl	8005948 <HAL_RTC_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001046:	f000 fb7b 	bl	8001740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800104a:	2300      	movs	r3, #0
 800104c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800104e:	2300      	movs	r3, #0
 8001050:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001052:	2300      	movs	r3, #0
 8001054:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <MX_RTC_Init+0xac>)
 8001066:	f004 fd00 	bl	8005a6a <HAL_RTC_SetTime>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001070:	f000 fb66 	bl	8001740 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001074:	2301      	movs	r3, #1
 8001076:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001078:	2301      	movs	r3, #1
 800107a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800107c:	2301      	movs	r3, #1
 800107e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001080:	2300      	movs	r3, #0
 8001082:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	2201      	movs	r2, #1
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_RTC_Init+0xac>)
 800108c:	f004 fe08 	bl	8005ca0 <HAL_RTC_SetDate>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001096:	f000 fb53 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200004b4 	.word	0x200004b4
 80010a8:	40002800 	.word	0x40002800

080010ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_SPI1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_SPI1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_SPI1_Init+0x74>)
 80010b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_SPI1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI1_Init+0x74>)
 80010c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_SPI1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI1_Init+0x74>)
 80010da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI1_Init+0x74>)
 80010e2:	2208      	movs	r2, #8
 80010e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_SPI1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI1_Init+0x74>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_SPI1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI1_Init+0x74>)
 8001106:	2208      	movs	r2, #8
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_SPI1_Init+0x74>)
 800110c:	f004 ff4e 	bl	8005fac <HAL_SPI_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fb13 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000520 	.word	0x20000520
 8001124:	40013000 	.word	0x40013000

08001128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09a      	sub	sp, #104	; 0x68
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	222c      	movs	r2, #44	; 0x2c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f007 f882 	bl	800826c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <MX_TIM1_Init+0x150>)
 800116a:	4a44      	ldr	r2, [pc, #272]	; (800127c <MX_TIM1_Init+0x154>)
 800116c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 59;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <MX_TIM1_Init+0x150>)
 8001170:	223b      	movs	r2, #59	; 0x3b
 8001172:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <MX_TIM1_Init+0x150>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800117a:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <MX_TIM1_Init+0x150>)
 800117c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001180:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <MX_TIM1_Init+0x150>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <MX_TIM1_Init+0x150>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <MX_TIM1_Init+0x150>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001194:	4838      	ldr	r0, [pc, #224]	; (8001278 <MX_TIM1_Init+0x150>)
 8001196:	f004 ffb4 	bl	8006102 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 face 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ae:	4619      	mov	r1, r3
 80011b0:	4831      	ldr	r0, [pc, #196]	; (8001278 <MX_TIM1_Init+0x150>)
 80011b2:	f005 fc93 	bl	8006adc <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011bc:	f000 fac0 	bl	8001740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c0:	482d      	ldr	r0, [pc, #180]	; (8001278 <MX_TIM1_Init+0x150>)
 80011c2:	f005 f85f 	bl	8006284 <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011cc:	f000 fab8 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e0:	4619      	mov	r1, r3
 80011e2:	4825      	ldr	r0, [pc, #148]	; (8001278 <MX_TIM1_Init+0x150>)
 80011e4:	f006 f99c 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011ee:	f000 faa7 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	; 0x60
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001212:	2204      	movs	r2, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_TIM1_Init+0x150>)
 8001218:	f005 fb4c 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001222:	f000 fa8d 	bl	8001740 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4619      	mov	r1, r3
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM1_Init+0x150>)
 800125c:	f006 f9e0 	bl	8007620 <HAL_TIMEx_ConfigBreakDeadTime>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001266:	f000 fa6b 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM1_Init+0x150>)
 800126c:	f000 fbb6 	bl	80019dc <HAL_TIM_MspPostInit>

}
 8001270:	bf00      	nop
 8001272:	3768      	adds	r7, #104	; 0x68
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200004d4 	.word	0x200004d4
 800127c:	40012c00 	.word	0x40012c00

08001280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_TIM2_Init+0x98>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_TIM2_Init+0x98>)
 80012a8:	f640 125f 	movw	r2, #2399	; 0x95f
 80012ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_TIM2_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM2_Init+0x98>)
 80012b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_TIM2_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM2_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM2_Init+0x98>)
 80012ca:	f004 ff1a 	bl	8006102 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 fa34 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM2_Init+0x98>)
 80012e6:	f005 fbf9 	bl	8006adc <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012f0:	f000 fa26 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM2_Init+0x98>)
 8001302:	f006 f90d 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800130c:	f000 fa18 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000584 	.word	0x20000584

0800131c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	615a      	str	r2, [r3, #20]
 800134c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001350:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <MX_TIM3_Init+0xec>)
 8001352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001356:	222f      	movs	r2, #47	; 0x2f
 8001358:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_TIM3_Init+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_TIM3_Init+0xe8>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001374:	4823      	ldr	r0, [pc, #140]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001376:	f004 fec4 	bl	8006102 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001380:	f000 f9de 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138e:	4619      	mov	r1, r3
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM3_Init+0xe8>)
 8001392:	f005 fba3 	bl	8006adc <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800139c:	f000 f9d0 	bl	8001740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013a0:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013a2:	f004 ff6f 	bl	8006284 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013ac:	f000 f9c8 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013c0:	f006 f8ae 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013ca:	f000 f9b9 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	; 0x60
 80013d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	2208      	movs	r2, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013e6:	f005 fa65 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013f0:	f000 f9a6 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM3_Init+0xe8>)
 80013f6:	f000 faf1 	bl	80019dc <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3738      	adds	r7, #56	; 0x38
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000468 	.word	0x20000468
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_TIM15_Init+0x9c>)
 800142c:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <MX_TIM15_Init+0xa0>)
 800142e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 479;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM15_Init+0x9c>)
 8001432:	f240 12df 	movw	r2, #479	; 0x1df
 8001436:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_TIM15_Init+0x9c>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM15_Init+0x9c>)
 8001440:	f242 720f 	movw	r2, #9999	; 0x270f
 8001444:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_TIM15_Init+0x9c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_TIM15_Init+0x9c>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM15_Init+0x9c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_TIM15_Init+0x9c>)
 800145a:	f004 fe52 	bl	8006102 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001464:	f000 f96c 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_TIM15_Init+0x9c>)
 8001476:	f005 fb31 	bl	8006adc <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001480:	f000 f95e 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_TIM15_Init+0x9c>)
 8001492:	f006 f845 	bl	8007520 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800149c:	f000 f950 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000041c 	.word	0x2000041c
 80014ac:	40014000 	.word	0x40014000

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART2_UART_Init+0x58>)
 80014f4:	f006 f930 	bl	8007758 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014fe:	f000 f91f 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200005d4 	.word	0x200005d4
 800150c:	40004400 	.word	0x40004400

08001510 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_USB_PCD_Init+0x3c>)
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <MX_USB_PCD_Init+0x40>)
 8001518:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USB_PCD_Init+0x3c>)
 800151c:	2208      	movs	r2, #8
 800151e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_USB_PCD_Init+0x3c>)
 8001522:	2202      	movs	r2, #2
 8001524:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USB_PCD_Init+0x3c>)
 8001528:	2202      	movs	r2, #2
 800152a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_USB_PCD_Init+0x3c>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USB_PCD_Init+0x3c>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_USB_PCD_Init+0x3c>)
 800153a:	f002 fe39 	bl	80041b0 <HAL_PCD_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001544:	f000 f8fc 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000658 	.word	0x20000658
 8001550:	40005c00 	.word	0x40005c00

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	4b70      	ldr	r3, [pc, #448]	; (800172c <MX_GPIO_Init+0x1d8>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a6f      	ldr	r2, [pc, #444]	; (800172c <MX_GPIO_Init+0x1d8>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6153      	str	r3, [r2, #20]
 8001576:	4b6d      	ldr	r3, [pc, #436]	; (800172c <MX_GPIO_Init+0x1d8>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b6a      	ldr	r3, [pc, #424]	; (800172c <MX_GPIO_Init+0x1d8>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a69      	ldr	r2, [pc, #420]	; (800172c <MX_GPIO_Init+0x1d8>)
 8001588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b67      	ldr	r3, [pc, #412]	; (800172c <MX_GPIO_Init+0x1d8>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <MX_GPIO_Init+0x1d8>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a63      	ldr	r2, [pc, #396]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b61      	ldr	r3, [pc, #388]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a5d      	ldr	r2, [pc, #372]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b5b      	ldr	r3, [pc, #364]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a57      	ldr	r2, [pc, #348]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b55      	ldr	r3, [pc, #340]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e2:	4b52      	ldr	r3, [pc, #328]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4a51      	ldr	r2, [pc, #324]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015ec:	6153      	str	r3, [r2, #20]
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <MX_GPIO_Init+0x1d8>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015fa:	2200      	movs	r2, #0
 80015fc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001600:	484b      	ldr	r0, [pc, #300]	; (8001730 <MX_GPIO_Init+0x1dc>)
 8001602:	f002 fc65 	bl	8003ed0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	210f      	movs	r1, #15
 800160a:	484a      	ldr	r0, [pc, #296]	; (8001734 <MX_GPIO_Init+0x1e0>)
 800160c:	f002 fc60 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001616:	4848      	ldr	r0, [pc, #288]	; (8001738 <MX_GPIO_Init+0x1e4>)
 8001618:	f002 fc5a 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800161c:	2200      	movs	r2, #0
 800161e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001622:	4846      	ldr	r0, [pc, #280]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001624:	f002 fc54 	bl	8003ed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001628:	f64f 7308 	movw	r3, #65288	; 0xff08
 800162c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	483b      	ldr	r0, [pc, #236]	; (8001730 <MX_GPIO_Init+0x1dc>)
 8001642:	f002 fab3 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001646:	230f      	movs	r3, #15
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4835      	ldr	r0, [pc, #212]	; (8001734 <MX_GPIO_Init+0x1e0>)
 800165e:	f002 faa5 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001666:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800166c:	2302      	movs	r3, #2
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f002 fa97 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800167e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4828      	ldr	r0, [pc, #160]	; (8001738 <MX_GPIO_Init+0x1e4>)
 8001698:	f002 fa88 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800169c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4821      	ldr	r0, [pc, #132]	; (800173c <MX_GPIO_Init+0x1e8>)
 80016b6:	f002 fa79 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80016ba:	231e      	movs	r3, #30
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c4:	2302      	movs	r3, #2
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481b      	ldr	r0, [pc, #108]	; (800173c <MX_GPIO_Init+0x1e8>)
 80016d0:	f002 fa6c 	bl	8003bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	2006      	movs	r0, #6
 80016da:	f002 fa30 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016de:	2006      	movs	r0, #6
 80016e0:	f002 fa49 	bl	8003b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2101      	movs	r1, #1
 80016e8:	2007      	movs	r0, #7
 80016ea:	f002 fa28 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016ee:	2007      	movs	r0, #7
 80016f0:	f002 fa41 	bl	8003b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2101      	movs	r1, #1
 80016f8:	2008      	movs	r0, #8
 80016fa:	f002 fa20 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80016fe:	2008      	movs	r0, #8
 8001700:	f002 fa39 	bl	8003b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	2009      	movs	r0, #9
 800170a:	f002 fa18 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800170e:	2009      	movs	r0, #9
 8001710:	f002 fa31 	bl	8003b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2101      	movs	r1, #1
 8001718:	200a      	movs	r0, #10
 800171a:	f002 fa10 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800171e:	200a      	movs	r0, #10
 8001720:	f002 fa29 	bl	8003b76 <HAL_NVIC_EnableIRQ>

}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	48001000 	.word	0x48001000
 8001734:	48000800 	.word	0x48000800
 8001738:	48000400 	.word	0x48000400
 800173c:	48000c00 	.word	0x48000c00

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>
	...

0800174c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_MspInit+0x44>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6193      	str	r3, [r2, #24]
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_MspInit+0x44>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x44>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x44>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x44>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001782:	2005      	movs	r0, #5
 8001784:	f002 f9d0 	bl	8003b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_I2C_MspInit+0x7c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d127      	bne.n	8001806 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_I2C_MspInit+0x80>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_I2C_MspInit+0x80>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c0:	6153      	str	r3, [r2, #20]
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_I2C_MspInit+0x80>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d2:	2312      	movs	r3, #18
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017de:	2304      	movs	r3, #4
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <HAL_I2C_MspInit+0x84>)
 80017ea:	f002 f9df 	bl	8003bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_I2C_MspInit+0x80>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_I2C_MspInit+0x80>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_I2C_MspInit+0x80>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40005400 	.word	0x40005400
 8001814:	40021000 	.word	0x40021000
 8001818:	48000400 	.word	0x48000400

0800181c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_RTC_MspInit+0x44>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d111      	bne.n	8001852 <HAL_RTC_MspInit+0x36>
 800182e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001832:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800183c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_RTC_MspInit+0x48>)
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	461a      	mov	r2, r3
 800184e:	2301      	movs	r3, #1
 8001850:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40002800 	.word	0x40002800
 8001864:	10908100 	.word	0x10908100

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_SPI_MspInit+0x7c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d128      	bne.n	80018dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_SPI_MspInit+0x80>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80018ba:	23e0      	movs	r3, #224	; 0xe0
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ca:	2305      	movs	r3, #5
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f002 f968 	bl	8003bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013000 	.word	0x40013000
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a34      	ldr	r2, [pc, #208]	; (80019cc <HAL_TIM_Base_MspInit+0xe0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d114      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fe:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	2018      	movs	r0, #24
 800191c:	f002 f90f 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001920:	2018      	movs	r0, #24
 8001922:	f002 f928 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001926:	e04c      	b.n	80019c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d114      	bne.n	800195c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2102      	movs	r1, #2
 800194e:	201c      	movs	r0, #28
 8001950:	f002 f8f5 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001954:	201c      	movs	r0, #28
 8001956:	f002 f90e 	bl	8003b76 <HAL_NVIC_EnableIRQ>
}
 800195a:	e032      	b.n	80019c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_TIM_Base_MspInit+0xe8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d114      	bne.n	8001990 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2103      	movs	r1, #3
 8001982:	201d      	movs	r0, #29
 8001984:	f002 f8db 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001988:	201d      	movs	r0, #29
 800198a:	f002 f8f4 	bl	8003b76 <HAL_NVIC_EnableIRQ>
}
 800198e:	e018      	b.n	80019c2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_TIM_Base_MspInit+0xec>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d113      	bne.n	80019c2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6193      	str	r3, [r2, #24]
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_Base_MspInit+0xe4>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2102      	movs	r1, #2
 80019b6:	2018      	movs	r0, #24
 80019b8:	f002 f8c1 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019bc:	2018      	movs	r0, #24
 80019be:	f002 f8da 	bl	8003b76 <HAL_NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40014000 	.word	0x40014000

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <HAL_TIM_MspPostInit+0xac>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11e      	bne.n	8001a3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_TIM_MspPostInit+0xb0>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <HAL_TIM_MspPostInit+0xb0>)
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	6153      	str	r3, [r2, #20]
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_TIM_MspPostInit+0xb0>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a36:	f002 f8b9 	bl	8003bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a3a:	e020      	b.n	8001a7e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_TIM_MspPostInit+0xb4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11b      	bne.n	8001a7e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_TIM_MspPostInit+0xb0>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_TIM_MspPostInit+0xb0>)
 8001a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a50:	6153      	str	r3, [r2, #20]
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_TIM_MspPostInit+0xb0>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <HAL_TIM_MspPostInit+0xb8>)
 8001a7a:	f002 f897 	bl	8003bac <HAL_GPIO_Init>
}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40012c00 	.word	0x40012c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40000400 	.word	0x40000400
 8001a94:	48001000 	.word	0x48001000

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x7c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d128      	bne.n	8001b0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_UART_MspInit+0x80>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <HAL_UART_MspInit+0x80>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_UART_MspInit+0x80>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_UART_MspInit+0x80>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_UART_MspInit+0x80>)
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	6153      	str	r3, [r2, #20]
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_UART_MspInit+0x80>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aea:	230c      	movs	r3, #12
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afa:	2307      	movs	r3, #7
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f002 f850 	bl	8003bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <HAL_PCD_MspInit+0x80>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d129      	bne.n	8001b92 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_PCD_MspInit+0x84>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_PCD_MspInit+0x84>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_PCD_MspInit+0x84>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001b68:	230e      	movs	r3, #14
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f002 f819 	bl	8003bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_PCD_MspInit+0x84>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_PCD_MspInit+0x84>)
 8001b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_PCD_MspInit+0x84>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40005c00 	.word	0x40005c00
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <rancol0>:
	setCursor(18,2);
	main_field[2][18]="D";
	write(1);
}

void rancol0(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
	int exist = rand()%2 +1;
 8001baa:	f006 fb95 	bl	80082d8 <rand>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	bfb8      	it	lt
 8001bb8:	425b      	neglt	r3, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
	int rr = rand()%4 + 1;
 8001bbe:	f006 fb8b 	bl	80082d8 <rand>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	425a      	negs	r2, r3
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	bf58      	it	pl
 8001bd0:	4253      	negpl	r3, r2
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
	if (exist==2){
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f040 8094 	bne.w	8001d06 <rancol0+0x162>
		int randnum =  rand()%11 + 1;
 8001bde:	f006 fb7b 	bl	80082d8 <rand>
 8001be2:	4601      	mov	r1, r0
 8001be4:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <rancol0+0x16c>)
 8001be6:	fb83 2301 	smull	r2, r3, r3, r1
 8001bea:	105a      	asrs	r2, r3, #1
 8001bec:	17cb      	asrs	r3, r1, #31
 8001bee:	1ad2      	subs	r2, r2, r3
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	1aca      	subs	r2, r1, r3
 8001bfc:	1c53      	adds	r3, r2, #1
 8001bfe:	607b      	str	r3, [r7, #4]
		if(randnum>=1 && randnum<=6)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	dd18      	ble.n	8001c38 <rancol0+0x94>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	dc15      	bgt.n	8001c38 <rancol0+0x94>
		{
			main_field[rr-1][0] = "S";
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	4940      	ldr	r1, [pc, #256]	; (8001d14 <rancol0+0x170>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	440b      	add	r3, r1
 8001c1c:	4a3e      	ldr	r2, [pc, #248]	; (8001d18 <rancol0+0x174>)
 8001c1e:	601a      	str	r2, [r3, #0]
			setCursor(0, rr-1);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7fe fd9e 	bl	800076c <setCursor>
			write(2);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7fe fe45 	bl	80008c0 <write>
 8001c36:	e066      	b.n	8001d06 <rancol0+0x162>
		} else if(randnum==7){
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b07      	cmp	r3, #7
 8001c3c:	d115      	bne.n	8001c6a <rancol0+0xc6>
			main_field[rr-1][0] = "B";
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	4934      	ldr	r1, [pc, #208]	; (8001d14 <rancol0+0x170>)
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	440b      	add	r3, r1
 8001c4e:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <rancol0+0x178>)
 8001c50:	601a      	str	r2, [r3, #0]
			setCursor(0, rr-1);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7fe fd85 	bl	800076c <setCursor>
			write(3);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f7fe fe2c 	bl	80008c0 <write>
			setCursor(0, rr-1);
			write(6);
		}
	}

}
 8001c68:	e04d      	b.n	8001d06 <rancol0+0x162>
		} else if(randnum==8 || randnum==9){
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d002      	beq.n	8001c76 <rancol0+0xd2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	d115      	bne.n	8001ca2 <rancol0+0xfe>
			main_field[rr-1][0] = "M";
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	4926      	ldr	r1, [pc, #152]	; (8001d14 <rancol0+0x170>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	440b      	add	r3, r1
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <rancol0+0x17c>)
 8001c88:	601a      	str	r2, [r3, #0]
			setCursor(0, rr-1);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7fe fd69 	bl	800076c <setCursor>
			write(4);
 8001c9a:	2004      	movs	r0, #4
 8001c9c:	f7fe fe10 	bl	80008c0 <write>
 8001ca0:	e031      	b.n	8001d06 <rancol0+0x162>
		}else if(randnum==10){
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0a      	cmp	r3, #10
 8001ca6:	d115      	bne.n	8001cd4 <rancol0+0x130>
			main_field[rr-1][0] = "H";
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	4919      	ldr	r1, [pc, #100]	; (8001d14 <rancol0+0x170>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	440b      	add	r3, r1
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <rancol0+0x180>)
 8001cba:	601a      	str	r2, [r3, #0]
			setCursor(0, rr-1);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7fe fd50 	bl	800076c <setCursor>
			write(5);
 8001ccc:	2005      	movs	r0, #5
 8001cce:	f7fe fdf7 	bl	80008c0 <write>
}
 8001cd2:	e018      	b.n	8001d06 <rancol0+0x162>
		}else if(randnum==11){
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b0b      	cmp	r3, #11
 8001cd8:	d115      	bne.n	8001d06 <rancol0+0x162>
			main_field[rr-1][0] = "F";
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <rancol0+0x170>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <rancol0+0x184>)
 8001cec:	601a      	str	r2, [r3, #0]
			setCursor(0, rr-1);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe fd37 	bl	800076c <setCursor>
			write(6);
 8001cfe:	2006      	movs	r0, #6
 8001d00:	f7fe fdde 	bl	80008c0 <write>
}
 8001d04:	e7ff      	b.n	8001d06 <rancol0+0x162>
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2e8ba2e9 	.word	0x2e8ba2e9
 8001d14:	2000003c 	.word	0x2000003c
 8001d18:	08009750 	.word	0x08009750
 8001d1c:	08009754 	.word	0x08009754
 8001d20:	08009758 	.word	0x08009758
 8001d24:	0800975c 	.word	0x0800975c
 8001d28:	08009760 	.word	0x08009760

08001d2c <randgen>:

void randgen(){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	; 0x38
 8001d30:	af00      	add	r7, sp, #0

	for(int col=0; col <20; col++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
 8001d36:	e016      	b.n	8001d66 <randgen+0x3a>
						  for(int row=0; row<4; row++){
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3c:	e00d      	b.n	8001d5a <randgen+0x2e>
							  main_field[row][col]="N";
 8001d3e:	49a4      	ldr	r1, [pc, #656]	; (8001fd0 <randgen+0x2a4>)
 8001d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4aa1      	ldr	r2, [pc, #644]	; (8001fd4 <randgen+0x2a8>)
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						  for(int row=0; row<4; row++){
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d56:	3301      	adds	r3, #1
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	ddee      	ble.n	8001d3e <randgen+0x12>
	for(int col=0; col <20; col++){
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	3301      	adds	r3, #1
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	2b13      	cmp	r3, #19
 8001d6a:	dde5      	ble.n	8001d38 <randgen+0xc>
						  }
						  }

	int cr,rr;

	int sr = rand()%3+1;
 8001d6c:	f006 fab4 	bl	80082d8 <rand>
 8001d70:	4601      	mov	r1, r0
 8001d72:	4b99      	ldr	r3, [pc, #612]	; (8001fd8 <randgen+0x2ac>)
 8001d74:	fb83 3201 	smull	r3, r2, r3, r1
 8001d78:	17cb      	asrs	r3, r1, #31
 8001d7a:	1ad2      	subs	r2, r2, r3
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	1aca      	subs	r2, r1, r3
 8001d84:	1c53      	adds	r3, r2, #1
 8001d86:	61bb      	str	r3, [r7, #24]
	for(int i=1; i<=sr+10; i++){ //stair
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	e03a      	b.n	8001e04 <randgen+0xd8>
		cr = rand()%20 + 1;
 8001d8e:	f006 faa3 	bl	80082d8 <rand>
 8001d92:	4601      	mov	r1, r0
 8001d94:	4b91      	ldr	r3, [pc, #580]	; (8001fdc <randgen+0x2b0>)
 8001d96:	fb83 2301 	smull	r2, r3, r3, r1
 8001d9a:	10da      	asrs	r2, r3, #3
 8001d9c:	17cb      	asrs	r3, r1, #31
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	1aca      	subs	r2, r1, r3
 8001daa:	1c53      	adds	r3, r2, #1
 8001dac:	607b      	str	r3, [r7, #4]
		rr = rand()%4 + 1;
 8001dae:	f006 fa93 	bl	80082d8 <rand>
 8001db2:	4603      	mov	r3, r0
 8001db4:	425a      	negs	r2, r3
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	bf58      	it	pl
 8001dc0:	4253      	negpl	r3, r2
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	603b      	str	r3, [r7, #0]
		main_field[rr-1][cr-1] = "S";
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	1e59      	subs	r1, r3, #1
 8001dce:	4880      	ldr	r0, [pc, #512]	; (8001fd0 <randgen+0x2a4>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	4a81      	ldr	r2, [pc, #516]	; (8001fe0 <randgen+0x2b4>)
 8001ddc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		setCursor(cr-1, rr-1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f7fe fcba 	bl	800076c <setCursor>
		write(2);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7fe fd61 	bl	80008c0 <write>
	for(int i=1; i<=sr+10; i++){ //stair
 8001dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e00:	3301      	adds	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	330a      	adds	r3, #10
 8001e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	ddbf      	ble.n	8001d8e <randgen+0x62>
	}

	int br = rand()%2+1;
 8001e0e:	f006 fa63 	bl	80082d8 <rand>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	bfb8      	it	lt
 8001e1c:	425b      	neglt	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
	for(int i=1; i<=br+3; i++){ //brokenstair
 8001e22:	2301      	movs	r3, #1
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e26:	e03a      	b.n	8001e9e <randgen+0x172>
		cr = rand()%20 + 1;
 8001e28:	f006 fa56 	bl	80082d8 <rand>
 8001e2c:	4601      	mov	r1, r0
 8001e2e:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <randgen+0x2b0>)
 8001e30:	fb83 2301 	smull	r2, r3, r3, r1
 8001e34:	10da      	asrs	r2, r3, #3
 8001e36:	17cb      	asrs	r3, r1, #31
 8001e38:	1ad2      	subs	r2, r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	1aca      	subs	r2, r1, r3
 8001e44:	1c53      	adds	r3, r2, #1
 8001e46:	607b      	str	r3, [r7, #4]
		rr = rand()%4 + 1;
 8001e48:	f006 fa46 	bl	80082d8 <rand>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]
		main_field[rr-1][cr-1] = "B";
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1e59      	subs	r1, r3, #1
 8001e68:	4859      	ldr	r0, [pc, #356]	; (8001fd0 <randgen+0x2a4>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <randgen+0x2b8>)
 8001e76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		setCursor(cr-1, rr-1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f7fe fc6d 	bl	800076c <setCursor>
		write(3);
 8001e92:	2003      	movs	r0, #3
 8001e94:	f7fe fd14 	bl	80008c0 <write>
	for(int i=1; i<=br+3; i++){ //brokenstair
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	ddbf      	ble.n	8001e28 <randgen+0xfc>
	}

	int mr = rand()%1+1;
 8001ea8:	f006 fa16 	bl	80082d8 <rand>
 8001eac:	2301      	movs	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
	for(int i=1; i<=mr+1; i++){ //monster
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	e036      	b.n	8001f24 <randgen+0x1f8>
		cr = rand()%16 + 1;
 8001eb6:	f006 fa0f 	bl	80082d8 <rand>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	425a      	negs	r2, r3
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	f002 020f 	and.w	r2, r2, #15
 8001ec6:	bf58      	it	pl
 8001ec8:	4253      	negpl	r3, r2
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
		rr = rand()%4 + 1;
 8001ece:	f006 fa03 	bl	80082d8 <rand>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	425a      	negs	r2, r3
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	bf58      	it	pl
 8001ee0:	4253      	negpl	r3, r2
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	603b      	str	r3, [r7, #0]
		main_field[rr-1][cr-1] = "M";
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1e59      	subs	r1, r3, #1
 8001eee:	4838      	ldr	r0, [pc, #224]	; (8001fd0 <randgen+0x2a4>)
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <randgen+0x2bc>)
 8001efc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		setCursor(cr-1, rr-1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f7fe fc2a 	bl	800076c <setCursor>
		write(4);
 8001f18:	2004      	movs	r0, #4
 8001f1a:	f7fe fcd1 	bl	80008c0 <write>
	for(int i=1; i<=mr+1; i++){ //monster
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3301      	adds	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	ddc3      	ble.n	8001eb6 <randgen+0x18a>
	}

	int hr = rand()%1+1;
 8001f2e:	f006 f9d3 	bl	80082d8 <rand>
 8001f32:	2301      	movs	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<=hr+1; i++){ //hole
 8001f36:	2301      	movs	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	e036      	b.n	8001faa <randgen+0x27e>
		cr = rand()%16 + 1;
 8001f3c:	f006 f9cc 	bl	80082d8 <rand>
 8001f40:	4603      	mov	r3, r0
 8001f42:	425a      	negs	r2, r3
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	f002 020f 	and.w	r2, r2, #15
 8001f4c:	bf58      	it	pl
 8001f4e:	4253      	negpl	r3, r2
 8001f50:	3301      	adds	r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
		rr = rand()%4 + 1;
 8001f54:	f006 f9c0 	bl	80082d8 <rand>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	425a      	negs	r2, r3
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	bf58      	it	pl
 8001f66:	4253      	negpl	r3, r2
 8001f68:	3301      	adds	r3, #1
 8001f6a:	603b      	str	r3, [r7, #0]
		main_field[rr-1][cr-1] = "H";
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	1e5a      	subs	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1e59      	subs	r1, r3, #1
 8001f74:	4816      	ldr	r0, [pc, #88]	; (8001fd0 <randgen+0x2a4>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <randgen+0x2c0>)
 8001f82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		setCursor(cr-1, rr-1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f7fe fbe7 	bl	800076c <setCursor>
		write(5);
 8001f9e:	2005      	movs	r0, #5
 8001fa0:	f7fe fc8e 	bl	80008c0 <write>
	for(int i=1; i<=hr+1; i++){ //hole
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	ddc3      	ble.n	8001f3c <randgen+0x210>
	}

	int fr = rand()%2+1;
 8001fb4:	f006 f990 	bl	80082d8 <rand>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	bfb8      	it	lt
 8001fc2:	425b      	neglt	r3, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
	for(int i=1; i<=fr+1; i++){ //spring fanar
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	e04b      	b.n	8002066 <randgen+0x33a>
 8001fce:	bf00      	nop
 8001fd0:	2000003c 	.word	0x2000003c
 8001fd4:	0800974c 	.word	0x0800974c
 8001fd8:	55555556 	.word	0x55555556
 8001fdc:	66666667 	.word	0x66666667
 8001fe0:	08009750 	.word	0x08009750
 8001fe4:	08009754 	.word	0x08009754
 8001fe8:	08009758 	.word	0x08009758
 8001fec:	0800975c 	.word	0x0800975c
		cr = rand()%20 + 1;
 8001ff0:	f006 f972 	bl	80082d8 <rand>
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <randgen+0x378>)
 8001ff8:	fb83 2301 	smull	r2, r3, r3, r1
 8001ffc:	10da      	asrs	r2, r3, #3
 8001ffe:	17cb      	asrs	r3, r1, #31
 8002000:	1ad2      	subs	r2, r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	1aca      	subs	r2, r1, r3
 800200c:	1c53      	adds	r3, r2, #1
 800200e:	607b      	str	r3, [r7, #4]
		rr = rand()%4 + 1;
 8002010:	f006 f962 	bl	80082d8 <rand>
 8002014:	4603      	mov	r3, r0
 8002016:	425a      	negs	r2, r3
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	bf58      	it	pl
 8002022:	4253      	negpl	r3, r2
 8002024:	3301      	adds	r3, #1
 8002026:	603b      	str	r3, [r7, #0]
		main_field[rr-1][cr-1] = "F";
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	1e59      	subs	r1, r3, #1
 8002030:	481d      	ldr	r0, [pc, #116]	; (80020a8 <randgen+0x37c>)
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <randgen+0x380>)
 800203e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		setCursor(cr-1, rr-1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	4619      	mov	r1, r3
 8002054:	4610      	mov	r0, r2
 8002056:	f7fe fb89 	bl	800076c <setCursor>
		write(6);
 800205a:	2006      	movs	r0, #6
 800205c:	f7fe fc30 	bl	80008c0 <write>
	for(int i=1; i<=fr+1; i++){ //spring fanar
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	429a      	cmp	r2, r3
 800206e:	ddbf      	ble.n	8001ff0 <randgen+0x2c4>
	}
	setCursor(19,2);
 8002070:	2102      	movs	r1, #2
 8002072:	2013      	movs	r0, #19
 8002074:	f7fe fb7a 	bl	800076c <setCursor>
	main_field[2][19]="S";
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <randgen+0x37c>)
 800207a:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <randgen+0x384>)
 800207c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	write(2);
 8002080:	2002      	movs	r0, #2
 8002082:	f7fe fc1d 	bl	80008c0 <write>

	setCursor(18,2);
 8002086:	2102      	movs	r1, #2
 8002088:	2012      	movs	r0, #18
 800208a:	f7fe fb6f 	bl	800076c <setCursor>
	main_field[2][18]="D";
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <randgen+0x37c>)
 8002090:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <randgen+0x388>)
 8002092:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	write(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f7fe fc12 	bl	80008c0 <write>


}
 800209c:	bf00      	nop
 800209e:	3738      	adds	r7, #56	; 0x38
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	66666667 	.word	0x66666667
 80020a8:	2000003c 	.word	0x2000003c
 80020ac:	08009760 	.word	0x08009760
 80020b0:	08009750 	.word	0x08009750
 80020b4:	08009764 	.word	0x08009764

080020b8 <updateScreen>:

void updateScreen(){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
//	doodle_col+=1;

//	randgen10();

	for(int col=18; col >=0; col--){
 80020be:	2312      	movs	r3, #18
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e107      	b.n	80022d4 <updateScreen+0x21c>
						  for(int row=0; row<4; row++){
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	e0fd      	b.n	80022c6 <updateScreen+0x20e>
//							  if(row==doodle_row && doodle_col==col){
//								  doodle_col+=1;
//							  							  setCursor(col+1, row);
//							  									  write(1);}

							if(strcmp(main_field[row][col],"H")==0){
 80020ca:	49ad      	ldr	r1, [pc, #692]	; (8002380 <updateScreen+0x2c8>)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020de:	49a9      	ldr	r1, [pc, #676]	; (8002384 <updateScreen+0x2cc>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f875 	bl	80001d0 <strcmp>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <updateScreen+0x66>
								  setCursor(col,row);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fb38 	bl	800076c <setCursor>
								          print(" ");
 80020fc:	48a2      	ldr	r0, [pc, #648]	; (8002388 <updateScreen+0x2d0>)
 80020fe:	f7fe fb7d 	bl	80007fc <print>
								  setCursor(col+1, row);
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3301      	adds	r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fb2b 	bl	800076c <setCursor>
										  write(5);
 8002116:	2005      	movs	r0, #5
 8002118:	f7fe fbd2 	bl	80008c0 <write>
 800211c:	e0d0      	b.n	80022c0 <updateScreen+0x208>

							  }else if(strcmp(main_field[row][col],"M")==0){
 800211e:	4998      	ldr	r1, [pc, #608]	; (8002380 <updateScreen+0x2c8>)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002132:	4996      	ldr	r1, [pc, #600]	; (800238c <updateScreen+0x2d4>)
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f84b 	bl	80001d0 <strcmp>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d118      	bne.n	8002172 <updateScreen+0xba>
								  setCursor(col,row);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fb0e 	bl	800076c <setCursor>
								  	  	  print(" ");
 8002150:	488d      	ldr	r0, [pc, #564]	; (8002388 <updateScreen+0x2d0>)
 8002152:	f7fe fb53 	bl	80007fc <print>
								  setCursor(col+1, row);
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fb01 	bl	800076c <setCursor>
										  write(4);
 800216a:	2004      	movs	r0, #4
 800216c:	f7fe fba8 	bl	80008c0 <write>
 8002170:	e0a6      	b.n	80022c0 <updateScreen+0x208>
							  }
							  else if(strcmp(main_field[row][col],"S")==0){
 8002172:	4983      	ldr	r1, [pc, #524]	; (8002380 <updateScreen+0x2c8>)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002186:	4982      	ldr	r1, [pc, #520]	; (8002390 <updateScreen+0x2d8>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f821 	bl	80001d0 <strcmp>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d118      	bne.n	80021c6 <updateScreen+0x10e>
								  setCursor(col,row);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fae4 	bl	800076c <setCursor>
								  	          print(" ");
 80021a4:	4878      	ldr	r0, [pc, #480]	; (8002388 <updateScreen+0x2d0>)
 80021a6:	f7fe fb29 	bl	80007fc <print>
								  setCursor(col+1, row);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fad7 	bl	800076c <setCursor>
							  					  write(2);
 80021be:	2002      	movs	r0, #2
 80021c0:	f7fe fb7e 	bl	80008c0 <write>
 80021c4:	e07c      	b.n	80022c0 <updateScreen+0x208>
							  		  }
							  else if(strcmp(main_field[row][col],"B")==0){
 80021c6:	496e      	ldr	r1, [pc, #440]	; (8002380 <updateScreen+0x2c8>)
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021da:	496e      	ldr	r1, [pc, #440]	; (8002394 <updateScreen+0x2dc>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fd fff7 	bl	80001d0 <strcmp>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d118      	bne.n	800221a <updateScreen+0x162>
								  setCursor(col,row);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe faba 	bl	800076c <setCursor>
								  			   print(" ");
 80021f8:	4863      	ldr	r0, [pc, #396]	; (8002388 <updateScreen+0x2d0>)
 80021fa:	f7fe faff 	bl	80007fc <print>
							  			  setCursor(col+1, row);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe faad 	bl	800076c <setCursor>
							  					  write(3);
 8002212:	2003      	movs	r0, #3
 8002214:	f7fe fb54 	bl	80008c0 <write>
 8002218:	e052      	b.n	80022c0 <updateScreen+0x208>
							  		  }
							  else if(strcmp(main_field[row][col],"F")==0){
 800221a:	4959      	ldr	r1, [pc, #356]	; (8002380 <updateScreen+0x2c8>)
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800222e:	495a      	ldr	r1, [pc, #360]	; (8002398 <updateScreen+0x2e0>)
 8002230:	4618      	mov	r0, r3
 8002232:	f7fd ffcd 	bl	80001d0 <strcmp>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d118      	bne.n	800226e <updateScreen+0x1b6>
								       setCursor(col,row);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fa90 	bl	800076c <setCursor>
								  			   print(" ");
 800224c:	484e      	ldr	r0, [pc, #312]	; (8002388 <updateScreen+0x2d0>)
 800224e:	f7fe fad5 	bl	80007fc <print>
							  			  setCursor(col+1, row);
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fa83 	bl	800076c <setCursor>
							  					  write(6);
 8002266:	2006      	movs	r0, #6
 8002268:	f7fe fb2a 	bl	80008c0 <write>
 800226c:	e028      	b.n	80022c0 <updateScreen+0x208>
							  		  }
							  else if(strcmp(main_field[row][col],"N")==0){
 800226e:	4944      	ldr	r1, [pc, #272]	; (8002380 <updateScreen+0x2c8>)
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002282:	4946      	ldr	r1, [pc, #280]	; (800239c <updateScreen+0x2e4>)
 8002284:	4618      	mov	r0, r3
 8002286:	f7fd ffa3 	bl	80001d0 <strcmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d117      	bne.n	80022c0 <updateScreen+0x208>
								  	  	  setCursor(col,row);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fa66 	bl	800076c <setCursor>
								  		print(" ");
 80022a0:	4839      	ldr	r0, [pc, #228]	; (8002388 <updateScreen+0x2d0>)
 80022a2:	f7fe faab 	bl	80007fc <print>
										  setCursor(col+1, row);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fa59 	bl	800076c <setCursor>
												  print(" ");
 80022ba:	4833      	ldr	r0, [pc, #204]	; (8002388 <updateScreen+0x2d0>)
 80022bc:	f7fe fa9e 	bl	80007fc <print>
						  for(int row=0; row<4; row++){
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	3301      	adds	r3, #1
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	f77f aefe 	ble.w	80020ca <updateScreen+0x12>
	for(int col=18; col >=0; col--){
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f6bf aef4 	bge.w	80020c4 <updateScreen+0xc>
									  }

						  }
					  }
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80022dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e0:	482f      	ldr	r0, [pc, #188]	; (80023a0 <updateScreen+0x2e8>)
 80022e2:	f001 fe0d 	bl	8003f00 <HAL_GPIO_TogglePin>


	rancol0();
 80022e6:	f7ff fc5d 	bl	8001ba4 <rancol0>
	for(int col=19; col >0; col--){
 80022ea:	2313      	movs	r3, #19
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e020      	b.n	8002332 <updateScreen+0x27a>
							  for(int row=0; row<4; row++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e017      	b.n	8002326 <updateScreen+0x26e>
								  field[row][col] = main_field[row][col-1];
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	1e59      	subs	r1, r3, #1
 80022fa:	4821      	ldr	r0, [pc, #132]	; (8002380 <updateScreen+0x2c8>)
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800230c:	4825      	ldr	r0, [pc, #148]	; (80023a4 <updateScreen+0x2ec>)
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4413      	add	r3, r2
 800231c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
							  for(int row=0; row<4; row++){
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3301      	adds	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b03      	cmp	r3, #3
 800232a:	dde4      	ble.n	80022f6 <updateScreen+0x23e>
	for(int col=19; col >0; col--){
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3b01      	subs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	dcdb      	bgt.n	80022f0 <updateScreen+0x238>
							  }
							  }
	for(int col=0; col <20; col++){
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e016      	b.n	800236c <updateScreen+0x2b4>
							  for(int row=0; row<4; row++){
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	e00d      	b.n	8002360 <updateScreen+0x2a8>
								  main_field[row][col]="N";
 8002344:	490e      	ldr	r1, [pc, #56]	; (8002380 <updateScreen+0x2c8>)
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <updateScreen+0x2e4>)
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							  for(int row=0; row<4; row++){
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3301      	adds	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b03      	cmp	r3, #3
 8002364:	ddee      	ble.n	8002344 <updateScreen+0x28c>
	for(int col=0; col <20; col++){
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b13      	cmp	r3, #19
 8002370:	dde5      	ble.n	800233e <updateScreen+0x286>
							  }
							  }

	for(int col=19; col >=0; col--){
 8002372:	2313      	movs	r3, #19
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	e034      	b.n	80023e2 <updateScreen+0x32a>
								  for(int row=0; row<4; row++){
 8002378:	2300      	movs	r3, #0
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	e02b      	b.n	80023d6 <updateScreen+0x31e>
 800237e:	bf00      	nop
 8002380:	2000003c 	.word	0x2000003c
 8002384:	0800975c 	.word	0x0800975c
 8002388:	08009768 	.word	0x08009768
 800238c:	08009758 	.word	0x08009758
 8002390:	08009750 	.word	0x08009750
 8002394:	08009754 	.word	0x08009754
 8002398:	08009760 	.word	0x08009760
 800239c:	0800974c 	.word	0x0800974c
 80023a0:	48001000 	.word	0x48001000
 80023a4:	20000234 	.word	0x20000234
									  main_field[row][col] = field[row][col] ;
 80023a8:	4912      	ldr	r1, [pc, #72]	; (80023f4 <updateScreen+0x33c>)
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80023bc:	480e      	ldr	r0, [pc, #56]	; (80023f8 <updateScreen+0x340>)
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
								  for(int row=0; row<4; row++){
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	dde5      	ble.n	80023a8 <updateScreen+0x2f0>
	for(int col=19; col >=0; col--){
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	dac7      	bge.n	8002378 <updateScreen+0x2c0>
//							  for(int row=0; row<4; row++){
//								  field[row][col+1]= main_field[row][col];
//							  }
//
//							  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000234 	.word	0x20000234
 80023f8:	2000003c 	.word	0x2000003c

080023fc <lose>:

void lose(){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	; 0x50
 8002400:	af00      	add	r7, sp, #0
	clear();
 8002402:	f7fe f9a9 	bl	8000758 <clear>

//	score=+temp;

	int strScore[20];

	setCursor(0,3);
 8002406:	2103      	movs	r1, #3
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe f9af 	bl	800076c <setCursor>
	sprintf(strScore,"%d",score);
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <lose+0xac>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	463b      	mov	r3, r7
 8002414:	4925      	ldr	r1, [pc, #148]	; (80024ac <lose+0xb0>)
 8002416:	4618      	mov	r0, r3
 8002418:	f005 ff9e 	bl	8008358 <siprintf>
	print(strScore);
 800241c:	463b      	mov	r3, r7
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f9ec 	bl	80007fc <print>

	setCursor(8,3);
 8002424:	2103      	movs	r1, #3
 8002426:	2008      	movs	r0, #8
 8002428:	f7fe f9a0 	bl	800076c <setCursor>
	print(player);
 800242c:	4820      	ldr	r0, [pc, #128]	; (80024b0 <lose+0xb4>)
 800242e:	f7fe f9e5 	bl	80007fc <print>

	sprintf(strScore,"\t%d\t",score);
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <lose+0xac>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	463b      	mov	r3, r7
 8002438:	491e      	ldr	r1, [pc, #120]	; (80024b4 <lose+0xb8>)
 800243a:	4618      	mov	r0, r3
 800243c:	f005 ff8c 	bl	8008358 <siprintf>
	strcat(player,strScore);
 8002440:	463b      	mov	r3, r7
 8002442:	4619      	mov	r1, r3
 8002444:	481a      	ldr	r0, [pc, #104]	; (80024b0 <lose+0xb4>)
 8002446:	f005 ffa7 	bl	8008398 <strcat>
	HAL_UART_Transmit(&huart2, &player, sizeof(unsigned char)*60,1000);
 800244a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244e:	223c      	movs	r2, #60	; 0x3c
 8002450:	4917      	ldr	r1, [pc, #92]	; (80024b0 <lose+0xb4>)
 8002452:	4819      	ldr	r0, [pc, #100]	; (80024b8 <lose+0xbc>)
 8002454:	f005 f9ce 	bl	80077f4 <HAL_UART_Transmit>
//	player[20]="doodler";

			started=0;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <lose+0xc0>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
			lost=1;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <lose+0xc4>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
			setCursor(2, 1);
 8002464:	2101      	movs	r1, #1
 8002466:	2002      	movs	r0, #2
 8002468:	f7fe f980 	bl	800076c <setCursor>
			print("You Lose!");
 800246c:	4815      	ldr	r0, [pc, #84]	; (80024c4 <lose+0xc8>)
 800246e:	f7fe f9c5 	bl	80007fc <print>
			temp=0;
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <lose+0xcc>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
			score = 0;
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <lose+0xac>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
			side[0]="U";
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <lose+0xd0>)
 8002480:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <lose+0xd4>)
 8002482:	601a      	str	r2, [r3, #0]
			  PWM_Start();
 8002484:	f7fe fb7c 	bl	8000b80 <PWM_Start>
			  PWM_Change_Tone(800, 1000);
 8002488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800248c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002490:	f7fe fb96 	bl	8000bc0 <PWM_Change_Tone>
			  HAL_Delay(1000);
 8002494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002498:	f001 fa52 	bl	8003940 <HAL_Delay>
			  PWM_Stop();
 800249c:	f7fe fb80 	bl	8000ba0 <PWM_Stop>

}
 80024a0:	bf00      	nop
 80024a2:	3750      	adds	r7, #80	; 0x50
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000394 	.word	0x20000394
 80024ac:	0800976c 	.word	0x0800976c
 80024b0:	2000018c 	.word	0x2000018c
 80024b4:	08009770 	.word	0x08009770
 80024b8:	200005d4 	.word	0x200005d4
 80024bc:	20000380 	.word	0x20000380
 80024c0:	20000384 	.word	0x20000384
 80024c4:	08009778 	.word	0x08009778
 80024c8:	2000037c 	.word	0x2000037c
 80024cc:	200001a0 	.word	0x200001a0
 80024d0:	08009748 	.word	0x08009748

080024d4 <check>:

void check(){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	if(strcmp(field[doodle_row][doodle_col],"H")==0){
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <check+0xf8>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <check+0xfc>)
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	483c      	ldr	r0, [pc, #240]	; (80025d4 <check+0x100>)
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80024f0:	4939      	ldr	r1, [pc, #228]	; (80025d8 <check+0x104>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd fe6c 	bl	80001d0 <strcmp>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <check+0x30>
	lose();
 80024fe:	f7ff ff7d 	bl	80023fc <lose>
	}
//	else if(strcmp(field[doodle_row][doodle_col],"B")==0){
//
//		broken_stair=1;
//	}
}
 8002502:	e060      	b.n	80025c6 <check+0xf2>
	}else if(strcmp(field[doodle_row][doodle_col],"M")==0){
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <check+0xf8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <check+0xfc>)
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	4831      	ldr	r0, [pc, #196]	; (80025d4 <check+0x100>)
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800251c:	492f      	ldr	r1, [pc, #188]	; (80025dc <check+0x108>)
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd fe56 	bl	80001d0 <strcmp>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d117      	bne.n	800255a <check+0x86>
		started=0;
 800252a:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <check+0x10c>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
		lost=1;
 8002530:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <check+0x110>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
		monster_lost=1;
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <check+0x114>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]
		  PWM_Start();
 800253c:	f7fe fb20 	bl	8000b80 <PWM_Start>
					  PWM_Change_Tone(800, 1000);
 8002540:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002544:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002548:	f7fe fb3a 	bl	8000bc0 <PWM_Change_Tone>
					  HAL_Delay(1000);
 800254c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002550:	f001 f9f6 	bl	8003940 <HAL_Delay>
					  PWM_Stop();
 8002554:	f7fe fb24 	bl	8000ba0 <PWM_Stop>
}
 8002558:	e035      	b.n	80025c6 <check+0xf2>
	}else if(strcmp(field[doodle_row][doodle_col],"F")==0){
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <check+0xf8>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <check+0xfc>)
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	481c      	ldr	r0, [pc, #112]	; (80025d4 <check+0x100>)
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002572:	491e      	ldr	r1, [pc, #120]	; (80025ec <check+0x118>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd fe2b 	bl	80001d0 <strcmp>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d122      	bne.n	80025c6 <check+0xf2>
		setCursor(doodle_col, doodle_row);
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <check+0xfc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <check+0xf8>)
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe f8ec 	bl	800076c <setCursor>
		write(6);
 8002594:	2006      	movs	r0, #6
 8002596:	f7fe f993 	bl	80008c0 <write>
		setCursor(doodle_col-1, doodle_row);
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <check+0xfc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <check+0xf8>)
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe f8dd 	bl	800076c <setCursor>
		write(1);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe f984 	bl	80008c0 <write>
		side[0]="U";
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <check+0x11c>)
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <check+0x120>)
 80025bc:	601a      	str	r2, [r3, #0]
		temp=-12;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <check+0x124>)
 80025c0:	f06f 020b 	mvn.w	r2, #11
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000188 	.word	0x20000188
 80025d0:	20000184 	.word	0x20000184
 80025d4:	20000234 	.word	0x20000234
 80025d8:	0800975c 	.word	0x0800975c
 80025dc:	08009758 	.word	0x08009758
 80025e0:	20000380 	.word	0x20000380
 80025e4:	20000384 	.word	0x20000384
 80025e8:	20000388 	.word	0x20000388
 80025ec:	08009760 	.word	0x08009760
 80025f0:	200001a0 	.word	0x200001a0
 80025f4:	08009748 	.word	0x08009748
 80025f8:	2000037c 	.word	0x2000037c

080025fc <movescreen>:

void movescreen(){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
				updateScreen();
 8002600:	f7ff fd5a 	bl	80020b8 <updateScreen>
				setCursor(10, doodle_row);
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <movescreen+0x58>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	200a      	movs	r0, #10
 800260e:	f7fe f8ad 	bl	800076c <setCursor>
				write(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f7fe f954 	bl	80008c0 <write>
				check();
 8002618:	f7ff ff5c 	bl	80024d4 <check>
//				move = 7 - temp;
				move++;
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <movescreen+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <movescreen+0x5c>)
 8002624:	6013      	str	r3, [r2, #0]
				score++;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <movescreen+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	4a0b      	ldr	r2, [pc, #44]	; (800265c <movescreen+0x60>)
 800262e:	6013      	str	r3, [r2, #0]
				if((move+temp)>=7){
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <movescreen+0x5c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <movescreen+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4413      	add	r3, r2
 800263a:	2b06      	cmp	r3, #6
 800263c:	dd07      	ble.n	800264e <movescreen+0x52>
					side[0]="D";
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <movescreen+0x68>)
 8002640:	4a09      	ldr	r2, [pc, #36]	; (8002668 <movescreen+0x6c>)
 8002642:	601a      	str	r2, [r3, #0]
					move=0;
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <movescreen+0x5c>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
					jump();
 800264a:	f000 f80f 	bl	800266c <jump>
				}

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000188 	.word	0x20000188
 8002658:	20000390 	.word	0x20000390
 800265c:	20000394 	.word	0x20000394
 8002660:	2000037c 	.word	0x2000037c
 8002664:	200001a0 	.word	0x200001a0
 8002668:	08009764 	.word	0x08009764

0800266c <jump>:

void jump(){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

if(started==1){
 8002670:	4b6e      	ldr	r3, [pc, #440]	; (800282c <jump+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	f040 80d7 	bne.w	8002828 <jump+0x1bc>

	if(side[0]=="U"){
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <jump+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6d      	ldr	r2, [pc, #436]	; (8002834 <jump+0x1c8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d17a      	bne.n	800277a <jump+0x10e>

		if(temp==0 || temp==-12){
 8002684:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <jump+0x1cc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <jump+0x2a>
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <jump+0x1cc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f113 0f0c 	cmn.w	r3, #12
 8002694:	d10c      	bne.n	80026b0 <jump+0x44>

			  PWM_Start();
 8002696:	f7fe fa73 	bl	8000b80 <PWM_Start>
					  PWM_Change_Tone(500, 1000);
 800269a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800269e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a2:	f7fe fa8d 	bl	8000bc0 <PWM_Change_Tone>
					  HAL_Delay(100);
 80026a6:	2064      	movs	r0, #100	; 0x64
 80026a8:	f001 f94a 	bl	8003940 <HAL_Delay>
					  PWM_Stop();
 80026ac:	f7fe fa78 	bl	8000ba0 <PWM_Stop>
		}
		score++;
 80026b0:	4b62      	ldr	r3, [pc, #392]	; (800283c <jump+0x1d0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a61      	ldr	r2, [pc, #388]	; (800283c <jump+0x1d0>)
 80026b8:	6013      	str	r3, [r2, #0]
		temp++;
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <jump+0x1cc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <jump+0x1cc>)
 80026c2:	6013      	str	r3, [r2, #0]

		setCursor(doodle_col, doodle_row);
 80026c4:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <jump+0x1d4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4a5e      	ldr	r2, [pc, #376]	; (8002844 <jump+0x1d8>)
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe f84a 	bl	800076c <setCursor>
		print(" ");
 80026d8:	485b      	ldr	r0, [pc, #364]	; (8002848 <jump+0x1dc>)
 80026da:	f7fe f88f 	bl	80007fc <print>
		if(strcmp(field[doodle_row][doodle_col-1],"S")==0){
 80026de:	4b59      	ldr	r3, [pc, #356]	; (8002844 <jump+0x1d8>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b57      	ldr	r3, [pc, #348]	; (8002840 <jump+0x1d4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1e59      	subs	r1, r3, #1
 80026e8:	4858      	ldr	r0, [pc, #352]	; (800284c <jump+0x1e0>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80026f8:	4955      	ldr	r1, [pc, #340]	; (8002850 <jump+0x1e4>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fd68 	bl	80001d0 <strcmp>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11b      	bne.n	800273e <jump+0xd2>
			setCursor(doodle_col-2, doodle_row);
 8002706:	4b4e      	ldr	r3, [pc, #312]	; (8002840 <jump+0x1d4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3b02      	subs	r3, #2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4a4c      	ldr	r2, [pc, #304]	; (8002844 <jump+0x1d8>)
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe f827 	bl	800076c <setCursor>
					doodle_col-=2;
 800271e:	4b48      	ldr	r3, [pc, #288]	; (8002840 <jump+0x1d4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3b02      	subs	r3, #2
 8002724:	4a46      	ldr	r2, [pc, #280]	; (8002840 <jump+0x1d4>)
 8002726:	6013      	str	r3, [r2, #0]
					temp++;
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <jump+0x1cc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	4a42      	ldr	r2, [pc, #264]	; (8002838 <jump+0x1cc>)
 8002730:	6013      	str	r3, [r2, #0]
					score++;
 8002732:	4b42      	ldr	r3, [pc, #264]	; (800283c <jump+0x1d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	4a40      	ldr	r2, [pc, #256]	; (800283c <jump+0x1d0>)
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e010      	b.n	8002760 <jump+0xf4>

		}else{
			setCursor(doodle_col-1, doodle_row);
 800273e:	4b40      	ldr	r3, [pc, #256]	; (8002840 <jump+0x1d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <jump+0x1d8>)
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe f80b 	bl	800076c <setCursor>
					doodle_col--;
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <jump+0x1d4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <jump+0x1d4>)
 800275e:	6013      	str	r3, [r2, #0]
		}

		check();
 8002760:	f7ff feb8 	bl	80024d4 <check>
		write(1);
 8002764:	2001      	movs	r0, #1
 8002766:	f7fe f8ab 	bl	80008c0 <write>
		if(temp == 7){
 800276a:	4b33      	ldr	r3, [pc, #204]	; (8002838 <jump+0x1cc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b07      	cmp	r3, #7
 8002770:	d15a      	bne.n	8002828 <jump+0x1bc>
			side[0]="D";
 8002772:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <jump+0x1c4>)
 8002774:	4a37      	ldr	r2, [pc, #220]	; (8002854 <jump+0x1e8>)
 8002776:	601a      	str	r2, [r3, #0]
		}
	}
}


}
 8002778:	e056      	b.n	8002828 <jump+0x1bc>
	}else if (strcmp(side[0],"D")==0){
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <jump+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4935      	ldr	r1, [pc, #212]	; (8002854 <jump+0x1e8>)
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fd25 	bl	80001d0 <strcmp>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d14d      	bne.n	8002828 <jump+0x1bc>
		temp--;
 800278c:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <jump+0x1cc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	4a29      	ldr	r2, [pc, #164]	; (8002838 <jump+0x1cc>)
 8002794:	6013      	str	r3, [r2, #0]
		score--;
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <jump+0x1d0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <jump+0x1d0>)
 800279e:	6013      	str	r3, [r2, #0]
		setCursor(doodle_col, doodle_row);
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <jump+0x1d4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4a27      	ldr	r2, [pc, #156]	; (8002844 <jump+0x1d8>)
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd ffdc 	bl	800076c <setCursor>
		print(" ");
 80027b4:	4824      	ldr	r0, [pc, #144]	; (8002848 <jump+0x1dc>)
 80027b6:	f7fe f821 	bl	80007fc <print>
		if(strcmp(field[doodle_row][doodle_col+1],"S")==0){
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <jump+0x1d8>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <jump+0x1d4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	4821      	ldr	r0, [pc, #132]	; (800284c <jump+0x1e0>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80027d4:	491e      	ldr	r1, [pc, #120]	; (8002850 <jump+0x1e4>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fcfa 	bl	80001d0 <strcmp>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <jump+0x184>
			side[0]="U";
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <jump+0x1c4>)
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <jump+0x1c8>)
 80027e6:	601a      	str	r2, [r3, #0]
			temp=0;
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <jump+0x1cc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e013      	b.n	8002818 <jump+0x1ac>
					setCursor(doodle_col+1, doodle_row);
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <jump+0x1d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <jump+0x1d8>)
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd ffb2 	bl	800076c <setCursor>
							doodle_col++;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <jump+0x1d4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <jump+0x1d4>)
 8002810:	6013      	str	r3, [r2, #0]
							write(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f7fe f854 	bl	80008c0 <write>
		check();
 8002818:	f7ff fe5c 	bl	80024d4 <check>
		if(doodle_col==19){
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <jump+0x1d4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b13      	cmp	r3, #19
 8002822:	d101      	bne.n	8002828 <jump+0x1bc>
			lose();
 8002824:	f7ff fdea 	bl	80023fc <lose>
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000380 	.word	0x20000380
 8002830:	200001a0 	.word	0x200001a0
 8002834:	08009748 	.word	0x08009748
 8002838:	2000037c 	.word	0x2000037c
 800283c:	20000394 	.word	0x20000394
 8002840:	20000184 	.word	0x20000184
 8002844:	20000188 	.word	0x20000188
 8002848:	08009768 	.word	0x08009768
 800284c:	20000234 	.word	0x20000234
 8002850:	08009750 	.word	0x08009750
 8002854:	08009764 	.word	0x08009764

08002858 <start>:

void start(){
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0

	started = 1;
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <start+0x78>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
	lost==0;
	monster_lost=0;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <start+0x7c>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

	doodle_col=18;
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <start+0x80>)
 800286c:	2212      	movs	r2, #18
 800286e:	601a      	str	r2, [r3, #0]
	doodle_row=2;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <start+0x84>)
 8002872:	2202      	movs	r2, #2
 8002874:	601a      	str	r2, [r3, #0]



	for(int col=19; col >0; col--){
 8002876:	2313      	movs	r3, #19
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	e01f      	b.n	80028bc <start+0x64>
						  for(int row=0; row<4; row++){
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	e016      	b.n	80028b0 <start+0x58>
							  field[row][col] = main_field[row][col];
 8002882:	4917      	ldr	r1, [pc, #92]	; (80028e0 <start+0x88>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002896:	4813      	ldr	r0, [pc, #76]	; (80028e4 <start+0x8c>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
						  for(int row=0; row<4; row++){
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	dde5      	ble.n	8002882 <start+0x2a>
	for(int col=19; col >0; col--){
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dcdc      	bgt.n	800287c <start+0x24>
						  }
						  }


}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	20000380 	.word	0x20000380
 80028d4:	20000388 	.word	0x20000388
 80028d8:	20000184 	.word	0x20000184
 80028dc:	20000188 	.word	0x20000188
 80028e0:	2000003c 	.word	0x2000003c
 80028e4:	20000234 	.word	0x20000234

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <MemManage_Handler+0x4>

080028fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x4>

08002906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f000 ffe4 	bl	8003900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b094      	sub	sp, #80	; 0x50
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
//	menu();
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002942:	2001      	movs	r0, #1
 8002944:	f001 faf6 	bl	8003f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

	unsigned char name[40]="";
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
 800294c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002950:	2224      	movs	r2, #36	; 0x24
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f005 fc89 	bl	800826c <memset>
	unsigned char username[40];
//						  strcat(data,strTime);

	setCursor(0, 3);
 800295a:	2103      	movs	r1, #3
 800295c:	2000      	movs	r0, #0
 800295e:	f7fd ff05 	bl	800076c <setCursor>
	print("Player name: Doodler");
 8002962:	4810      	ldr	r0, [pc, #64]	; (80029a4 <EXTI0_IRQHandler+0x68>)
 8002964:	f7fd ff4a 	bl	80007fc <print>
	HAL_UART_Receive(&huart2, name, sizeof(unsigned char)*1000,1000);
 8002968:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800296c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <EXTI0_IRQHandler+0x6c>)
 8002976:	f004 ffd1 	bl	800791c <HAL_UART_Receive>

			 sprintf(username,"%p",name);
 800297a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800297e:	463b      	mov	r3, r7
 8002980:	490a      	ldr	r1, [pc, #40]	; (80029ac <EXTI0_IRQHandler+0x70>)
 8002982:	4618      	mov	r0, r3
 8002984:	f005 fce8 	bl	8008358 <siprintf>
			 setCursor(12, 3);
 8002988:	2103      	movs	r1, #3
 800298a:	200c      	movs	r0, #12
 800298c:	f7fd feee 	bl	800076c <setCursor>
		     print(name);
 8002990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd ff31 	bl	80007fc <print>

  /* USER CODE END EXTI0_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	3750      	adds	r7, #80	; 0x50
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08009784 	.word	0x08009784
 80029a8:	200005d4 	.word	0x200005d4
 80029ac:	0800979c 	.word	0x0800979c

080029b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b0bb      	sub	sp, #236	; 0xec
 80029b4:	af02      	add	r7, sp, #8




  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80029b6:	2002      	movs	r0, #2
 80029b8:	f001 fabc 	bl	8003f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */


  for(int i=0; i<4; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029c2:	e218      	b.n	8002df6 <EXTI1_IRQHandler+0x446>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2120      	movs	r1, #32
 80029c8:	48be      	ldr	r0, [pc, #760]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 80029ca:	f001 fa81 	bl	8003ed0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2140      	movs	r1, #64	; 0x40
 80029d2:	48bc      	ldr	r0, [pc, #752]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 80029d4:	f001 fa7c 	bl	8003ed0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	48b9      	ldr	r0, [pc, #740]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 80029de:	f001 fa77 	bl	8003ed0 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e8:	48b6      	ldr	r0, [pc, #728]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 80029ea:	f001 fa71 	bl	8003ed0 <HAL_GPIO_WritePin>


  	if(i==2){
 80029ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d157      	bne.n	8002aa6 <EXTI1_IRQHandler+0xf6>
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2120      	movs	r1, #32
 80029fa:	48b2      	ldr	r0, [pc, #712]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 80029fc:	f001 fa68 	bl	8003ed0 <HAL_GPIO_WritePin>
  				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 8002a00:	2102      	movs	r1, #2
 8002a02:	48b0      	ldr	r0, [pc, #704]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002a04:	f001 fa4c 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 81ee 	beq.w	8002dec <EXTI1_IRQHandler+0x43c>


  				clear();
 8002a10:	f7fd fea2 	bl	8000758 <clear>
  				  				setCursor(0, 1);
 8002a14:	2101      	movs	r1, #1
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fd fea8 	bl	800076c <setCursor>
  				  				print("Mona Radad");
 8002a1c:	48aa      	ldr	r0, [pc, #680]	; (8002cc8 <EXTI1_IRQHandler+0x318>)
 8002a1e:	f7fd feed 	bl	80007fc <print>
  				  				setCursor(0, 2);
 8002a22:	2102      	movs	r1, #2
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd fea1 	bl	800076c <setCursor>
  				  				print("Zahra Tarvij");
 8002a2a:	48a8      	ldr	r0, [pc, #672]	; (8002ccc <EXTI1_IRQHandler+0x31c>)
 8002a2c:	f7fd fee6 	bl	80007fc <print>

  				  			  int strTime[20];
  				  			  int strDate[20];

  				  			  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002a30:	2200      	movs	r2, #0
 8002a32:	49a7      	ldr	r1, [pc, #668]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002a34:	48a7      	ldr	r0, [pc, #668]	; (8002cd4 <EXTI1_IRQHandler+0x324>)
 8002a36:	f003 f8d5 	bl	8005be4 <HAL_RTC_GetTime>
  				  			  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	49a6      	ldr	r1, [pc, #664]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002a3e:	48a5      	ldr	r0, [pc, #660]	; (8002cd4 <EXTI1_IRQHandler+0x324>)
 8002a40:	f003 f9d5 	bl	8005dee <HAL_RTC_GetDate>


  				  			  setCursor(0,3);
 8002a44:	2103      	movs	r1, #3
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fd fe90 	bl	800076c <setCursor>
  				  			  sprintf(strTime,"%2d:%2d:%2d",mytime.Hours,mytime.Minutes,mytime.Seconds);
 8002a4c:	4ba0      	ldr	r3, [pc, #640]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b9f      	ldr	r3, [pc, #636]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4b9d      	ldr	r3, [pc, #628]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002a5a:	789b      	ldrb	r3, [r3, #2]
 8002a5c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	460b      	mov	r3, r1
 8002a64:	499d      	ldr	r1, [pc, #628]	; (8002cdc <EXTI1_IRQHandler+0x32c>)
 8002a66:	f005 fc77 	bl	8008358 <siprintf>
  				  			  print(strTime);
 8002a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fec4 	bl	80007fc <print>

  				  			  setCursor(8,3);
 8002a74:	2103      	movs	r1, #3
 8002a76:	2008      	movs	r0, #8
 8002a78:	f7fd fe78 	bl	800076c <setCursor>
  				  			  sprintf(strDate,"  %d//%d//%d",myDate.Year,myDate.Month,myDate.Date);
 8002a7c:	4b96      	ldr	r3, [pc, #600]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002a7e:	78db      	ldrb	r3, [r3, #3]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b95      	ldr	r3, [pc, #596]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	4619      	mov	r1, r3
 8002a88:	4b93      	ldr	r3, [pc, #588]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002a8a:	789b      	ldrb	r3, [r3, #2]
 8002a8c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	460b      	mov	r3, r1
 8002a94:	4992      	ldr	r1, [pc, #584]	; (8002ce0 <EXTI1_IRQHandler+0x330>)
 8002a96:	f005 fc5f 	bl	8008358 <siprintf>
  				  			  print(strDate);
 8002a9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd feac 	bl	80007fc <print>
 8002aa4:	e1a2      	b.n	8002dec <EXTI1_IRQHandler+0x43c>


  				  }

  	  }else if(i==1){
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d113      	bne.n	8002ad6 <EXTI1_IRQHandler+0x126>
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	4884      	ldr	r0, [pc, #528]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002ab4:	f001 fa0c 	bl	8003ed0 <HAL_GPIO_WritePin>
  				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 8002ab8:	2102      	movs	r1, #2
 8002aba:	4882      	ldr	r0, [pc, #520]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002abc:	f001 f9f0 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8192 	beq.w	8002dec <EXTI1_IRQHandler+0x43c>
clear();
 8002ac8:	f7fd fe46 	bl	8000758 <clear>
//  float fy = ((float)y*100/4095);
//  volume = (fy/10);
//  volume *= 10;
//	randlevels(volume/10-1);

		randgen();
 8002acc:	f7ff f92e 	bl	8001d2c <randgen>
	//randlevels(9);
		start();
 8002ad0:	f7ff fec2 	bl	8002858 <start>
 8002ad4:	e18a      	b.n	8002dec <EXTI1_IRQHandler+0x43c>

  				  }

  	  }else if(i==0){
 8002ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 80a8 	bne.w	8002c30 <EXTI1_IRQHandler+0x280>
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	4877      	ldr	r0, [pc, #476]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002ae6:	f001 f9f3 	bl	8003ed0 <HAL_GPIO_WritePin>
  				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 8002aea:	2102      	movs	r1, #2
 8002aec:	4875      	ldr	r0, [pc, #468]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002aee:	f001 f9d7 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8179 	beq.w	8002dec <EXTI1_IRQHandler+0x43c>
// left side
  					  if(!(strcmp(main_field[(doodle_row+1)%4][doodle_col],"S")==0)){
 8002afa:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4259      	negs	r1, r3
 8002b02:	f003 0203 	and.w	r2, r3, #3
 8002b06:	f001 0303 	and.w	r3, r1, #3
 8002b0a:	bf58      	it	pl
 8002b0c:	425a      	negpl	r2, r3
 8002b0e:	4b76      	ldr	r3, [pc, #472]	; (8002ce8 <EXTI1_IRQHandler+0x338>)
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	4876      	ldr	r0, [pc, #472]	; (8002cec <EXTI1_IRQHandler+0x33c>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b22:	4973      	ldr	r1, [pc, #460]	; (8002cf0 <EXTI1_IRQHandler+0x340>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fb53 	bl	80001d0 <strcmp>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 815d 	beq.w	8002dec <EXTI1_IRQHandler+0x43c>
  						 setCursor(doodle_col, doodle_row);
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <EXTI1_IRQHandler+0x338>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4a6a      	ldr	r2, [pc, #424]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fe13 	bl	800076c <setCursor>
  						  					  print(" ");
 8002b46:	486b      	ldr	r0, [pc, #428]	; (8002cf4 <EXTI1_IRQHandler+0x344>)
 8002b48:	f7fd fe58 	bl	80007fc <print>
  						  					doodle_row++;
 8002b4c:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a64      	ldr	r2, [pc, #400]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002b54:	6013      	str	r3, [r2, #0]
  						  					  doodle_row = (doodle_row)%4;
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	425a      	negs	r2, r3
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	f002 0203 	and.w	r2, r2, #3
 8002b64:	bf58      	it	pl
 8002b66:	4253      	negpl	r3, r2
 8002b68:	4a5e      	ldr	r2, [pc, #376]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002b6a:	6013      	str	r3, [r2, #0]
  						  					  check();
 8002b6c:	f7ff fcb2 	bl	80024d4 <check>
  						  					 setCursor(doodle_col, doodle_row);
 8002b70:	4b5d      	ldr	r3, [pc, #372]	; (8002ce8 <EXTI1_IRQHandler+0x338>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4a5b      	ldr	r2, [pc, #364]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fdf4 	bl	800076c <setCursor>
  						  					 write(1);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7fd fe9b 	bl	80008c0 <write>



  							  			time_t t;
  				  						  time(&t);
 8002b8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f005 fc12 	bl	80083b8 <time>
  						  			     int strTime[20];
										  int strDate[20];

										  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002b94:	2200      	movs	r2, #0
 8002b96:	494e      	ldr	r1, [pc, #312]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002b98:	484e      	ldr	r0, [pc, #312]	; (8002cd4 <EXTI1_IRQHandler+0x324>)
 8002b9a:	f003 f823 	bl	8005be4 <HAL_RTC_GetTime>
										  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002ba2:	484c      	ldr	r0, [pc, #304]	; (8002cd4 <EXTI1_IRQHandler+0x324>)
 8002ba4:	f003 f923 	bl	8005dee <HAL_RTC_GetDate>


										  sprintf(strTime,"%2d:%2d:%2d\t",mytime.Hours,mytime.Minutes,mytime.Seconds);
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b48      	ldr	r3, [pc, #288]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <EXTI1_IRQHandler+0x320>)
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	494d      	ldr	r1, [pc, #308]	; (8002cf8 <EXTI1_IRQHandler+0x348>)
 8002bc2:	f005 fbc9 	bl	8008358 <siprintf>
										  sprintf(strDate,"  %d//%d//%d\n",myDate.Year,myDate.Month,myDate.Date);
 8002bc6:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002bc8:	78db      	ldrb	r3, [r3, #3]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <EXTI1_IRQHandler+0x328>)
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4947      	ldr	r1, [pc, #284]	; (8002cfc <EXTI1_IRQHandler+0x34c>)
 8002be0:	f005 fbba 	bl	8008358 <siprintf>
										  strcat(strTime,strDate);
 8002be4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f005 fbd2 	bl	8008398 <strcat>


										  unsigned char data[40]="Doodler\tLeft\n";
 8002bf4:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <EXTI1_IRQHandler+0x350>)
 8002bf6:	463c      	mov	r4, r7
 8002bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfa:	c407      	stmia	r4!, {r0, r1, r2}
 8002bfc:	8023      	strh	r3, [r4, #0]
 8002bfe:	f107 030e 	add.w	r3, r7, #14
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	831a      	strh	r2, [r3, #24]
										  strcat(data,strTime);
 8002c12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c16:	463b      	mov	r3, r7
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 fbbc 	bl	8008398 <strcat>
										  HAL_UART_Transmit(&huart2, &data, sizeof(unsigned char)*60,1000);
 8002c20:	4639      	mov	r1, r7
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	223c      	movs	r2, #60	; 0x3c
 8002c28:	4836      	ldr	r0, [pc, #216]	; (8002d04 <EXTI1_IRQHandler+0x354>)
 8002c2a:	f004 fde3 	bl	80077f4 <HAL_UART_Transmit>
 8002c2e:	e0dd      	b.n	8002dec <EXTI1_IRQHandler+0x43c>


  					  }
  				  }
 // right side
  	  }else if(i==3){
 8002c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	f040 80d9 	bne.w	8002dec <EXTI1_IRQHandler+0x43c>
  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c40:	4820      	ldr	r0, [pc, #128]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002c42:	f001 f945 	bl	8003ed0 <HAL_GPIO_WritePin>
  				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 8002c46:	2102      	movs	r1, #2
 8002c48:	481e      	ldr	r0, [pc, #120]	; (8002cc4 <EXTI1_IRQHandler+0x314>)
 8002c4a:	f001 f929 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80cb 	beq.w	8002dec <EXTI1_IRQHandler+0x43c>

  					if(!(strcmp(main_field[(doodle_row-1+4)%4][doodle_col],"S")==0)){
 8002c56:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3303      	adds	r3, #3
 8002c5c:	4259      	negs	r1, r3
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	f001 0303 	and.w	r3, r1, #3
 8002c66:	bf58      	it	pl
 8002c68:	425a      	negpl	r2, r3
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <EXTI1_IRQHandler+0x338>)
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	481f      	ldr	r0, [pc, #124]	; (8002cec <EXTI1_IRQHandler+0x33c>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002c7e:	491c      	ldr	r1, [pc, #112]	; (8002cf0 <EXTI1_IRQHandler+0x340>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd faa5 	bl	80001d0 <strcmp>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80af 	beq.w	8002dec <EXTI1_IRQHandler+0x43c>
  						setCursor(doodle_col, doodle_row);
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <EXTI1_IRQHandler+0x338>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fd65 	bl	800076c <setCursor>
  						  					print(" ");
 8002ca2:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <EXTI1_IRQHandler+0x344>)
 8002ca4:	f7fd fdaa 	bl	80007fc <print>
  						  					doodle_row--;
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002cb0:	6013      	str	r3, [r2, #0]
  						  					if(doodle_row==-1){
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d125      	bne.n	8002d08 <EXTI1_IRQHandler+0x358>
  						  						doodle_row=3;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <EXTI1_IRQHandler+0x334>)
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e02f      	b.n	8002d24 <EXTI1_IRQHandler+0x374>
 8002cc4:	48000c00 	.word	0x48000c00
 8002cc8:	080097a0 	.word	0x080097a0
 8002ccc:	080097ac 	.word	0x080097ac
 8002cd0:	20000984 	.word	0x20000984
 8002cd4:	200004b4 	.word	0x200004b4
 8002cd8:	20000964 	.word	0x20000964
 8002cdc:	080097bc 	.word	0x080097bc
 8002ce0:	080097c8 	.word	0x080097c8
 8002ce4:	20000188 	.word	0x20000188
 8002ce8:	20000184 	.word	0x20000184
 8002cec:	2000003c 	.word	0x2000003c
 8002cf0:	08009750 	.word	0x08009750
 8002cf4:	08009768 	.word	0x08009768
 8002cf8:	080097d8 	.word	0x080097d8
 8002cfc:	080097e8 	.word	0x080097e8
 8002d00:	080097f8 	.word	0x080097f8
 8002d04:	200005d4 	.word	0x200005d4
  						  					}else{
  						  						 doodle_row = abs((doodle_row)%4);
 8002d08:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <EXTI1_IRQHandler+0x494>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	425a      	negs	r2, r3
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	bf58      	it	pl
 8002d18:	4253      	negpl	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bfb8      	it	lt
 8002d1e:	425b      	neglt	r3, r3
 8002d20:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <EXTI1_IRQHandler+0x494>)
 8002d22:	6013      	str	r3, [r2, #0]
  						  					}
  						  				  check();
 8002d24:	f7ff fbd6 	bl	80024d4 <check>
  						  					 setCursor(doodle_col, doodle_row);
 8002d28:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <EXTI1_IRQHandler+0x498>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4a45      	ldr	r2, [pc, #276]	; (8002e44 <EXTI1_IRQHandler+0x494>)
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fd18 	bl	800076c <setCursor>
  						  					 write(1);
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7fd fdbf 	bl	80008c0 <write>



  	  							  			time_t t;
  	  				  						  time(&t);
 8002d42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 fb36 	bl	80083b8 <time>
  	  						  			     int strTime[20];
  											  int strDate[20];

  											  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	493f      	ldr	r1, [pc, #252]	; (8002e4c <EXTI1_IRQHandler+0x49c>)
 8002d50:	483f      	ldr	r0, [pc, #252]	; (8002e50 <EXTI1_IRQHandler+0x4a0>)
 8002d52:	f002 ff47 	bl	8005be4 <HAL_RTC_GetTime>
  											  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8002d56:	2200      	movs	r2, #0
 8002d58:	493e      	ldr	r1, [pc, #248]	; (8002e54 <EXTI1_IRQHandler+0x4a4>)
 8002d5a:	483d      	ldr	r0, [pc, #244]	; (8002e50 <EXTI1_IRQHandler+0x4a0>)
 8002d5c:	f003 f847 	bl	8005dee <HAL_RTC_GetDate>


  											  sprintf(strTime,"%2d:%2d:%2d\t",mytime.Hours,mytime.Minutes,mytime.Seconds);
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <EXTI1_IRQHandler+0x49c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <EXTI1_IRQHandler+0x49c>)
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <EXTI1_IRQHandler+0x49c>)
 8002d6e:	789b      	ldrb	r3, [r3, #2]
 8002d70:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	460b      	mov	r3, r1
 8002d78:	4937      	ldr	r1, [pc, #220]	; (8002e58 <EXTI1_IRQHandler+0x4a8>)
 8002d7a:	f005 faed 	bl	8008358 <siprintf>
  											  sprintf(strDate,"  %d//%d//%d\n",myDate.Year,myDate.Month,myDate.Date);
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <EXTI1_IRQHandler+0x4a4>)
 8002d80:	78db      	ldrb	r3, [r3, #3]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <EXTI1_IRQHandler+0x4a4>)
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <EXTI1_IRQHandler+0x4a4>)
 8002d8c:	789b      	ldrb	r3, [r3, #2]
 8002d8e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	4931      	ldr	r1, [pc, #196]	; (8002e5c <EXTI1_IRQHandler+0x4ac>)
 8002d98:	f005 fade 	bl	8008358 <siprintf>
  											  strcat(strTime,strDate);
 8002d9c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f005 faf6 	bl	8008398 <strcat>


  											  unsigned char data[40]="Doodler\tRight\n";
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <EXTI1_IRQHandler+0x4b0>)
 8002dae:	463c      	mov	r4, r7
 8002db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002db2:	c407      	stmia	r4!, {r0, r1, r2}
 8002db4:	8023      	strh	r3, [r4, #0]
 8002db6:	3402      	adds	r4, #2
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	7023      	strb	r3, [r4, #0]
 8002dbc:	f107 030f 	add.w	r3, r7, #15
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
 8002dcc:	615a      	str	r2, [r3, #20]
 8002dce:	761a      	strb	r2, [r3, #24]
  											  strcat(data,strTime);
 8002dd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dd4:	463b      	mov	r3, r7
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 fadd 	bl	8008398 <strcat>
  											  HAL_UART_Transmit(&huart2, &data, sizeof(unsigned char)*60,1000);
 8002dde:	4639      	mov	r1, r7
 8002de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de4:	223c      	movs	r2, #60	; 0x3c
 8002de6:	481f      	ldr	r0, [pc, #124]	; (8002e64 <EXTI1_IRQHandler+0x4b4>)
 8002de8:	f004 fd04 	bl	80077f4 <HAL_UART_Transmit>
  for(int i=0; i<4; i++){
 8002dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df0:	3301      	adds	r3, #1
 8002df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	f77f ade2 	ble.w	80029c4 <EXTI1_IRQHandler+0x14>

  				  }
  	  }

    }
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8002e00:	2201      	movs	r2, #1
 8002e02:	2120      	movs	r1, #32
 8002e04:	4818      	ldr	r0, [pc, #96]	; (8002e68 <EXTI1_IRQHandler+0x4b8>)
 8002e06:	f001 f863 	bl	8003ed0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	4816      	ldr	r0, [pc, #88]	; (8002e68 <EXTI1_IRQHandler+0x4b8>)
 8002e10:	f001 f85e 	bl	8003ed0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002e14:	2201      	movs	r2, #1
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	4813      	ldr	r0, [pc, #76]	; (8002e68 <EXTI1_IRQHandler+0x4b8>)
 8002e1a:	f001 f859 	bl	8003ed0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e24:	4810      	ldr	r0, [pc, #64]	; (8002e68 <EXTI1_IRQHandler+0x4b8>)
 8002e26:	f001 f853 	bl	8003ed0 <HAL_GPIO_WritePin>
   while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1));
 8002e2a:	bf00      	nop
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <EXTI1_IRQHandler+0x4b8>)
 8002e30:	f001 f836 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f8      	bne.n	8002e2c <EXTI1_IRQHandler+0x47c>

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	37e4      	adds	r7, #228	; 0xe4
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd90      	pop	{r4, r7, pc}
 8002e44:	20000188 	.word	0x20000188
 8002e48:	20000184 	.word	0x20000184
 8002e4c:	20000984 	.word	0x20000984
 8002e50:	200004b4 	.word	0x200004b4
 8002e54:	20000964 	.word	0x20000964
 8002e58:	080097d8 	.word	0x080097d8
 8002e5c:	080097e8 	.word	0x080097e8
 8002e60:	08009820 	.word	0x08009820
 8002e64:	200005d4 	.word	0x200005d4
 8002e68:	48000c00 	.word	0x48000c00

08002e6c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b0b9      	sub	sp, #228	; 0xe4
 8002e70:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e72:	2004      	movs	r0, #4
 8002e74:	f001 f85e 	bl	8003f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  for(int i=0; i<4; i++){
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e7e:	e0d6      	b.n	800302e <EXTI2_TSC_IRQHandler+0x1c2>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2120      	movs	r1, #32
 8002e84:	487d      	ldr	r0, [pc, #500]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002e86:	f001 f823 	bl	8003ed0 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	487b      	ldr	r0, [pc, #492]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002e90:	f001 f81e 	bl	8003ed0 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	4878      	ldr	r0, [pc, #480]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002e9a:	f001 f819 	bl	8003ed0 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea4:	4875      	ldr	r0, [pc, #468]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002ea6:	f001 f813 	bl	8003ed0 <HAL_GPIO_WritePin>

// shoot
   	if(i==2){
 8002eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d16e      	bne.n	8002f90 <EXTI2_TSC_IRQHandler+0x124>
   		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	4871      	ldr	r0, [pc, #452]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002eb8:	f001 f80a 	bl	8003ed0 <HAL_GPIO_WritePin>
   				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	486f      	ldr	r0, [pc, #444]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002ec0:	f000 ffee 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80ac 	beq.w	8003024 <EXTI2_TSC_IRQHandler+0x1b8>

   					  dart_col=doodle_col-1;
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <EXTI2_TSC_IRQHandler+0x214>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	4a6c      	ldr	r2, [pc, #432]	; (8003084 <EXTI2_TSC_IRQHandler+0x218>)
 8002ed4:	6013      	str	r3, [r2, #0]
   					  dart_row=doodle_row;
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <EXTI2_TSC_IRQHandler+0x21c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6c      	ldr	r2, [pc, #432]	; (800308c <EXTI2_TSC_IRQHandler+0x220>)
 8002edc:	6013      	str	r3, [r2, #0]
   					  shoot=1;
 8002ede:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <EXTI2_TSC_IRQHandler+0x224>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]


				  			time_t t;
	  						  time(&t);
 8002ee4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 fa65 	bl	80083b8 <time>
			  			     int strTime[20];
						  int strDate[20];

						  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4968      	ldr	r1, [pc, #416]	; (8003094 <EXTI2_TSC_IRQHandler+0x228>)
 8002ef2:	4869      	ldr	r0, [pc, #420]	; (8003098 <EXTI2_TSC_IRQHandler+0x22c>)
 8002ef4:	f002 fe76 	bl	8005be4 <HAL_RTC_GetTime>
						  HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4968      	ldr	r1, [pc, #416]	; (800309c <EXTI2_TSC_IRQHandler+0x230>)
 8002efc:	4866      	ldr	r0, [pc, #408]	; (8003098 <EXTI2_TSC_IRQHandler+0x22c>)
 8002efe:	f002 ff76 	bl	8005dee <HAL_RTC_GetDate>


						  sprintf(strTime,"%2d:%2d:%2d\t",mytime.Hours,mytime.Minutes,mytime.Seconds);
 8002f02:	4b64      	ldr	r3, [pc, #400]	; (8003094 <EXTI2_TSC_IRQHandler+0x228>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <EXTI2_TSC_IRQHandler+0x228>)
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <EXTI2_TSC_IRQHandler+0x228>)
 8002f10:	789b      	ldrb	r3, [r3, #2]
 8002f12:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4961      	ldr	r1, [pc, #388]	; (80030a0 <EXTI2_TSC_IRQHandler+0x234>)
 8002f1c:	f005 fa1c 	bl	8008358 <siprintf>
						  sprintf(strDate,"  %d//%d//%d\n",myDate.Year,myDate.Month,myDate.Date);
 8002f20:	4b5e      	ldr	r3, [pc, #376]	; (800309c <EXTI2_TSC_IRQHandler+0x230>)
 8002f22:	78db      	ldrb	r3, [r3, #3]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b5d      	ldr	r3, [pc, #372]	; (800309c <EXTI2_TSC_IRQHandler+0x230>)
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4b5b      	ldr	r3, [pc, #364]	; (800309c <EXTI2_TSC_IRQHandler+0x230>)
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	460b      	mov	r3, r1
 8002f38:	495a      	ldr	r1, [pc, #360]	; (80030a4 <EXTI2_TSC_IRQHandler+0x238>)
 8002f3a:	f005 fa0d 	bl	8008358 <siprintf>
						  strcat(strTime,strDate);
 8002f3e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fa25 	bl	8008398 <strcat>


						  unsigned char data[40]="Doodler\tShoot\n";
 8002f4e:	4b56      	ldr	r3, [pc, #344]	; (80030a8 <EXTI2_TSC_IRQHandler+0x23c>)
 8002f50:	463c      	mov	r4, r7
 8002f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f54:	c407      	stmia	r4!, {r0, r1, r2}
 8002f56:	8023      	strh	r3, [r4, #0]
 8002f58:	3402      	adds	r4, #2
 8002f5a:	0c1b      	lsrs	r3, r3, #16
 8002f5c:	7023      	strb	r3, [r4, #0]
 8002f5e:	f107 030f 	add.w	r3, r7, #15
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	615a      	str	r2, [r3, #20]
 8002f70:	761a      	strb	r2, [r3, #24]
						  strcat(data,strTime);
 8002f72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f76:	463b      	mov	r3, r7
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f005 fa0c 	bl	8008398 <strcat>
						  HAL_UART_Transmit(&huart2, &data, sizeof(unsigned char)*60,1000);
 8002f80:	4639      	mov	r1, r7
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	223c      	movs	r2, #60	; 0x3c
 8002f88:	4848      	ldr	r0, [pc, #288]	; (80030ac <EXTI2_TSC_IRQHandler+0x240>)
 8002f8a:	f004 fc33 	bl	80077f4 <HAL_UART_Transmit>
 8002f8e:	e049      	b.n	8003024 <EXTI2_TSC_IRQHandler+0x1b8>

   				  }

   	  }else if(i==1){
 8002f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d145      	bne.n	8003024 <EXTI2_TSC_IRQHandler+0x1b8>
   		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2140      	movs	r1, #64	; 0x40
 8002f9c:	4837      	ldr	r0, [pc, #220]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002f9e:	f000 ff97 	bl	8003ed0 <HAL_GPIO_WritePin>
   		   				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	4835      	ldr	r0, [pc, #212]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8002fa6:	f000 ff7b 	bl	8003ea0 <HAL_GPIO_ReadPin>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d039      	beq.n	8003024 <EXTI2_TSC_IRQHandler+0x1b8>

   		   					  clear();
 8002fb0:	f7fd fbd2 	bl	8000758 <clear>
   		   					  started=0;
 8002fb4:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <EXTI2_TSC_IRQHandler+0x244>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
   		   					  lost=0;
 8002fba:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <EXTI2_TSC_IRQHandler+0x248>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

   		   				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,0);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fc6:	483c      	ldr	r0, [pc, #240]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8002fc8:	f000 ff82 	bl	8003ed0 <HAL_GPIO_WritePin>
   		   			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fd2:	4839      	ldr	r0, [pc, #228]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8002fd4:	f000 ff7c 	bl	8003ed0 <HAL_GPIO_WritePin>
   		   		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fde:	4836      	ldr	r0, [pc, #216]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8002fe0:	f000 ff76 	bl	8003ed0 <HAL_GPIO_WritePin>
   		   	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fea:	4833      	ldr	r0, [pc, #204]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8002fec:	f000 ff70 	bl	8003ed0 <HAL_GPIO_WritePin>
   		 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff6:	4830      	ldr	r0, [pc, #192]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8002ff8:	f000 ff6a 	bl	8003ed0 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,0);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003002:	482d      	ldr	r0, [pc, #180]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8003004:	f000 ff64 	bl	8003ed0 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,0);
 8003008:	2200      	movs	r2, #0
 800300a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800300e:	482a      	ldr	r0, [pc, #168]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 8003010:	f000 ff5e 	bl	8003ed0 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,0);
 8003014:	2200      	movs	r2, #0
 8003016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301a:	4827      	ldr	r0, [pc, #156]	; (80030b8 <EXTI2_TSC_IRQHandler+0x24c>)
 800301c:	f000 ff58 	bl	8003ed0 <HAL_GPIO_WritePin>
   		   					  menu();
 8003020:	f7fd fd1a 	bl	8000a58 <menu>
  for(int i=0; i<4; i++){
 8003024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003028:	3301      	adds	r3, #1
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800302e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003032:	2b03      	cmp	r3, #3
 8003034:	f77f af24 	ble.w	8002e80 <EXTI2_TSC_IRQHandler+0x14>

   	  }
  }
  }

     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8003038:	2201      	movs	r2, #1
 800303a:	2120      	movs	r1, #32
 800303c:	480f      	ldr	r0, [pc, #60]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 800303e:	f000 ff47 	bl	8003ed0 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8003042:	2201      	movs	r2, #1
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	480d      	ldr	r0, [pc, #52]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8003048:	f000 ff42 	bl	8003ed0 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800304c:	2201      	movs	r2, #1
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	480a      	ldr	r0, [pc, #40]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8003052:	f000 ff3d 	bl	8003ed0 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8003056:	2201      	movs	r2, #1
 8003058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800305c:	4807      	ldr	r0, [pc, #28]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 800305e:	f000 ff37 	bl	8003ed0 <HAL_GPIO_WritePin>
     while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2));
 8003062:	bf00      	nop
 8003064:	2104      	movs	r1, #4
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <EXTI2_TSC_IRQHandler+0x210>)
 8003068:	f000 ff1a 	bl	8003ea0 <HAL_GPIO_ReadPin>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f8      	bne.n	8003064 <EXTI2_TSC_IRQHandler+0x1f8>

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	37dc      	adds	r7, #220	; 0xdc
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	48000c00 	.word	0x48000c00
 8003080:	20000184 	.word	0x20000184
 8003084:	20000968 	.word	0x20000968
 8003088:	20000188 	.word	0x20000188
 800308c:	20000960 	.word	0x20000960
 8003090:	20000378 	.word	0x20000378
 8003094:	20000984 	.word	0x20000984
 8003098:	200004b4 	.word	0x200004b4
 800309c:	20000964 	.word	0x20000964
 80030a0:	080097d8 	.word	0x080097d8
 80030a4:	080097e8 	.word	0x080097e8
 80030a8:	08009848 	.word	0x08009848
 80030ac:	200005d4 	.word	0x200005d4
 80030b0:	20000380 	.word	0x20000380
 80030b4:	20000384 	.word	0x20000384
 80030b8:	48001000 	.word	0x48001000

080030bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80030c0:	2008      	movs	r0, #8
 80030c2:	f000 ff37 	bl	8003f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}

080030ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80030ce:	2010      	movs	r0, #16
 80030d0:	f000 ff30 	bl	8003f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */



	if(shoot==1){
 80030dc:	4b9b      	ldr	r3, [pc, #620]	; (800334c <TIM1_BRK_TIM15_IRQHandler+0x274>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 80fe 	bne.w	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>

		if(strcmp(field[dart_row][dart_col],"M")==0){
 80030e6:	4b9a      	ldr	r3, [pc, #616]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b9a      	ldr	r3, [pc, #616]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	489a      	ldr	r0, [pc, #616]	; (8003358 <TIM1_BRK_TIM15_IRQHandler+0x280>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030fe:	4997      	ldr	r1, [pc, #604]	; (800335c <TIM1_BRK_TIM15_IRQHandler+0x284>)
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd f865 	bl	80001d0 <strcmp>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d12f      	bne.n	800316c <TIM1_BRK_TIM15_IRQHandler+0x94>
			field[dart_row][dart_col]="N";
 800310c:	4b90      	ldr	r3, [pc, #576]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b90      	ldr	r3, [pc, #576]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	4890      	ldr	r0, [pc, #576]	; (8003358 <TIM1_BRK_TIM15_IRQHandler+0x280>)
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	4a8f      	ldr	r2, [pc, #572]	; (8003360 <TIM1_BRK_TIM15_IRQHandler+0x288>)
 8003122:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			main_field[dart_row][dart_col]="N";
 8003126:	4b8a      	ldr	r3, [pc, #552]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b8a      	ldr	r3, [pc, #552]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	488d      	ldr	r0, [pc, #564]	; (8003364 <TIM1_BRK_TIM15_IRQHandler+0x28c>)
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	4a89      	ldr	r2, [pc, #548]	; (8003360 <TIM1_BRK_TIM15_IRQHandler+0x288>)
 800313c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			setCursor(dart_col, dart_row);
 8003140:	4b84      	ldr	r3, [pc, #528]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4a82      	ldr	r2, [pc, #520]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fb0c 	bl	800076c <setCursor>
			print(" ");
 8003154:	4884      	ldr	r0, [pc, #528]	; (8003368 <TIM1_BRK_TIM15_IRQHandler+0x290>)
 8003156:	f7fd fb51 	bl	80007fc <print>
			shoot=0;
 800315a:	4b7c      	ldr	r3, [pc, #496]	; (800334c <TIM1_BRK_TIM15_IRQHandler+0x274>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
			score+=3;
 8003160:	4b82      	ldr	r3, [pc, #520]	; (800336c <TIM1_BRK_TIM15_IRQHandler+0x294>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3303      	adds	r3, #3
 8003166:	4a81      	ldr	r2, [pc, #516]	; (800336c <TIM1_BRK_TIM15_IRQHandler+0x294>)
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e0ba      	b.n	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>
		}
		else if(strcmp(field[dart_row][dart_col],"N")==0) {
 800316c:	4b78      	ldr	r3, [pc, #480]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b78      	ldr	r3, [pc, #480]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	4878      	ldr	r0, [pc, #480]	; (8003358 <TIM1_BRK_TIM15_IRQHandler+0x280>)
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003184:	4976      	ldr	r1, [pc, #472]	; (8003360 <TIM1_BRK_TIM15_IRQHandler+0x288>)
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f822 	bl	80001d0 <strcmp>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d136      	bne.n	8003200 <TIM1_BRK_TIM15_IRQHandler+0x128>

						setCursor(dart_col, dart_row);
 8003192:	4b70      	ldr	r3, [pc, #448]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4a6d      	ldr	r2, [pc, #436]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd fae3 	bl	800076c <setCursor>
						print("*");
 80031a6:	4872      	ldr	r0, [pc, #456]	; (8003370 <TIM1_BRK_TIM15_IRQHandler+0x298>)
 80031a8:	f7fd fb28 	bl	80007fc <print>
						dart_col--;
 80031ac:	4b69      	ldr	r3, [pc, #420]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	4a68      	ldr	r2, [pc, #416]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80031b4:	6013      	str	r3, [r2, #0]
						setCursor(dart_col+1, dart_row);
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd facf 	bl	800076c <setCursor>
												print(" ");
 80031ce:	4866      	ldr	r0, [pc, #408]	; (8003368 <TIM1_BRK_TIM15_IRQHandler+0x290>)
 80031d0:	f7fd fb14 	bl	80007fc <print>

						if(dart_col==0){
 80031d4:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 8082 	bne.w	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>
									shoot=0;
 80031de:	4b5b      	ldr	r3, [pc, #364]	; (800334c <TIM1_BRK_TIM15_IRQHandler+0x274>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
									setCursor(dart_col, dart_row);
 80031e4:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4a59      	ldr	r2, [pc, #356]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd faba 	bl	800076c <setCursor>
												print(" ");
 80031f8:	485b      	ldr	r0, [pc, #364]	; (8003368 <TIM1_BRK_TIM15_IRQHandler+0x290>)
 80031fa:	f7fd faff 	bl	80007fc <print>
 80031fe:	e070      	b.n	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>
								}
			}else if(strcmp(field[dart_row][dart_col],"S")==0){
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	4853      	ldr	r0, [pc, #332]	; (8003358 <TIM1_BRK_TIM15_IRQHandler+0x280>)
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003218:	4956      	ldr	r1, [pc, #344]	; (8003374 <TIM1_BRK_TIM15_IRQHandler+0x29c>)
 800321a:	4618      	mov	r0, r3
 800321c:	f7fc ffd8 	bl	80001d0 <strcmp>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d112      	bne.n	800324c <TIM1_BRK_TIM15_IRQHandler+0x174>

				dart_col-=1;
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	4a49      	ldr	r2, [pc, #292]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 800322e:	6013      	str	r3, [r2, #0]
				setCursor(dart_col, dart_row);
 8003230:	4b48      	ldr	r3, [pc, #288]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4a46      	ldr	r2, [pc, #280]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fa94 	bl	800076c <setCursor>
				print("*");
 8003244:	484a      	ldr	r0, [pc, #296]	; (8003370 <TIM1_BRK_TIM15_IRQHandler+0x298>)
 8003246:	f7fd fad9 	bl	80007fc <print>
 800324a:	e04a      	b.n	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>



			}
			else if(strcmp(field[dart_row][dart_col],"F")==0){
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	4840      	ldr	r0, [pc, #256]	; (8003358 <TIM1_BRK_TIM15_IRQHandler+0x280>)
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003264:	4944      	ldr	r1, [pc, #272]	; (8003378 <TIM1_BRK_TIM15_IRQHandler+0x2a0>)
 8003266:	4618      	mov	r0, r3
 8003268:	f7fc ffb2 	bl	80001d0 <strcmp>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d112      	bne.n	8003298 <TIM1_BRK_TIM15_IRQHandler+0x1c0>

							dart_col-=1;
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a36      	ldr	r2, [pc, #216]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 800327a:	6013      	str	r3, [r2, #0]
							setCursor(dart_col, dart_row);
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4a33      	ldr	r2, [pc, #204]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fa6e 	bl	800076c <setCursor>
							print("*");
 8003290:	4837      	ldr	r0, [pc, #220]	; (8003370 <TIM1_BRK_TIM15_IRQHandler+0x298>)
 8003292:	f7fd fab3 	bl	80007fc <print>
 8003296:	e024      	b.n	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>
		}else if(strcmp(field[dart_row][dart_col],"H")==0){
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	482d      	ldr	r0, [pc, #180]	; (8003358 <TIM1_BRK_TIM15_IRQHandler+0x280>)
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032b0:	4932      	ldr	r1, [pc, #200]	; (800337c <TIM1_BRK_TIM15_IRQHandler+0x2a4>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fc ff8c 	bl	80001d0 <strcmp>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d111      	bne.n	80032e2 <TIM1_BRK_TIM15_IRQHandler+0x20a>

			dart_col-=1;
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	4a23      	ldr	r2, [pc, #140]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80032c6:	6013      	str	r3, [r2, #0]
			setCursor(dart_col, dart_row);
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <TIM1_BRK_TIM15_IRQHandler+0x27c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4a20      	ldr	r2, [pc, #128]	; (8003350 <TIM1_BRK_TIM15_IRQHandler+0x278>)
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fa48 	bl	800076c <setCursor>
			print("*");
 80032dc:	4824      	ldr	r0, [pc, #144]	; (8003370 <TIM1_BRK_TIM15_IRQHandler+0x298>)
 80032de:	f7fd fa8d 	bl	80007fc <print>
		}
	}
	if(lost==1){
 80032e2:	4b27      	ldr	r3, [pc, #156]	; (8003380 <TIM1_BRK_TIM15_IRQHandler+0x2a8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d127      	bne.n	800333a <TIM1_BRK_TIM15_IRQHandler+0x262>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80032ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ee:	4825      	ldr	r0, [pc, #148]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 80032f0:	f000 fe06 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80032f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032f8:	4822      	ldr	r0, [pc, #136]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 80032fa:	f000 fe01 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80032fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003302:	4820      	ldr	r0, [pc, #128]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 8003304:	f000 fdfc 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8003308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800330c:	481d      	ldr	r0, [pc, #116]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 800330e:	f000 fdf7 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8003312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003316:	481b      	ldr	r0, [pc, #108]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 8003318:	f000 fdf2 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 800331c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003320:	4818      	ldr	r0, [pc, #96]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 8003322:	f000 fded 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8003326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800332a:	4816      	ldr	r0, [pc, #88]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 800332c:	f000 fde8 	bl	8003f00 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8003330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003334:	4813      	ldr	r0, [pc, #76]	; (8003384 <TIM1_BRK_TIM15_IRQHandler+0x2ac>)
 8003336:	f000 fde3 	bl	8003f00 <HAL_GPIO_TogglePin>
	}



  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800333a:	4813      	ldr	r0, [pc, #76]	; (8003388 <TIM1_BRK_TIM15_IRQHandler+0x2b0>)
 800333c:	f003 f99a 	bl	8006674 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003340:	4812      	ldr	r0, [pc, #72]	; (800338c <TIM1_BRK_TIM15_IRQHandler+0x2b4>)
 8003342:	f003 f997 	bl	8006674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000378 	.word	0x20000378
 8003350:	20000960 	.word	0x20000960
 8003354:	20000968 	.word	0x20000968
 8003358:	20000234 	.word	0x20000234
 800335c:	08009758 	.word	0x08009758
 8003360:	0800974c 	.word	0x0800974c
 8003364:	2000003c 	.word	0x2000003c
 8003368:	08009768 	.word	0x08009768
 800336c:	20000394 	.word	0x20000394
 8003370:	08009870 	.word	0x08009870
 8003374:	08009750 	.word	0x08009750
 8003378:	08009760 	.word	0x08009760
 800337c:	0800975c 	.word	0x0800975c
 8003380:	20000384 	.word	0x20000384
 8003384:	48001000 	.word	0x48001000
 8003388:	200004d4 	.word	0x200004d4
 800338c:	2000041c 	.word	0x2000041c

08003390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b094      	sub	sp, #80	; 0x50
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */



		if(lost==0 && broken_stair==0){
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <TIM2_IRQHandler+0x10c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d111      	bne.n	80033c2 <TIM2_IRQHandler+0x32>
 800339e:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <TIM2_IRQHandler+0x110>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <TIM2_IRQHandler+0x32>
			if(doodle_col>10)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <TIM2_IRQHandler+0x114>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b0a      	cmp	r3, #10
 80033ac:	dd02      	ble.n	80033b4 <TIM2_IRQHandler+0x24>
				jump();
 80033ae:	f7ff f95d 	bl	800266c <jump>
			if(doodle_col>10)
 80033b2:	e06b      	b.n	800348c <TIM2_IRQHandler+0xfc>
			else if(doodle_col<=10)
 80033b4:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <TIM2_IRQHandler+0x114>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b0a      	cmp	r3, #10
 80033ba:	dc67      	bgt.n	800348c <TIM2_IRQHandler+0xfc>
				movescreen();
 80033bc:	f7ff f91e 	bl	80025fc <movescreen>
			if(doodle_col>10)
 80033c0:	e064      	b.n	800348c <TIM2_IRQHandler+0xfc>
			}
			else if(monster_lost==1){
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <TIM2_IRQHandler+0x118>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d161      	bne.n	800348e <TIM2_IRQHandler+0xfe>
				setCursor(doodle_col, doodle_row);
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <TIM2_IRQHandler+0x114>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4a36      	ldr	r2, [pc, #216]	; (80034ac <TIM2_IRQHandler+0x11c>)
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f9c7 	bl	800076c <setCursor>
						print(" ");
 80033de:	4834      	ldr	r0, [pc, #208]	; (80034b0 <TIM2_IRQHandler+0x120>)
 80033e0:	f7fd fa0c 	bl	80007fc <print>
						setCursor(doodle_col+1, doodle_row);
 80033e4:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <TIM2_IRQHandler+0x114>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <TIM2_IRQHandler+0x11c>)
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f9b8 	bl	800076c <setCursor>
						doodle_col++;
 80033fc:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <TIM2_IRQHandler+0x114>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <TIM2_IRQHandler+0x114>)
 8003404:	6013      	str	r3, [r2, #0]
						write(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f7fd fa5a 	bl	80008c0 <write>
						if(doodle_col==19){
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <TIM2_IRQHandler+0x114>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b13      	cmp	r3, #19
 8003412:	d13c      	bne.n	800348e <TIM2_IRQHandler+0xfe>
							monster_lost==0;
							clear();
 8003414:	f7fd f9a0 	bl	8000758 <clear>

							int strScore[20];

									  setCursor(0,3);
 8003418:	2103      	movs	r1, #3
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd f9a6 	bl	800076c <setCursor>
									  sprintf(strScore,"%d",score);
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <TIM2_IRQHandler+0x124>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	463b      	mov	r3, r7
 8003426:	4924      	ldr	r1, [pc, #144]	; (80034b8 <TIM2_IRQHandler+0x128>)
 8003428:	4618      	mov	r0, r3
 800342a:	f004 ff95 	bl	8008358 <siprintf>
									  print(strScore);
 800342e:	463b      	mov	r3, r7
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd f9e3 	bl	80007fc <print>

									  setCursor(8,3);
 8003436:	2103      	movs	r1, #3
 8003438:	2008      	movs	r0, #8
 800343a:	f7fd f997 	bl	800076c <setCursor>
									  print(player);
 800343e:	481f      	ldr	r0, [pc, #124]	; (80034bc <TIM2_IRQHandler+0x12c>)
 8003440:	f7fd f9dc 	bl	80007fc <print>

									  sprintf(strScore,"\t%d\t",score);
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <TIM2_IRQHandler+0x124>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	463b      	mov	r3, r7
 800344a:	491d      	ldr	r1, [pc, #116]	; (80034c0 <TIM2_IRQHandler+0x130>)
 800344c:	4618      	mov	r0, r3
 800344e:	f004 ff83 	bl	8008358 <siprintf>
									  	strcat(player,strScore);
 8003452:	463b      	mov	r3, r7
 8003454:	4619      	mov	r1, r3
 8003456:	4819      	ldr	r0, [pc, #100]	; (80034bc <TIM2_IRQHandler+0x12c>)
 8003458:	f004 ff9e 	bl	8008398 <strcat>
									  	HAL_UART_Transmit(&huart2, &player, sizeof(unsigned char)*60,1000);
 800345c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003460:	223c      	movs	r2, #60	; 0x3c
 8003462:	4916      	ldr	r1, [pc, #88]	; (80034bc <TIM2_IRQHandler+0x12c>)
 8003464:	4817      	ldr	r0, [pc, #92]	; (80034c4 <TIM2_IRQHandler+0x134>)
 8003466:	f004 f9c5 	bl	80077f4 <HAL_UART_Transmit>
//									  	player[20]="doodler";

							setCursor(0, 1);
 800346a:	2101      	movs	r1, #1
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd f97d 	bl	800076c <setCursor>
							print("You Lose!");
 8003472:	4815      	ldr	r0, [pc, #84]	; (80034c8 <TIM2_IRQHandler+0x138>)
 8003474:	f7fd f9c2 	bl	80007fc <print>
							temp=0;
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <TIM2_IRQHandler+0x13c>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
							score=0;
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <TIM2_IRQHandler+0x124>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

							side[0]="U";
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <TIM2_IRQHandler+0x140>)
 8003486:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <TIM2_IRQHandler+0x144>)
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e000      	b.n	800348e <TIM2_IRQHandler+0xfe>
			if(doodle_col>10)
 800348c:	bf00      	nop

	}


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800348e:	4812      	ldr	r0, [pc, #72]	; (80034d8 <TIM2_IRQHandler+0x148>)
 8003490:	f003 f8f0 	bl	8006674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	3750      	adds	r7, #80	; 0x50
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000384 	.word	0x20000384
 80034a0:	2000038c 	.word	0x2000038c
 80034a4:	20000184 	.word	0x20000184
 80034a8:	20000388 	.word	0x20000388
 80034ac:	20000188 	.word	0x20000188
 80034b0:	08009768 	.word	0x08009768
 80034b4:	20000394 	.word	0x20000394
 80034b8:	0800976c 	.word	0x0800976c
 80034bc:	2000018c 	.word	0x2000018c
 80034c0:	08009770 	.word	0x08009770
 80034c4:	200005d4 	.word	0x200005d4
 80034c8:	08009778 	.word	0x08009778
 80034cc:	2000037c 	.word	0x2000037c
 80034d0:	200001a0 	.word	0x200001a0
 80034d4:	08009748 	.word	0x08009748
 80034d8:	20000584 	.word	0x20000584

080034dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034e0:	485b      	ldr	r0, [pc, #364]	; (8003650 <TIM3_IRQHandler+0x174>)
 80034e2:	f003 f8c7 	bl	8006674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  x++;
 80034e6:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <TIM3_IRQHandler+0x178>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	4a59      	ldr	r2, [pc, #356]	; (8003654 <TIM3_IRQHandler+0x178>)
 80034ee:	6013      	str	r3, [r2, #0]

    	   if(x%4==0){
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <TIM3_IRQHandler+0x178>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d118      	bne.n	800352e <TIM3_IRQHandler+0x52>
    		   	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2101      	movs	r1, #1
 8003500:	4855      	ldr	r0, [pc, #340]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003502:	f000 fce5 	bl	8003ed0 <HAL_GPIO_WritePin>
    		   	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003506:	2201      	movs	r2, #1
 8003508:	2102      	movs	r1, #2
 800350a:	4853      	ldr	r0, [pc, #332]	; (8003658 <TIM3_IRQHandler+0x17c>)
 800350c:	f000 fce0 	bl	8003ed0 <HAL_GPIO_WritePin>
    		   	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003510:	2201      	movs	r2, #1
 8003512:	2104      	movs	r1, #4
 8003514:	4850      	ldr	r0, [pc, #320]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003516:	f000 fcdb 	bl	8003ed0 <HAL_GPIO_WritePin>
    		   	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800351a:	2201      	movs	r2, #1
 800351c:	2108      	movs	r1, #8
 800351e:	484e      	ldr	r0, [pc, #312]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003520:	f000 fcd6 	bl	8003ed0 <HAL_GPIO_WritePin>
    		   	 	numberTOBCD(volval);
 8003524:	4b4d      	ldr	r3, [pc, #308]	; (800365c <TIM3_IRQHandler+0x180>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fab7 	bl	8000a9c <numberTOBCD>
    	   }
    	   if(x%4==1){
 800352e:	4b49      	ldr	r3, [pc, #292]	; (8003654 <TIM3_IRQHandler+0x178>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	425a      	negs	r2, r3
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	bf58      	it	pl
 800353e:	4253      	negpl	r3, r2
 8003540:	2b01      	cmp	r3, #1
 8003542:	d116      	bne.n	8003572 <TIM3_IRQHandler+0x96>
    	 	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003544:	2201      	movs	r2, #1
 8003546:	2101      	movs	r1, #1
 8003548:	4843      	ldr	r0, [pc, #268]	; (8003658 <TIM3_IRQHandler+0x17c>)
 800354a:	f000 fcc1 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2102      	movs	r1, #2
 8003552:	4841      	ldr	r0, [pc, #260]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003554:	f000 fcbc 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 8003558:	2201      	movs	r2, #1
 800355a:	2104      	movs	r1, #4
 800355c:	483e      	ldr	r0, [pc, #248]	; (8003658 <TIM3_IRQHandler+0x17c>)
 800355e:	f000 fcb7 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003562:	2201      	movs	r2, #1
 8003564:	2108      	movs	r1, #8
 8003566:	483c      	ldr	r0, [pc, #240]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003568:	f000 fcb2 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	  	numberTOBCD(0);
 800356c:	2000      	movs	r0, #0
 800356e:	f7fd fa95 	bl	8000a9c <numberTOBCD>
    	   }
    	   if(x%4==2){
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <TIM3_IRQHandler+0x178>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	425a      	negs	r2, r3
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	f002 0203 	and.w	r2, r2, #3
 8003580:	bf58      	it	pl
 8003582:	4253      	negpl	r3, r2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d12d      	bne.n	80035e4 <TIM3_IRQHandler+0x108>
    	 	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8003588:	2201      	movs	r2, #1
 800358a:	2101      	movs	r1, #1
 800358c:	4832      	ldr	r0, [pc, #200]	; (8003658 <TIM3_IRQHandler+0x17c>)
 800358e:	f000 fc9f 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003592:	2201      	movs	r2, #1
 8003594:	2102      	movs	r1, #2
 8003596:	4830      	ldr	r0, [pc, #192]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003598:	f000 fc9a 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2104      	movs	r1, #4
 80035a0:	482d      	ldr	r0, [pc, #180]	; (8003658 <TIM3_IRQHandler+0x17c>)
 80035a2:	f000 fc95 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80035a6:	2201      	movs	r2, #1
 80035a8:	2108      	movs	r1, #8
 80035aa:	482b      	ldr	r0, [pc, #172]	; (8003658 <TIM3_IRQHandler+0x17c>)
 80035ac:	f000 fc90 	bl	8003ed0 <HAL_GPIO_WritePin>
//    	 	 		y2=(score/10)%10;
//    	 	 		y3=(y2/10)%10;
    	 	 	  y1=((score)/10)%10;
 80035b0:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <TIM3_IRQHandler+0x184>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <TIM3_IRQHandler+0x188>)
 80035b6:	fb82 1203 	smull	r1, r2, r2, r3
 80035ba:	1092      	asrs	r2, r2, #2
 80035bc:	17db      	asrs	r3, r3, #31
 80035be:	1ad1      	subs	r1, r2, r3
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <TIM3_IRQHandler+0x188>)
 80035c2:	fb83 2301 	smull	r2, r3, r3, r1
 80035c6:	109a      	asrs	r2, r3, #2
 80035c8:	17cb      	asrs	r3, r1, #31
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	1aca      	subs	r2, r1, r3
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <TIM3_IRQHandler+0x18c>)
 80035d8:	601a      	str	r2, [r3, #0]
    	 	 	  numberTOBCD(y1);
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <TIM3_IRQHandler+0x18c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fa5c 	bl	8000a9c <numberTOBCD>


    	   }
    	   if(x%4==3){
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <TIM3_IRQHandler+0x178>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	425a      	negs	r2, r3
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	f002 0203 	and.w	r2, r2, #3
 80035f2:	bf58      	it	pl
 80035f4:	4253      	negpl	r3, r2
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d127      	bne.n	800364a <TIM3_IRQHandler+0x16e>
    	 	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80035fa:	2201      	movs	r2, #1
 80035fc:	2101      	movs	r1, #1
 80035fe:	4816      	ldr	r0, [pc, #88]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003600:	f000 fc66 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8003604:	2201      	movs	r2, #1
 8003606:	2102      	movs	r1, #2
 8003608:	4813      	ldr	r0, [pc, #76]	; (8003658 <TIM3_IRQHandler+0x17c>)
 800360a:	f000 fc61 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);
 800360e:	2201      	movs	r2, #1
 8003610:	2104      	movs	r1, #4
 8003612:	4811      	ldr	r0, [pc, #68]	; (8003658 <TIM3_IRQHandler+0x17c>)
 8003614:	f000 fc5c 	bl	8003ed0 <HAL_GPIO_WritePin>
    	 	 	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2108      	movs	r1, #8
 800361c:	480e      	ldr	r0, [pc, #56]	; (8003658 <TIM3_IRQHandler+0x17c>)
 800361e:	f000 fc57 	bl	8003ed0 <HAL_GPIO_WritePin>
//    	 	 	  	y4=(y3/10)%10;
    	 	 	  y2=((score)%10);
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <TIM3_IRQHandler+0x184>)
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <TIM3_IRQHandler+0x188>)
 8003628:	fb83 2301 	smull	r2, r3, r3, r1
 800362c:	109a      	asrs	r2, r3, #2
 800362e:	17cb      	asrs	r3, r1, #31
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	1aca      	subs	r2, r1, r3
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <TIM3_IRQHandler+0x190>)
 800363e:	601a      	str	r2, [r3, #0]
    	 	 	   numberTOBCD(y2);
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <TIM3_IRQHandler+0x190>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fa29 	bl	8000a9c <numberTOBCD>

    	   }


  /* USER CODE END TIM3_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000468 	.word	0x20000468
 8003654:	20000374 	.word	0x20000374
 8003658:	48000800 	.word	0x48000800
 800365c:	20000398 	.word	0x20000398
 8003660:	20000394 	.word	0x20000394
 8003664:	66666667 	.word	0x66666667
 8003668:	200009ac 	.word	0x200009ac
 800366c:	2000095c 	.word	0x2000095c

08003670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	return 1;
 8003674:	2301      	movs	r3, #1
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_kill>:

int _kill(int pid, int sig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800368a:	f004 fdc5 	bl	8008218 <__errno>
 800368e:	4603      	mov	r3, r0
 8003690:	2216      	movs	r2, #22
 8003692:	601a      	str	r2, [r3, #0]
	return -1;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_exit>:

void _exit (int status)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ffe7 	bl	8003680 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036b2:	e7fe      	b.n	80036b2 <_exit+0x12>

080036b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e00a      	b.n	80036dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036c6:	f3af 8000 	nop.w
 80036ca:	4601      	mov	r1, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	60ba      	str	r2, [r7, #8]
 80036d2:	b2ca      	uxtb	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf0      	blt.n	80036c6 <_read+0x12>
	}

return len;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e009      	b.n	8003714 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	60ba      	str	r2, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	dbf1      	blt.n	8003700 <_write+0x12>
	}
	return len;
 800371c:	687b      	ldr	r3, [r7, #4]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <_close>:

int _close(int file)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
	return -1;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800374e:	605a      	str	r2, [r3, #4]
	return 0;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_isatty>:

int _isatty(int file)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
	return 1;
 8003766:	2301      	movs	r3, #1
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	return 0;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <_sbrk+0x5c>)
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <_sbrk+0x60>)
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <_sbrk+0x64>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <_sbrk+0x64>)
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <_sbrk+0x68>)
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <_sbrk+0x64>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d207      	bcs.n	80037d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c0:	f004 fd2a 	bl	8008218 <__errno>
 80037c4:	4603      	mov	r3, r0
 80037c6:	220c      	movs	r2, #12
 80037c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	e009      	b.n	80037e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <_sbrk+0x64>)
 80037e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	2000a000 	.word	0x2000a000
 80037f0:	00000400 	.word	0x00000400
 80037f4:	2000039c 	.word	0x2000039c
 80037f8:	200009c8 	.word	0x200009c8

080037fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <SystemInit+0x20>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	4a05      	ldr	r2, [pc, #20]	; (800381c <SystemInit+0x20>)
 8003808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800380c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003858 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480d      	ldr	r0, [pc, #52]	; (800385c <LoopForever+0x6>)
  ldr r1, =_edata
 8003826:	490e      	ldr	r1, [pc, #56]	; (8003860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <LoopForever+0xe>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800383c:	4c0b      	ldr	r4, [pc, #44]	; (800386c <LoopForever+0x16>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800384a:	f7ff ffd7 	bl	80037fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800384e:	f004 fce9 	bl	8008224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003852:	f7fd fa73 	bl	8000d3c <main>

08003856 <LoopForever>:

LoopForever:
    b LoopForever
 8003856:	e7fe      	b.n	8003856 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003858:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800385c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003860:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003864:	08009a00 	.word	0x08009a00
  ldr r2, =_sbss
 8003868:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800386c:	200009c4 	.word	0x200009c4

08003870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC1_2_IRQHandler>
	...

08003874 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_Init+0x28>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_Init+0x28>)
 800387e:	f043 0310 	orr.w	r3, r3, #16
 8003882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003884:	2003      	movs	r0, #3
 8003886:	f000 f94f 	bl	8003b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388a:	2000      	movs	r0, #0
 800388c:	f000 f808 	bl	80038a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003890:	f7fd ff5c 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000

080038a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_InitTick+0x54>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_InitTick+0x58>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4619      	mov	r1, r3
 80038b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f967 	bl	8003b92 <HAL_SYSTICK_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00e      	b.n	80038ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d80a      	bhi.n	80038ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d4:	2200      	movs	r2, #0
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f000 f92f 	bl	8003b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e0:	4a06      	ldr	r2, [pc, #24]	; (80038fc <HAL_InitTick+0x5c>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	200001a4 	.word	0x200001a4
 80038f8:	200001ac 	.word	0x200001ac
 80038fc:	200001a8 	.word	0x200001a8

08003900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x20>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_IncTick+0x24>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_IncTick+0x24>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	200001ac 	.word	0x200001ac
 8003924:	200009b0 	.word	0x200009b0

08003928 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;  
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_GetTick+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	200009b0 	.word	0x200009b0

08003940 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7ff ffee 	bl	8003928 <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d005      	beq.n	8003966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_Delay+0x44>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003966:	bf00      	nop
 8003968:	f7ff ffde 	bl	8003928 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d8f7      	bhi.n	8003968 <HAL_Delay+0x28>
  {
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200001ac 	.word	0x200001ac

08003988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a4:	4013      	ands	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ba:	4a04      	ldr	r2, [pc, #16]	; (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	60d3      	str	r3, [r2, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <__NVIC_GetPriorityGrouping+0x18>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 0307 	and.w	r3, r3, #7
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	db0b      	blt.n	8003a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	4907      	ldr	r1, [pc, #28]	; (8003a24 <__NVIC_EnableIRQ+0x38>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000e100 	.word	0xe000e100

08003a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db0a      	blt.n	8003a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	490c      	ldr	r1, [pc, #48]	; (8003a74 <__NVIC_SetPriority+0x4c>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a50:	e00a      	b.n	8003a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4908      	ldr	r1, [pc, #32]	; (8003a78 <__NVIC_SetPriority+0x50>)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3b04      	subs	r3, #4
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	440b      	add	r3, r1
 8003a66:	761a      	strb	r2, [r3, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f1c3 0307 	rsb	r3, r3, #7
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	bf28      	it	cs
 8003a9a:	2304      	movcs	r3, #4
 8003a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d902      	bls.n	8003aac <NVIC_EncodePriority+0x30>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3b03      	subs	r3, #3
 8003aaa:	e000      	b.n	8003aae <NVIC_EncodePriority+0x32>
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	401a      	ands	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	43d9      	mvns	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	4313      	orrs	r3, r2
         );
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af4:	d301      	bcc.n	8003afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00f      	b.n	8003b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <SysTick_Config+0x40>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b02:	210f      	movs	r1, #15
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	f7ff ff8e 	bl	8003a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <SysTick_Config+0x40>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <SysTick_Config+0x40>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	e000e010 	.word	0xe000e010

08003b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff29 	bl	8003988 <__NVIC_SetPriorityGrouping>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b50:	f7ff ff3e 	bl	80039d0 <__NVIC_GetPriorityGrouping>
 8003b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7ff ff8e 	bl	8003a7c <NVIC_EncodePriority>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff5d 	bl	8003a28 <__NVIC_SetPriority>
}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff31 	bl	80039ec <__NVIC_EnableIRQ>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ffa2 	bl	8003ae4 <SysTick_Config>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bba:	e154      	b.n	8003e66 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8146 	beq.w	8003e60 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d005      	beq.n	8003bec <HAL_GPIO_Init+0x40>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d130      	bne.n	8003c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c22:	2201      	movs	r2, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	f003 0201 	and.w	r2, r3, #1
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d017      	beq.n	8003c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d123      	bne.n	8003cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	220f      	movs	r2, #15
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0203 	and.w	r2, r3, #3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80a0 	beq.w	8003e60 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d20:	4b58      	ldr	r3, [pc, #352]	; (8003e84 <HAL_GPIO_Init+0x2d8>)
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4a57      	ldr	r2, [pc, #348]	; (8003e84 <HAL_GPIO_Init+0x2d8>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6193      	str	r3, [r2, #24]
 8003d2c:	4b55      	ldr	r3, [pc, #340]	; (8003e84 <HAL_GPIO_Init+0x2d8>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d38:	4a53      	ldr	r2, [pc, #332]	; (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d62:	d019      	beq.n	8003d98 <HAL_GPIO_Init+0x1ec>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a49      	ldr	r2, [pc, #292]	; (8003e8c <HAL_GPIO_Init+0x2e0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_GPIO_Init+0x1e8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a48      	ldr	r2, [pc, #288]	; (8003e90 <HAL_GPIO_Init+0x2e4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00d      	beq.n	8003d90 <HAL_GPIO_Init+0x1e4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a47      	ldr	r2, [pc, #284]	; (8003e94 <HAL_GPIO_Init+0x2e8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <HAL_GPIO_Init+0x1e0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a46      	ldr	r2, [pc, #280]	; (8003e98 <HAL_GPIO_Init+0x2ec>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <HAL_GPIO_Init+0x1dc>
 8003d84:	2304      	movs	r3, #4
 8003d86:	e008      	b.n	8003d9a <HAL_GPIO_Init+0x1ee>
 8003d88:	2305      	movs	r3, #5
 8003d8a:	e006      	b.n	8003d9a <HAL_GPIO_Init+0x1ee>
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e004      	b.n	8003d9a <HAL_GPIO_Init+0x1ee>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e002      	b.n	8003d9a <HAL_GPIO_Init+0x1ee>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_GPIO_Init+0x1ee>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	f002 0203 	and.w	r2, r2, #3
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	4093      	lsls	r3, r2
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003daa:	4937      	ldr	r1, [pc, #220]	; (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	3302      	adds	r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e06:	4a25      	ldr	r2, [pc, #148]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e5a:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <HAL_GPIO_Init+0x2f0>)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f47f aea3 	bne.w	8003bbc <HAL_GPIO_Init+0x10>
  }
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	48000400 	.word	0x48000400
 8003e90:	48000800 	.word	0x48000800
 8003e94:	48000c00 	.word	0x48000c00
 8003e98:	48001000 	.word	0x48001000
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
 8003ebc:	e001      	b.n	8003ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
 8003edc:	4613      	mov	r3, r2
 8003ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee0:	787b      	ldrb	r3, [r7, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eec:	e002      	b.n	8003ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4013      	ands	r3, r2
 8003f18:	041a      	lsls	r2, r3, #16
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43d9      	mvns	r1, r3
 8003f1e:	887b      	ldrh	r3, [r7, #2]
 8003f20:	400b      	ands	r3, r1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	619a      	str	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc fdf0 	bl	8000b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40010400 	.word	0x40010400

08003f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e081      	b.n	800407a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fc02 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e006      	b.n	8003fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d104      	bne.n	8003ffe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800400c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b20      	cmp	r3, #32
 8004096:	d138      	bne.n	800410a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e032      	b.n	800410c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2224      	movs	r2, #36	; 0x24
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	d139      	bne.n	80041a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004138:	2302      	movs	r3, #2
 800413a:	e033      	b.n	80041a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800416a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	b08b      	sub	sp, #44	; 0x2c
 80041b4:	af06      	add	r7, sp, #24
 80041b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0d0      	b.n	8004364 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fca0 	bl	8001b1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f003 ffd8 	bl	800819e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	e04c      	b.n	800428e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	3301      	adds	r3, #1
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	b298      	uxth	r0, r3
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	440b      	add	r3, r1
 8004230:	3336      	adds	r3, #54	; 0x36
 8004232:	4602      	mov	r2, r0
 8004234:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	3303      	adds	r3, #3
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	440b      	add	r3, r1
 800425a:	3338      	adds	r3, #56	; 0x38
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	440b      	add	r3, r1
 800426e:	333c      	adds	r3, #60	; 0x3c
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	3340      	adds	r3, #64	; 0x40
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	3301      	adds	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
 800428e:	7bfa      	ldrb	r2, [r7, #15]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d3ad      	bcc.n	80041f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e044      	b.n	8004328 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800429e:	7bfa      	ldrb	r2, [r7, #15]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	440b      	add	r3, r1
 80042ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	3301      	adds	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3b5      	bcc.n	800429e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	687e      	ldr	r6, [r7, #4]
 800433a:	466d      	mov	r5, sp
 800433c:	f106 0410 	add.w	r4, r6, #16
 8004340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	1d33      	adds	r3, r6, #4
 800434a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800434c:	6838      	ldr	r0, [r7, #0]
 800434e:	f003 ff41 	bl	80081d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800436c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004372:	af00      	add	r7, sp, #0
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f000 bef4 	b.w	800516e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 816a 	beq.w	800466a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004396:	4bb3      	ldr	r3, [pc, #716]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00c      	beq.n	80043bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043a2:	4bb0      	ldr	r3, [pc, #704]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d159      	bne.n	8004462 <HAL_RCC_OscConfig+0xf6>
 80043ae:	4bad      	ldr	r3, [pc, #692]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d152      	bne.n	8004462 <HAL_RCC_OscConfig+0xf6>
 80043bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80043d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_OscConfig+0x82>
 80043e8:	4b9e      	ldr	r3, [pc, #632]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	e015      	b.n	800441a <HAL_RCC_OscConfig+0xae>
 80043ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004406:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800440a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004416:	4b93      	ldr	r3, [pc, #588]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800441e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004422:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004426:	fa92 f2a2 	rbit	r2, r2
 800442a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800442e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004432:	fab2 f282 	clz	r2, r2
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f042 0220 	orr.w	r2, r2, #32
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	f002 021f 	and.w	r2, r2, #31
 8004442:	2101      	movs	r1, #1
 8004444:	fa01 f202 	lsl.w	r2, r1, r2
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 810c 	beq.w	8004668 <HAL_RCC_OscConfig+0x2fc>
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 8106 	bne.w	8004668 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	f000 be86 	b.w	800516e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d106      	bne.n	800447c <HAL_RCC_OscConfig+0x110>
 800446e:	4b7d      	ldr	r3, [pc, #500]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7c      	ldr	r2, [pc, #496]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e030      	b.n	80044de <HAL_RCC_OscConfig+0x172>
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x134>
 8004486:	4b77      	ldr	r3, [pc, #476]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a76      	ldr	r2, [pc, #472]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b74      	ldr	r3, [pc, #464]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a73      	ldr	r2, [pc, #460]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01e      	b.n	80044de <HAL_RCC_OscConfig+0x172>
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044aa:	d10c      	bne.n	80044c6 <HAL_RCC_OscConfig+0x15a>
 80044ac:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6c      	ldr	r2, [pc, #432]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a69      	ldr	r2, [pc, #420]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e00b      	b.n	80044de <HAL_RCC_OscConfig+0x172>
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a66      	ldr	r2, [pc, #408]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b64      	ldr	r3, [pc, #400]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a63      	ldr	r2, [pc, #396]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044de:	4b61      	ldr	r3, [pc, #388]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f023 020f 	bic.w	r2, r3, #15
 80044e6:	1d3b      	adds	r3, r7, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	495d      	ldr	r1, [pc, #372]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d059      	beq.n	80045b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7ff fa14 	bl	8003928 <HAL_GetTick>
 8004500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004506:	f7ff fa0f 	bl	8003928 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d902      	bls.n	800451c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	f000 be29 	b.w	800516e <HAL_RCC_OscConfig+0xe02>
 800451c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004520:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004530:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d102      	bne.n	800454e <HAL_RCC_OscConfig+0x1e2>
 8004548:	4b46      	ldr	r3, [pc, #280]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	e015      	b.n	800457a <HAL_RCC_OscConfig+0x20e>
 800454e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004552:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004566:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800456a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004576:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800457e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004582:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004586:	fa92 f2a2 	rbit	r2, r2
 800458a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800458e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004592:	fab2 f282 	clz	r2, r2
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f002 021f 	and.w	r2, r2, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ab      	beq.n	8004506 <HAL_RCC_OscConfig+0x19a>
 80045ae:	e05c      	b.n	800466a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7ff f9ba 	bl	8003928 <HAL_GetTick>
 80045b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ba:	f7ff f9b5 	bl	8003928 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d902      	bls.n	80045d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	f000 bdcf 	b.w	800516e <HAL_RCC_OscConfig+0xe02>
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80045e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_RCC_OscConfig+0x296>
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	e015      	b.n	800462e <HAL_RCC_OscConfig+0x2c2>
 8004602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004606:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800461a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800461e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_RCC_OscConfig+0x2f8>)
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004632:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004636:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800463a:	fa92 f2a2 	rbit	r2, r2
 800463e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004642:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004646:	fab2 f282 	clz	r2, r2
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	f042 0220 	orr.w	r2, r2, #32
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f002 021f 	and.w	r2, r2, #31
 8004656:	2101      	movs	r1, #1
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ab      	bne.n	80045ba <HAL_RCC_OscConfig+0x24e>
 8004662:	e002      	b.n	800466a <HAL_RCC_OscConfig+0x2fe>
 8004664:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 816f 	beq.w	8004958 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800467a:	4bd0      	ldr	r3, [pc, #832]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004686:	4bcd      	ldr	r3, [pc, #820]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b08      	cmp	r3, #8
 8004690:	d16c      	bne.n	800476c <HAL_RCC_OscConfig+0x400>
 8004692:	4bca      	ldr	r3, [pc, #808]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d166      	bne.n	800476c <HAL_RCC_OscConfig+0x400>
 800469e:	2302      	movs	r3, #2
 80046a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80046b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d102      	bne.n	80046ce <HAL_RCC_OscConfig+0x362>
 80046c8:	4bbc      	ldr	r3, [pc, #752]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	e013      	b.n	80046f6 <HAL_RCC_OscConfig+0x38a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046e0:	2302      	movs	r3, #2
 80046e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046f2:	4bb2      	ldr	r3, [pc, #712]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2202      	movs	r2, #2
 80046f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004700:	fa92 f2a2 	rbit	r2, r2
 8004704:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004708:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800470c:	fab2 f282 	clz	r2, r2
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	f042 0220 	orr.w	r2, r2, #32
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	f002 021f 	and.w	r2, r2, #31
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_RCC_OscConfig+0x3cc>
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d002      	beq.n	8004738 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f000 bd1b 	b.w	800516e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004738:	4ba0      	ldr	r3, [pc, #640]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004740:	1d3b      	adds	r3, r7, #4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	21f8      	movs	r1, #248	; 0xf8
 8004748:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004750:	fa91 f1a1 	rbit	r1, r1
 8004754:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004758:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800475c:	fab1 f181 	clz	r1, r1
 8004760:	b2c9      	uxtb	r1, r1
 8004762:	408b      	lsls	r3, r1
 8004764:	4995      	ldr	r1, [pc, #596]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476a:	e0f5      	b.n	8004958 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8085 	beq.w	8004882 <HAL_RCC_OscConfig+0x516>
 8004778:	2301      	movs	r3, #1
 800477a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800478a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	461a      	mov	r2, r3
 80047a0:	2301      	movs	r3, #1
 80047a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7ff f8c0 	bl	8003928 <HAL_GetTick>
 80047a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ae:	f7ff f8bb 	bl	8003928 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d902      	bls.n	80047c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	f000 bcd5 	b.w	800516e <HAL_RCC_OscConfig+0xe02>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <HAL_RCC_OscConfig+0x488>
 80047ee:	4b73      	ldr	r3, [pc, #460]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	e013      	b.n	800481c <HAL_RCC_OscConfig+0x4b0>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004806:	2302      	movs	r3, #2
 8004808:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800480c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004818:	4b68      	ldr	r3, [pc, #416]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2202      	movs	r2, #2
 800481e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004822:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004826:	fa92 f2a2 	rbit	r2, r2
 800482a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800482e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004832:	fab2 f282 	clz	r2, r2
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	f042 0220 	orr.w	r2, r2, #32
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	f002 021f 	and.w	r2, r2, #31
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f202 	lsl.w	r2, r1, r2
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0af      	beq.n	80047ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484e:	4b5b      	ldr	r3, [pc, #364]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	21f8      	movs	r1, #248	; 0xf8
 800485e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004866:	fa91 f1a1 	rbit	r1, r1
 800486a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800486e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004872:	fab1 f181 	clz	r1, r1
 8004876:	b2c9      	uxtb	r1, r1
 8004878:	408b      	lsls	r3, r1
 800487a:	4950      	ldr	r1, [pc, #320]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e06a      	b.n	8004958 <HAL_RCC_OscConfig+0x5ec>
 8004882:	2301      	movs	r3, #1
 8004884:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004894:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	461a      	mov	r2, r3
 80048aa:	2300      	movs	r3, #0
 80048ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7ff f83b 	bl	8003928 <HAL_GetTick>
 80048b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b8:	f7ff f836 	bl	8003928 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	f000 bc50 	b.w	800516e <HAL_RCC_OscConfig+0xe02>
 80048ce:	2302      	movs	r3, #2
 80048d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_RCC_OscConfig+0x592>
 80048f8:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	e013      	b.n	8004926 <HAL_RCC_OscConfig+0x5ba>
 80048fe:	2302      	movs	r3, #2
 8004900:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004910:	2302      	movs	r3, #2
 8004912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004916:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_RCC_OscConfig+0x650>)
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2202      	movs	r2, #2
 8004928:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800492c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004930:	fa92 f2a2 	rbit	r2, r2
 8004934:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004938:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800493c:	fab2 f282 	clz	r2, r2
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	f042 0220 	orr.w	r2, r2, #32
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	f002 021f 	and.w	r2, r2, #31
 800494c:	2101      	movs	r1, #1
 800494e:	fa01 f202 	lsl.w	r2, r1, r2
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1af      	bne.n	80048b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80da 	beq.w	8004b1c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d069      	beq.n	8004a46 <HAL_RCC_OscConfig+0x6da>
 8004972:	2301      	movs	r3, #1
 8004974:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_OscConfig+0x654>)
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	461a      	mov	r2, r3
 8004998:	2301      	movs	r3, #1
 800499a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499c:	f7fe ffc4 	bl	8003928 <HAL_GetTick>
 80049a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a4:	e00e      	b.n	80049c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fe ffbf 	bl	8003928 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d906      	bls.n	80049c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e3d9      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	10908120 	.word	0x10908120
 80049c4:	2302      	movs	r3, #2
 80049c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80049da:	2202      	movs	r2, #2
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	fa93 f2a3 	rbit	r2, r3
 80049e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049f2:	2202      	movs	r2, #2
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	fa93 f2a3 	rbit	r2, r3
 8004a00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4ba5      	ldr	r3, [pc, #660]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004a0e:	2102      	movs	r1, #2
 8004a10:	6019      	str	r1, [r3, #0]
 8004a12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	fa93 f1a3 	rbit	r1, r3
 8004a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004a20:	6019      	str	r1, [r3, #0]
  return result;
 8004a22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	fab3 f383 	clz	r3, r3
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2101      	movs	r1, #1
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0b0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x63a>
 8004a44:	e06a      	b.n	8004b1c <HAL_RCC_OscConfig+0x7b0>
 8004a46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	fa93 f2a3 	rbit	r2, r3
 8004a58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a5c:	601a      	str	r2, [r3, #0]
  return result;
 8004a5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004a62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a64:	fab3 f383 	clz	r3, r3
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4b8c      	ldr	r3, [pc, #560]	; (8004ca0 <HAL_RCC_OscConfig+0x934>)
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	461a      	mov	r2, r3
 8004a74:	2300      	movs	r3, #0
 8004a76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a78:	f7fe ff56 	bl	8003928 <HAL_GetTick>
 8004a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a80:	e009      	b.n	8004a96 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a82:	f7fe ff51 	bl	8003928 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e36b      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 8004a96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	fa93 f2a3 	rbit	r2, r3
 8004aa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	fa93 f2a3 	rbit	r2, r3
 8004ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004aca:	2202      	movs	r2, #2
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	fa93 f2a3 	rbit	r2, r3
 8004ad8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004adc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ade:	4b6f      	ldr	r3, [pc, #444]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ae2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	6019      	str	r1, [r3, #0]
 8004aea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	fa93 f1a3 	rbit	r1, r3
 8004af4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004af8:	6019      	str	r1, [r3, #0]
  return result;
 8004afa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	fab3 f383 	clz	r3, r3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f303 	lsl.w	r3, r1, r3
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1b2      	bne.n	8004a82 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8158 	beq.w	8004ddc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b5a      	ldr	r3, [pc, #360]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d112      	bne.n	8004b64 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4b57      	ldr	r3, [pc, #348]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4a56      	ldr	r2, [pc, #344]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b48:	61d3      	str	r3, [r2, #28]
 8004b4a:	4b54      	ldr	r3, [pc, #336]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <HAL_RCC_OscConfig+0x938>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11a      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <HAL_RCC_OscConfig+0x938>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <HAL_RCC_OscConfig+0x938>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7c:	f7fe fed4 	bl	8003928 <HAL_GetTick>
 8004b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	e009      	b.n	8004b9a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b86:	f7fe fecf 	bl	8003928 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e2e9      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <HAL_RCC_OscConfig+0x938>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ef      	beq.n	8004b86 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x852>
 8004bb0:	4b3a      	ldr	r3, [pc, #232]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6213      	str	r3, [r2, #32]
 8004bbc:	e02f      	b.n	8004c1e <HAL_RCC_OscConfig+0x8b2>
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10c      	bne.n	8004be2 <HAL_RCC_OscConfig+0x876>
 8004bc8:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4a33      	ldr	r2, [pc, #204]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	6213      	str	r3, [r2, #32]
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a30      	ldr	r2, [pc, #192]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	e01d      	b.n	8004c1e <HAL_RCC_OscConfig+0x8b2>
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d10c      	bne.n	8004c06 <HAL_RCC_OscConfig+0x89a>
 8004bec:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bf2:	f043 0304 	orr.w	r3, r3, #4
 8004bf6:	6213      	str	r3, [r2, #32]
 8004bf8:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6213      	str	r3, [r2, #32]
 8004c04:	e00b      	b.n	8004c1e <HAL_RCC_OscConfig+0x8b2>
 8004c06:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	6213      	str	r3, [r2, #32]
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d06b      	beq.n	8004d00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c28:	f7fe fe7e 	bl	8003928 <HAL_GetTick>
 8004c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	e00b      	b.n	8004c4a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fe fe79 	bl	8003928 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e291      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 8004c4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004c4e:	2202      	movs	r2, #2
 8004c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	fa93 f2a3 	rbit	r2, r3
 8004c5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c66:	2202      	movs	r2, #2
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	fa93 f2a3 	rbit	r2, r3
 8004c74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c78:	601a      	str	r2, [r3, #0]
  return result;
 8004c7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d109      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x93c>
 8004c94:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <HAL_RCC_OscConfig+0x930>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	e014      	b.n	8004cc4 <HAL_RCC_OscConfig+0x958>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	10908120 	.word	0x10908120
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cac:	2202      	movs	r2, #2
 8004cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	fa93 f2a3 	rbit	r2, r3
 8004cba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	4bbb      	ldr	r3, [pc, #748]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004cc8:	2102      	movs	r1, #2
 8004cca:	6011      	str	r1, [r2, #0]
 8004ccc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	fa92 f1a2 	rbit	r1, r2
 8004cd6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004cda:	6011      	str	r1, [r2, #0]
  return result;
 8004cdc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	fab2 f282 	clz	r2, r2
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	f002 021f 	and.w	r2, r2, #31
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d099      	beq.n	8004c32 <HAL_RCC_OscConfig+0x8c6>
 8004cfe:	e063      	b.n	8004dc8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d00:	f7fe fe12 	bl	8003928 <HAL_GetTick>
 8004d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d08:	e00b      	b.n	8004d22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fe fe0d 	bl	8003928 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e225      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 8004d22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004d26:	2202      	movs	r2, #2
 8004d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	fa93 f2a3 	rbit	r2, r3
 8004d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d3e:	2202      	movs	r2, #2
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	fa93 f2a3 	rbit	r2, r3
 8004d4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d50:	601a      	str	r2, [r3, #0]
  return result;
 8004d52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_OscConfig+0xa06>
 8004d6c:	4b90      	ldr	r3, [pc, #576]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	e00d      	b.n	8004d8e <HAL_RCC_OscConfig+0xa22>
 8004d72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004d76:	2202      	movs	r2, #2
 8004d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	fa93 f2a3 	rbit	r2, r3
 8004d84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	4b89      	ldr	r3, [pc, #548]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d92:	2102      	movs	r1, #2
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	fa92 f1a2 	rbit	r1, r2
 8004da0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004da4:	6011      	str	r1, [r2, #0]
  return result;
 8004da6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	fab2 f282 	clz	r2, r2
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	f002 021f 	and.w	r2, r2, #31
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1a0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd0:	4b77      	ldr	r3, [pc, #476]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	4a76      	ldr	r2, [pc, #472]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ddc:	1d3b      	adds	r3, r7, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 81c2 	beq.w	800516c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de8:	4b71      	ldr	r3, [pc, #452]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	f000 819c 	beq.w	800512e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	f040 8114 	bne.w	800502a <HAL_RCC_OscConfig+0xcbe>
 8004e02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e1a:	601a      	str	r2, [r3, #0]
  return result;
 8004e1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	461a      	mov	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e38:	f7fe fd76 	bl	8003928 <HAL_GetTick>
 8004e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e40:	e009      	b.n	8004e56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fe fd71 	bl	8003928 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e18b      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 8004e56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	fa93 f2a3 	rbit	r2, r3
 8004e6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e6e:	601a      	str	r2, [r3, #0]
  return result;
 8004e70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004e74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d102      	bne.n	8004e90 <HAL_RCC_OscConfig+0xb24>
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	e01b      	b.n	8004ec8 <HAL_RCC_OscConfig+0xb5c>
 8004e90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	fa93 f2a3 	rbit	r2, r3
 8004ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	fa93 f2a3 	rbit	r2, r3
 8004ebe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ecc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	fa92 f1a2 	rbit	r1, r2
 8004edc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ee0:	6011      	str	r1, [r2, #0]
  return result;
 8004ee2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	fab2 f282 	clz	r2, r2
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	f042 0220 	orr.w	r2, r2, #32
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	f002 021f 	and.w	r2, r2, #31
 8004ef8:	2101      	movs	r1, #1
 8004efa:	fa01 f202 	lsl.w	r2, r1, r2
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d19e      	bne.n	8004e42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f12:	1d3b      	adds	r3, r7, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	4925      	ldr	r1, [pc, #148]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	fa93 f2a3 	rbit	r2, r3
 8004f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f38:	601a      	str	r2, [r3, #0]
  return result;
 8004f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f40:	fab3 f383 	clz	r3, r3
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	461a      	mov	r2, r3
 8004f52:	2301      	movs	r3, #1
 8004f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7fe fce7 	bl	8003928 <HAL_GetTick>
 8004f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f5e:	e009      	b.n	8004f74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fce2 	bl	8003928 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0fc      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 8004f74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	fa93 f2a3 	rbit	r2, r3
 8004f88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f8c:	601a      	str	r2, [r3, #0]
  return result;
 8004f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_RCC_OscConfig+0xc48>
 8004fa8:	4b01      	ldr	r3, [pc, #4]	; (8004fb0 <HAL_RCC_OscConfig+0xc44>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	e01e      	b.n	8004fec <HAL_RCC_OscConfig+0xc80>
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fa93 f2a3 	rbit	r2, r3
 8004fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	fa93 f2a3 	rbit	r2, r3
 8004fe2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	4b63      	ldr	r3, [pc, #396]	; (8005178 <HAL_RCC_OscConfig+0xe0c>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ff4:	6011      	str	r1, [r2, #0]
 8004ff6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	fa92 f1a2 	rbit	r1, r2
 8005000:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005004:	6011      	str	r1, [r2, #0]
  return result;
 8005006:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	fab2 f282 	clz	r2, r2
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	f042 0220 	orr.w	r2, r2, #32
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f002 021f 	and.w	r2, r2, #31
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f202 	lsl.w	r2, r1, r2
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d09b      	beq.n	8004f60 <HAL_RCC_OscConfig+0xbf4>
 8005028:	e0a0      	b.n	800516c <HAL_RCC_OscConfig+0xe00>
 800502a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800502e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	fa93 f2a3 	rbit	r2, r3
 800503e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005042:	601a      	str	r2, [r3, #0]
  return result;
 8005044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005048:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	461a      	mov	r2, r3
 800505c:	2300      	movs	r3, #0
 800505e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe fc62 	bl	8003928 <HAL_GetTick>
 8005064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005068:	e009      	b.n	800507e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fe fc5d 	bl	8003928 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e077      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
 800507e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	fa93 f2a3 	rbit	r2, r3
 8005092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005096:	601a      	str	r2, [r3, #0]
  return result;
 8005098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_RCC_OscConfig+0xd4c>
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_RCC_OscConfig+0xe0c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	e01b      	b.n	80050f0 <HAL_RCC_OscConfig+0xd84>
 80050b8:	f107 0320 	add.w	r3, r7, #32
 80050bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	f107 0320 	add.w	r3, r7, #32
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	fa93 f2a3 	rbit	r2, r3
 80050cc:	f107 031c 	add.w	r3, r7, #28
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f107 0318 	add.w	r3, r7, #24
 80050d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f107 0318 	add.w	r3, r7, #24
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	fa93 f2a3 	rbit	r2, r3
 80050e6:	f107 0314 	add.w	r3, r7, #20
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <HAL_RCC_OscConfig+0xe0c>)
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f107 0210 	add.w	r2, r7, #16
 80050f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	f107 0210 	add.w	r2, r7, #16
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	fa92 f1a2 	rbit	r1, r2
 8005104:	f107 020c 	add.w	r2, r7, #12
 8005108:	6011      	str	r1, [r2, #0]
  return result;
 800510a:	f107 020c 	add.w	r2, r7, #12
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	fab2 f282 	clz	r2, r2
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	f042 0220 	orr.w	r2, r2, #32
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	f002 021f 	and.w	r2, r2, #31
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f202 	lsl.w	r2, r1, r2
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d19e      	bne.n	800506a <HAL_RCC_OscConfig+0xcfe>
 800512c:	e01e      	b.n	800516c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e018      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_RCC_OscConfig+0xe0c>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005144:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	429a      	cmp	r2, r3
 8005154:	d108      	bne.n	8005168 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005156:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800515a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000

0800517c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b09e      	sub	sp, #120	; 0x78
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e162      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005194:	4b90      	ldr	r3, [pc, #576]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d910      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b8d      	ldr	r3, [pc, #564]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 0207 	bic.w	r2, r3, #7
 80051aa:	498b      	ldr	r1, [pc, #556]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e14a      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d0:	4b82      	ldr	r3, [pc, #520]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	497f      	ldr	r1, [pc, #508]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 80dc 	beq.w	80053a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d13c      	bne.n	8005272 <HAL_RCC_ClockConfig+0xf6>
 80051f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005200:	fa93 f3a3 	rbit	r3, r3
 8005204:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005208:	fab3 f383 	clz	r3, r3
 800520c:	b2db      	uxtb	r3, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d102      	bne.n	8005222 <HAL_RCC_ClockConfig+0xa6>
 800521c:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	e00f      	b.n	8005242 <HAL_RCC_ClockConfig+0xc6>
 8005222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005226:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	667b      	str	r3, [r7, #100]	; 0x64
 8005230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005234:	663b      	str	r3, [r7, #96]	; 0x60
 8005236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005238:	fa93 f3a3 	rbit	r3, r3
 800523c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800523e:	4b67      	ldr	r3, [pc, #412]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005246:	65ba      	str	r2, [r7, #88]	; 0x58
 8005248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800524a:	fa92 f2a2 	rbit	r2, r2
 800524e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005250:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005252:	fab2 f282 	clz	r2, r2
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	f042 0220 	orr.w	r2, r2, #32
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	f002 021f 	and.w	r2, r2, #31
 8005262:	2101      	movs	r1, #1
 8005264:	fa01 f202 	lsl.w	r2, r1, r2
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d17b      	bne.n	8005366 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0f3      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d13c      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x178>
 800527a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d102      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x128>
 800529e:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	e00f      	b.n	80052c4 <HAL_RCC_ClockConfig+0x148>
 80052a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ac:	fa93 f3a3 	rbit	r3, r3
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
 80052b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
 80052b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c0:	4b46      	ldr	r3, [pc, #280]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80052ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052cc:	fa92 f2a2 	rbit	r2, r2
 80052d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d4:	fab2 f282 	clz	r2, r2
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	f042 0220 	orr.w	r2, r2, #32
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f002 021f 	and.w	r2, r2, #31
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d13a      	bne.n	8005366 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0b2      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
 80052f4:	2302      	movs	r3, #2
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	fa93 f3a3 	rbit	r3, r3
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005302:	fab3 f383 	clz	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	d102      	bne.n	800531c <HAL_RCC_ClockConfig+0x1a0>
 8005316:	4b31      	ldr	r3, [pc, #196]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	e00d      	b.n	8005338 <HAL_RCC_ClockConfig+0x1bc>
 800531c:	2302      	movs	r3, #2
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	fa93 f3a3 	rbit	r3, r3
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
 8005328:	2302      	movs	r3, #2
 800532a:	623b      	str	r3, [r7, #32]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	fa93 f3a3 	rbit	r3, r3
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	4b29      	ldr	r3, [pc, #164]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2202      	movs	r2, #2
 800533a:	61ba      	str	r2, [r7, #24]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	fa92 f2a2 	rbit	r2, r2
 8005342:	617a      	str	r2, [r7, #20]
  return result;
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	fab2 f282 	clz	r2, r2
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	f042 0220 	orr.w	r2, r2, #32
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	f002 021f 	and.w	r2, r2, #31
 8005356:	2101      	movs	r1, #1
 8005358:	fa01 f202 	lsl.w	r2, r1, r2
 800535c:	4013      	ands	r3, r2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e079      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	491a      	ldr	r1, [pc, #104]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fe fad6 	bl	8003928 <HAL_GetTick>
 800537c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fe fad2 	bl	8003928 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e061      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_RCC_ClockConfig+0x260>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d214      	bcs.n	80053e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 0207 	bic.w	r2, r3, #7
 80053be:	4906      	ldr	r1, [pc, #24]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <HAL_RCC_ClockConfig+0x25c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e040      	b.n	800545a <HAL_RCC_ClockConfig+0x2de>
 80053d8:	40022000 	.word	0x40022000
 80053dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <HAL_RCC_ClockConfig+0x2e8>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	491a      	ldr	r1, [pc, #104]	; (8005464 <HAL_RCC_ClockConfig+0x2e8>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540a:	4b16      	ldr	r3, [pc, #88]	; (8005464 <HAL_RCC_ClockConfig+0x2e8>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4912      	ldr	r1, [pc, #72]	; (8005464 <HAL_RCC_ClockConfig+0x2e8>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800541e:	f000 f829 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8005422:	4601      	mov	r1, r0
 8005424:	4b0f      	ldr	r3, [pc, #60]	; (8005464 <HAL_RCC_ClockConfig+0x2e8>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542c:	22f0      	movs	r2, #240	; 0xf0
 800542e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	fa92 f2a2 	rbit	r2, r2
 8005436:	60fa      	str	r2, [r7, #12]
  return result;
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	fab2 f282 	clz	r2, r2
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	40d3      	lsrs	r3, r2
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x2ec>)
 8005444:	5cd3      	ldrb	r3, [r2, r3]
 8005446:	fa21 f303 	lsr.w	r3, r1, r3
 800544a:	4a08      	ldr	r2, [pc, #32]	; (800546c <HAL_RCC_ClockConfig+0x2f0>)
 800544c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800544e:	4b08      	ldr	r3, [pc, #32]	; (8005470 <HAL_RCC_ClockConfig+0x2f4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fa24 	bl	80038a0 <HAL_InitTick>
  
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3778      	adds	r7, #120	; 0x78
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	08009874 	.word	0x08009874
 800546c:	200001a4 	.word	0x200001a4
 8005470:	200001a8 	.word	0x200001a8

08005474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b08b      	sub	sp, #44	; 0x2c
 8005478:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800548e:	4b29      	ldr	r3, [pc, #164]	; (8005534 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b04      	cmp	r3, #4
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x30>
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x36>
 80054a2:	e03c      	b.n	800551e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054a6:	623b      	str	r3, [r7, #32]
      break;
 80054a8:	e03c      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80054b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80054b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	fa92 f2a2 	rbit	r2, r2
 80054bc:	607a      	str	r2, [r7, #4]
  return result;
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	fab2 f282 	clz	r2, r2
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	40d3      	lsrs	r3, r2
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <HAL_RCC_GetSysClockFreq+0xc8>)
 80054ca:	5cd3      	ldrb	r3, [r2, r3]
 80054cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80054ce:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	220f      	movs	r2, #15
 80054d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	fa92 f2a2 	rbit	r2, r2
 80054e0:	60fa      	str	r2, [r7, #12]
  return result;
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	fab2 f282 	clz	r2, r2
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	40d3      	lsrs	r3, r2
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054ee:	5cd3      	ldrb	r3, [r2, r3]
 80054f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054fc:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	fbb2 f2f3 	udiv	r2, r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	e004      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	623b      	str	r3, [r7, #32]
      break;
 800551c:	e002      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005520:	623b      	str	r3, [r7, #32]
      break;
 8005522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005524:	6a3b      	ldr	r3, [r7, #32]
}
 8005526:	4618      	mov	r0, r3
 8005528:	372c      	adds	r7, #44	; 0x2c
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	007a1200 	.word	0x007a1200
 800553c:	0800988c 	.word	0x0800988c
 8005540:	0800989c 	.word	0x0800989c
 8005544:	003d0900 	.word	0x003d0900

08005548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <HAL_RCC_GetHCLKFreq+0x14>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	200001a4 	.word	0x200001a4

08005560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005566:	f7ff ffef 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 800556a:	4601      	mov	r1, r0
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005574:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005578:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	fa92 f2a2 	rbit	r2, r2
 8005580:	603a      	str	r2, [r7, #0]
  return result;
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	fab2 f282 	clz	r2, r2
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	40d3      	lsrs	r3, r2
 800558c:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800558e:	5cd3      	ldrb	r3, [r2, r3]
 8005590:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021000 	.word	0x40021000
 80055a0:	08009884 	.word	0x08009884

080055a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80055aa:	f7ff ffcd 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 80055ae:	4601      	mov	r1, r0
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80055b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80055bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	fa92 f2a2 	rbit	r2, r2
 80055c4:	603a      	str	r2, [r7, #0]
  return result;
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	fab2 f282 	clz	r2, r2
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	40d3      	lsrs	r3, r2
 80055d0:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055d2:	5cd3      	ldrb	r3, [r2, r3]
 80055d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000
 80055e4:	08009884 	.word	0x08009884

080055e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b092      	sub	sp, #72	; 0x48
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80d4 	beq.w	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560c:	4b4e      	ldr	r3, [pc, #312]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10e      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	4b4b      	ldr	r3, [pc, #300]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4a4a      	ldr	r2, [pc, #296]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	61d3      	str	r3, [r2, #28]
 8005624:	4b48      	ldr	r3, [pc, #288]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005636:	4b45      	ldr	r3, [pc, #276]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d118      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005642:	4b42      	ldr	r3, [pc, #264]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a41      	ldr	r2, [pc, #260]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564e:	f7fe f96b 	bl	8003928 <HAL_GetTick>
 8005652:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005654:	e008      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005656:	f7fe f967 	bl	8003928 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b64      	cmp	r3, #100	; 0x64
 8005662:	d901      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e169      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005668:	4b38      	ldr	r3, [pc, #224]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005674:	4b34      	ldr	r3, [pc, #208]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8084 	beq.w	800578e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005690:	429a      	cmp	r2, r3
 8005692:	d07c      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	fa93 f3a3 	rbit	r3, r3
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	4b26      	ldr	r3, [pc, #152]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	461a      	mov	r2, r3
 80056be:	2301      	movs	r3, #1
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d04b      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7fe f917 	bl	8003928 <HAL_GetTick>
 80056fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	e00a      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fe:	f7fe f913 	bl	8003928 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e113      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005714:	2302      	movs	r3, #2
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	2302      	movs	r3, #2
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	fa93 f3a3 	rbit	r3, r3
 800572a:	61fb      	str	r3, [r7, #28]
  return result;
 800572c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800572e:	fab3 f383 	clz	r3, r3
 8005732:	b2db      	uxtb	r3, r3
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d108      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005742:	4b01      	ldr	r3, [pc, #4]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	e00d      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005748:	40021000 	.word	0x40021000
 800574c:	40007000 	.word	0x40007000
 8005750:	10908100 	.word	0x10908100
 8005754:	2302      	movs	r3, #2
 8005756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	fa93 f3a3 	rbit	r3, r3
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2202      	movs	r2, #2
 8005766:	613a      	str	r2, [r7, #16]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	fa92 f2a2 	rbit	r2, r2
 800576e:	60fa      	str	r2, [r7, #12]
  return result;
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	fab2 f282 	clz	r2, r2
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	f002 021f 	and.w	r2, r2, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f202 	lsl.w	r2, r1, r2
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0b7      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800578e:	4b6d      	ldr	r3, [pc, #436]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	496a      	ldr	r1, [pc, #424]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b66      	ldr	r3, [pc, #408]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4a65      	ldr	r2, [pc, #404]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c0:	4b60      	ldr	r3, [pc, #384]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	f023 0203 	bic.w	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	495d      	ldr	r1, [pc, #372]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057de:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	4956      	ldr	r1, [pc, #344]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057fc:	4b51      	ldr	r3, [pc, #324]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	494e      	ldr	r1, [pc, #312]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580a:	4313      	orrs	r3, r2
 800580c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800581a:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	f023 0210 	bic.w	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	4947      	ldr	r1, [pc, #284]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	493f      	ldr	r1, [pc, #252]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005856:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	f023 0220 	bic.w	r2, r3, #32
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	4938      	ldr	r1, [pc, #224]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005864:	4313      	orrs	r3, r2
 8005866:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005874:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	4930      	ldr	r1, [pc, #192]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005892:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	4929      	ldr	r1, [pc, #164]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058b0:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4921      	ldr	r1, [pc, #132]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	491a      	ldr	r1, [pc, #104]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	4912      	ldr	r1, [pc, #72]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d008      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800590a:	4b0e      	ldr	r3, [pc, #56]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	490b      	ldr	r1, [pc, #44]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005918:	4313      	orrs	r3, r2
 800591a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	4903      	ldr	r1, [pc, #12]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005936:	4313      	orrs	r3, r2
 8005938:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3748      	adds	r7, #72	; 0x48
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021000 	.word	0x40021000

08005948 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e083      	b.n	8005a62 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7f5b      	ldrb	r3, [r3, #29]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fb ff56 	bl	800181c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	22ca      	movs	r2, #202	; 0xca
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2253      	movs	r2, #83	; 0x53
 8005984:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 faa8 	bl	8005edc <RTC_EnterInitMode>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	22ff      	movs	r2, #255	; 0xff
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e05e      	b.n	8005a62 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6899      	ldr	r1, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68d2      	ldr	r2, [r2, #12]
 80059de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6919      	ldr	r1, [r3, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	041a      	lsls	r2, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10e      	bne.n	8005a30 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa3a 	bl	8005e8c <HAL_RTC_WaitForSynchro>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e018      	b.n	8005a62 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	22ff      	movs	r2, #255	; 0xff
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a6a:	b590      	push	{r4, r7, lr}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	7f1b      	ldrb	r3, [r3, #28]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_RTC_SetTime+0x1c>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e0aa      	b.n	8005bdc <HAL_RTC_SetTime+0x172>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d126      	bne.n	8005ae6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fa3f 	bl	8005f34 <RTC_ByteToBcd2>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fa38 	bl	8005f34 <RTC_ByteToBcd2>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ac8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	789b      	ldrb	r3, [r3, #2]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fa30 	bl	8005f34 <RTC_ByteToBcd2>
 8005ad4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ad6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	78db      	ldrb	r3, [r3, #3]
 8005ade:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e018      	b.n	8005b18 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b06:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b0c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	22ca      	movs	r2, #202	; 0xca
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2253      	movs	r2, #83	; 0x53
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f9d7 	bl	8005edc <RTC_EnterInitMode>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e047      	b.n	8005bdc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b5a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b92:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d111      	bne.n	8005bc6 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f972 	bl	8005e8c <HAL_RTC_WaitForSynchro>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e00a      	b.n	8005bdc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	22ff      	movs	r2, #255	; 0xff
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd90      	pop	{r4, r7, pc}

08005be4 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11a      	bne.n	8005c96 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f983 	bl	8005f70 <RTC_Bcd2ToByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f97a 	bl	8005f70 <RTC_Bcd2ToByte>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	789b      	ldrb	r3, [r3, #2]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f971 	bl	8005f70 <RTC_Bcd2ToByte>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	461a      	mov	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	7f1b      	ldrb	r3, [r3, #28]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_RTC_SetDate+0x1c>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e094      	b.n	8005de6 <HAL_RTC_SetDate+0x146>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10e      	bne.n	8005cec <HAL_RTC_SetDate+0x4c>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	330a      	adds	r3, #10
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11c      	bne.n	8005d2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	78db      	ldrb	r3, [r3, #3]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f91c 	bl	8005f34 <RTC_ByteToBcd2>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f915 	bl	8005f34 <RTC_ByteToBcd2>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	789b      	ldrb	r3, [r3, #2]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f90d 	bl	8005f34 <RTC_ByteToBcd2>
 8005d1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e00e      	b.n	8005d4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d38:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	22ca      	movs	r2, #202	; 0xca
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2253      	movs	r2, #83	; 0x53
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f8be 	bl	8005edc <RTC_EnterInitMode>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2204      	movs	r2, #4
 8005d72:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e033      	b.n	8005de6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d111      	bne.n	8005dd0 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f86d 	bl	8005e8c <HAL_RTC_WaitForSynchro>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	22ff      	movs	r2, #255	; 0xff
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e00a      	b.n	8005de6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	22ff      	movs	r2, #255	; 0xff
 8005dd6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005de4:	2300      	movs	r3, #0
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}

08005dee <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	0c1b      	lsrs	r3, r3, #16
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	0b5b      	lsrs	r3, r3, #13
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11a      	bne.n	8005e82 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	78db      	ldrb	r3, [r3, #3]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 f88d 	bl	8005f70 <RTC_Bcd2ToByte>
 8005e56:	4603      	mov	r3, r0
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f884 	bl	8005f70 <RTC_Bcd2ToByte>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	789b      	ldrb	r3, [r3, #2]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f87b 	bl	8005f70 <RTC_Bcd2ToByte>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ea6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ea8:	f7fd fd3e 	bl	8003928 <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005eae:	e009      	b.n	8005ec4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005eb0:	f7fd fd3a 	bl	8003928 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e007      	b.n	8005ed4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ee      	beq.n	8005eb0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d119      	bne.n	8005f2a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295
 8005efe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f00:	f7fd fd12 	bl	8003928 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f06:	e009      	b.n	8005f1c <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f08:	f7fd fd0e 	bl	8003928 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f16:	d901      	bls.n	8005f1c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e007      	b.n	8005f2c <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0ee      	beq.n	8005f08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005f42:	e005      	b.n	8005f50 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	3b0a      	subs	r3, #10
 8005f4e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	d8f6      	bhi.n	8005f44 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	b2db      	uxtb	r3, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	b2db      	uxtb	r3, r3
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e09d      	b.n	80060fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fce:	d009      	beq.n	8005fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	61da      	str	r2, [r3, #28]
 8005fd6:	e005      	b.n	8005fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fc32 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006024:	d902      	bls.n	800602c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e002      	b.n	8006032 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800602c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006030:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800603a:	d007      	beq.n	800604c <HAL_SPI_Init+0xa0>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006044:	d002      	beq.n	800604c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	ea42 0103 	orr.w	r1, r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	0c1b      	lsrs	r3, r3, #16
 80060a8:	f003 0204 	and.w	r2, r3, #4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	f003 0308 	and.w	r3, r3, #8
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80060c8:	ea42 0103 	orr.w	r1, r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e049      	b.n	80061a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fb fbdf 	bl	80018ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f000 fdc7 	bl	8006cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d001      	beq.n	80061c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04a      	b.n	800625e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a21      	ldr	r2, [pc, #132]	; (800626c <HAL_TIM_Base_Start_IT+0xbc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_TIM_Base_Start_IT+0x6c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f2:	d013      	beq.n	800621c <HAL_TIM_Base_Start_IT+0x6c>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <HAL_TIM_Base_Start_IT+0xc0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_Base_Start_IT+0x6c>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <HAL_TIM_Base_Start_IT+0xc4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_TIM_Base_Start_IT+0x6c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_TIM_Base_Start_IT+0xc8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_Base_Start_IT+0x6c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a19      	ldr	r2, [pc, #100]	; (800627c <HAL_TIM_Base_Start_IT+0xcc>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d115      	bne.n	8006248 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <HAL_TIM_Base_Start_IT+0xd0>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b06      	cmp	r3, #6
 800622c:	d015      	beq.n	800625a <HAL_TIM_Base_Start_IT+0xaa>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006234:	d011      	beq.n	800625a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006246:	e008      	b.n	800625a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e000      	b.n	800625c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40013400 	.word	0x40013400
 800627c:	40014000 	.word	0x40014000
 8006280:	00010007 	.word	0x00010007

08006284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e049      	b.n	800632a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f841 	bl	8006332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 fd06 	bl	8006cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_TIM_PWM_Start+0x24>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e03c      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d109      	bne.n	8006386 <HAL_TIM_PWM_Start+0x3e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e02f      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d109      	bne.n	80063a0 <HAL_TIM_PWM_Start+0x58>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e022      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d109      	bne.n	80063ba <HAL_TIM_PWM_Start+0x72>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	e015      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_PWM_Start+0x8c>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e008      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e097      	b.n	800651e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0xb6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fc:	e023      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xc6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800640c:	e01b      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xd6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800641c:	e013      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xe6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800642c:	e00b      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b10      	cmp	r3, #16
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xf6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800643c:	e003      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f001 f840 	bl	80074d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a33      	ldr	r2, [pc, #204]	; (8006528 <HAL_TIM_PWM_Start+0x1e0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a32      	ldr	r2, [pc, #200]	; (800652c <HAL_TIM_PWM_Start+0x1e4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a30      	ldr	r2, [pc, #192]	; (8006530 <HAL_TIM_PWM_Start+0x1e8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <HAL_TIM_PWM_Start+0x1ec>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <HAL_TIM_PWM_Start+0x1f0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_TIM_PWM_Start+0x142>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <HAL_TIM_PWM_Start+0x144>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a20      	ldr	r2, [pc, #128]	; (8006528 <HAL_TIM_PWM_Start+0x1e0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d018      	beq.n	80064dc <HAL_TIM_PWM_Start+0x194>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d013      	beq.n	80064dc <HAL_TIM_PWM_Start+0x194>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a20      	ldr	r2, [pc, #128]	; (800653c <HAL_TIM_PWM_Start+0x1f4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00e      	beq.n	80064dc <HAL_TIM_PWM_Start+0x194>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <HAL_TIM_PWM_Start+0x1f8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_TIM_PWM_Start+0x194>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_TIM_PWM_Start+0x1e4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <HAL_TIM_PWM_Start+0x194>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_TIM_PWM_Start+0x1e8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d115      	bne.n	8006508 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	4b18      	ldr	r3, [pc, #96]	; (8006544 <HAL_TIM_PWM_Start+0x1fc>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b06      	cmp	r3, #6
 80064ec:	d015      	beq.n	800651a <HAL_TIM_PWM_Start+0x1d2>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f4:	d011      	beq.n	800651a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0201 	orr.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006506:	e008      	b.n	800651a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e000      	b.n	800651c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40012c00 	.word	0x40012c00
 800652c:	40013400 	.word	0x40013400
 8006530:	40014000 	.word	0x40014000
 8006534:	40014400 	.word	0x40014400
 8006538:	40014800 	.word	0x40014800
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	00010007 	.word	0x00010007

08006548 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 ffba 	bl	80074d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a3e      	ldr	r2, [pc, #248]	; (8006660 <HAL_TIM_PWM_Stop+0x118>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <HAL_TIM_PWM_Stop+0x4a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <HAL_TIM_PWM_Stop+0x11c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00e      	beq.n	8006592 <HAL_TIM_PWM_Stop+0x4a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3b      	ldr	r2, [pc, #236]	; (8006668 <HAL_TIM_PWM_Stop+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_TIM_PWM_Stop+0x4a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3a      	ldr	r2, [pc, #232]	; (800666c <HAL_TIM_PWM_Stop+0x124>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_TIM_PWM_Stop+0x4a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a38      	ldr	r2, [pc, #224]	; (8006670 <HAL_TIM_PWM_Stop+0x128>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d101      	bne.n	8006596 <HAL_TIM_PWM_Stop+0x4e>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <HAL_TIM_PWM_Stop+0x50>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a1a      	ldr	r2, [r3, #32]
 80065a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10f      	bne.n	80065cc <HAL_TIM_PWM_Stop+0x84>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	f240 4344 	movw	r3, #1092	; 0x444
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d107      	bne.n	80065cc <HAL_TIM_PWM_Stop+0x84>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6a1a      	ldr	r2, [r3, #32]
 80065d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10f      	bne.n	80065fc <HAL_TIM_PWM_Stop+0xb4>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	f240 4344 	movw	r3, #1092	; 0x444
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <HAL_TIM_PWM_Stop+0xb4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <HAL_TIM_PWM_Stop+0xc4>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800660a:	e023      	b.n	8006654 <HAL_TIM_PWM_Stop+0x10c>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b04      	cmp	r3, #4
 8006610:	d104      	bne.n	800661c <HAL_TIM_PWM_Stop+0xd4>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661a:	e01b      	b.n	8006654 <HAL_TIM_PWM_Stop+0x10c>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b08      	cmp	r3, #8
 8006620:	d104      	bne.n	800662c <HAL_TIM_PWM_Stop+0xe4>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800662a:	e013      	b.n	8006654 <HAL_TIM_PWM_Stop+0x10c>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b0c      	cmp	r3, #12
 8006630:	d104      	bne.n	800663c <HAL_TIM_PWM_Stop+0xf4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800663a:	e00b      	b.n	8006654 <HAL_TIM_PWM_Stop+0x10c>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b10      	cmp	r3, #16
 8006640:	d104      	bne.n	800664c <HAL_TIM_PWM_Stop+0x104>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800664a:	e003      	b.n	8006654 <HAL_TIM_PWM_Stop+0x10c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400
 8006670:	40014800 	.word	0x40014800

08006674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d122      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d11b      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0202 	mvn.w	r2, #2
 80066a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 faed 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fadf 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 faf0 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d122      	bne.n	8006724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d11b      	bne.n	8006724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0204 	mvn.w	r2, #4
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fac3 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fab5 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fac6 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b08      	cmp	r3, #8
 8006730:	d122      	bne.n	8006778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d11b      	bne.n	8006778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0208 	mvn.w	r2, #8
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2204      	movs	r2, #4
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa99 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa8b 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fa9c 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b10      	cmp	r3, #16
 8006784:	d122      	bne.n	80067cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b10      	cmp	r3, #16
 8006792:	d11b      	bne.n	80067cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0210 	mvn.w	r2, #16
 800679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2208      	movs	r2, #8
 80067a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa6f 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 80067b8:	e005      	b.n	80067c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fa61 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa72 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d10e      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d107      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0201 	mvn.w	r2, #1
 80067f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa3b 	bl	8006c6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d10e      	bne.n	8006824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d107      	bne.n	8006824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800681c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 ff86 	bl	8007730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006832:	d10e      	bne.n	8006852 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b80      	cmp	r3, #128	; 0x80
 8006840:	d107      	bne.n	8006852 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800684a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 ff79 	bl	8007744 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d10e      	bne.n	800687e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d107      	bne.n	800687e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa20 	bl	8006cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b20      	cmp	r3, #32
 800688a:	d10e      	bne.n	80068aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b20      	cmp	r3, #32
 8006898:	d107      	bne.n	80068aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f06f 0220 	mvn.w	r2, #32
 80068a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 ff39 	bl	800771c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0ff      	b.n	8006ad2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b14      	cmp	r3, #20
 80068de:	f200 80f0 	bhi.w	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	08006ac3 	.word	0x08006ac3
 80068f0:	08006ac3 	.word	0x08006ac3
 80068f4:	08006ac3 	.word	0x08006ac3
 80068f8:	0800697d 	.word	0x0800697d
 80068fc:	08006ac3 	.word	0x08006ac3
 8006900:	08006ac3 	.word	0x08006ac3
 8006904:	08006ac3 	.word	0x08006ac3
 8006908:	080069bf 	.word	0x080069bf
 800690c:	08006ac3 	.word	0x08006ac3
 8006910:	08006ac3 	.word	0x08006ac3
 8006914:	08006ac3 	.word	0x08006ac3
 8006918:	080069ff 	.word	0x080069ff
 800691c:	08006ac3 	.word	0x08006ac3
 8006920:	08006ac3 	.word	0x08006ac3
 8006924:	08006ac3 	.word	0x08006ac3
 8006928:	08006a41 	.word	0x08006a41
 800692c:	08006ac3 	.word	0x08006ac3
 8006930:	08006ac3 	.word	0x08006ac3
 8006934:	08006ac3 	.word	0x08006ac3
 8006938:	08006a81 	.word	0x08006a81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fa56 	bl	8006df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0208 	orr.w	r2, r2, #8
 8006956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0204 	bic.w	r2, r2, #4
 8006966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6999      	ldr	r1, [r3, #24]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691a      	ldr	r2, [r3, #16]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	619a      	str	r2, [r3, #24]
      break;
 800697a:	e0a5      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fac6 	bl	8006f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6999      	ldr	r1, [r3, #24]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	021a      	lsls	r2, r3, #8
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	619a      	str	r2, [r3, #24]
      break;
 80069bc:	e084      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fb2f 	bl	8007028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0208 	orr.w	r2, r2, #8
 80069d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0204 	bic.w	r2, r2, #4
 80069e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69d9      	ldr	r1, [r3, #28]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	61da      	str	r2, [r3, #28]
      break;
 80069fc:	e064      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fb97 	bl	8007138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69d9      	ldr	r1, [r3, #28]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	021a      	lsls	r2, r3, #8
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	61da      	str	r2, [r3, #28]
      break;
 8006a3e:	e043      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fbe0 	bl	800720c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0208 	orr.w	r2, r2, #8
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0204 	bic.w	r2, r2, #4
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a7e:	e023      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fc24 	bl	80072d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ac0:	e002      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_TIM_ConfigClockSource+0x1c>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e0b6      	b.n	8006c66 <HAL_TIM_ConfigClockSource+0x18a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b34:	d03e      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0xd8>
 8006b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3a:	f200 8087 	bhi.w	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b42:	f000 8086 	beq.w	8006c52 <HAL_TIM_ConfigClockSource+0x176>
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4a:	d87f      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b4c:	2b70      	cmp	r3, #112	; 0x70
 8006b4e:	d01a      	beq.n	8006b86 <HAL_TIM_ConfigClockSource+0xaa>
 8006b50:	2b70      	cmp	r3, #112	; 0x70
 8006b52:	d87b      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b54:	2b60      	cmp	r3, #96	; 0x60
 8006b56:	d050      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0x11e>
 8006b58:	2b60      	cmp	r3, #96	; 0x60
 8006b5a:	d877      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b5c:	2b50      	cmp	r3, #80	; 0x50
 8006b5e:	d03c      	beq.n	8006bda <HAL_TIM_ConfigClockSource+0xfe>
 8006b60:	2b50      	cmp	r3, #80	; 0x50
 8006b62:	d873      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b64:	2b40      	cmp	r3, #64	; 0x40
 8006b66:	d058      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x13e>
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d86f      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b6c:	2b30      	cmp	r3, #48	; 0x30
 8006b6e:	d064      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x15e>
 8006b70:	2b30      	cmp	r3, #48	; 0x30
 8006b72:	d86b      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d060      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x15e>
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d867      	bhi.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05c      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x15e>
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d05a      	beq.n	8006c3a <HAL_TIM_ConfigClockSource+0x15e>
 8006b84:	e062      	b.n	8006c4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6899      	ldr	r1, [r3, #8]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f000 fc7d 	bl	8007494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	609a      	str	r2, [r3, #8]
      break;
 8006bb2:	e04f      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	6899      	ldr	r1, [r3, #8]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f000 fc66 	bl	8007494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bd6:	609a      	str	r2, [r3, #8]
      break;
 8006bd8:	e03c      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6859      	ldr	r1, [r3, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f000 fbda 	bl	80073a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2150      	movs	r1, #80	; 0x50
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fc33 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8006bf8:	e02c      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6859      	ldr	r1, [r3, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f000 fbf9 	bl	80073fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2160      	movs	r1, #96	; 0x60
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fc23 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8006c18:	e01c      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6859      	ldr	r1, [r3, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f000 fbba 	bl	80073a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2140      	movs	r1, #64	; 0x40
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fc13 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8006c38:	e00c      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f000 fc0a 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8006c4a:	e003      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c50:	e000      	b.n	8006c54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a3c      	ldr	r2, [pc, #240]	; (8006dd8 <TIM_Base_SetConfig+0x104>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00f      	beq.n	8006d0c <TIM_Base_SetConfig+0x38>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d00b      	beq.n	8006d0c <TIM_Base_SetConfig+0x38>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a39      	ldr	r2, [pc, #228]	; (8006ddc <TIM_Base_SetConfig+0x108>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d007      	beq.n	8006d0c <TIM_Base_SetConfig+0x38>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a38      	ldr	r2, [pc, #224]	; (8006de0 <TIM_Base_SetConfig+0x10c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_Base_SetConfig+0x38>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a37      	ldr	r2, [pc, #220]	; (8006de4 <TIM_Base_SetConfig+0x110>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d108      	bne.n	8006d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a2d      	ldr	r2, [pc, #180]	; (8006dd8 <TIM_Base_SetConfig+0x104>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01b      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2c:	d017      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2a      	ldr	r2, [pc, #168]	; (8006ddc <TIM_Base_SetConfig+0x108>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <TIM_Base_SetConfig+0x10c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00f      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a28      	ldr	r2, [pc, #160]	; (8006de4 <TIM_Base_SetConfig+0x110>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a27      	ldr	r2, [pc, #156]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d007      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a26      	ldr	r2, [pc, #152]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_Base_SetConfig+0x8a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d108      	bne.n	8006d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <TIM_Base_SetConfig+0x104>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00f      	beq.n	8006dbc <TIM_Base_SetConfig+0xe8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <TIM_Base_SetConfig+0x110>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00b      	beq.n	8006dbc <TIM_Base_SetConfig+0xe8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a10      	ldr	r2, [pc, #64]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d007      	beq.n	8006dbc <TIM_Base_SetConfig+0xe8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0f      	ldr	r2, [pc, #60]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0xe8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a0e      	ldr	r2, [pc, #56]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40013400 	.word	0x40013400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40014400 	.word	0x40014400
 8006df0:	40014800 	.word	0x40014800

08006df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f023 0302 	bic.w	r3, r3, #2
 8006e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a2c      	ldr	r2, [pc, #176]	; (8006f00 <TIM_OC1_SetConfig+0x10c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00f      	beq.n	8006e74 <TIM_OC1_SetConfig+0x80>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a2b      	ldr	r2, [pc, #172]	; (8006f04 <TIM_OC1_SetConfig+0x110>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <TIM_OC1_SetConfig+0x80>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a2a      	ldr	r2, [pc, #168]	; (8006f08 <TIM_OC1_SetConfig+0x114>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_OC1_SetConfig+0x80>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a29      	ldr	r2, [pc, #164]	; (8006f0c <TIM_OC1_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_OC1_SetConfig+0x80>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a28      	ldr	r2, [pc, #160]	; (8006f10 <TIM_OC1_SetConfig+0x11c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d10c      	bne.n	8006e8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0308 	bic.w	r3, r3, #8
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1b      	ldr	r2, [pc, #108]	; (8006f00 <TIM_OC1_SetConfig+0x10c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00f      	beq.n	8006eb6 <TIM_OC1_SetConfig+0xc2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <TIM_OC1_SetConfig+0x110>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_OC1_SetConfig+0xc2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <TIM_OC1_SetConfig+0x114>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <TIM_OC1_SetConfig+0xc2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <TIM_OC1_SetConfig+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC1_SetConfig+0xc2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <TIM_OC1_SetConfig+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d111      	bne.n	8006eda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	621a      	str	r2, [r3, #32]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40013400 	.word	0x40013400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800

08006f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0210 	bic.w	r2, r3, #16
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0320 	bic.w	r3, r3, #32
 8006f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a28      	ldr	r2, [pc, #160]	; (8007014 <TIM_OC2_SetConfig+0x100>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC2_SetConfig+0x6c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a27      	ldr	r2, [pc, #156]	; (8007018 <TIM_OC2_SetConfig+0x104>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d10d      	bne.n	8006f9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <TIM_OC2_SetConfig+0x100>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_OC2_SetConfig+0xb0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1c      	ldr	r2, [pc, #112]	; (8007018 <TIM_OC2_SetConfig+0x104>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00b      	beq.n	8006fc4 <TIM_OC2_SetConfig+0xb0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1b      	ldr	r2, [pc, #108]	; (800701c <TIM_OC2_SetConfig+0x108>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_OC2_SetConfig+0xb0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1a      	ldr	r2, [pc, #104]	; (8007020 <TIM_OC2_SetConfig+0x10c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC2_SetConfig+0xb0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a19      	ldr	r2, [pc, #100]	; (8007024 <TIM_OC2_SetConfig+0x110>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d113      	bne.n	8006fec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fd2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40012c00 	.word	0x40012c00
 8007018:	40013400 	.word	0x40013400
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800

08007028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a27      	ldr	r2, [pc, #156]	; (8007124 <TIM_OC3_SetConfig+0xfc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_OC3_SetConfig+0x6a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a26      	ldr	r2, [pc, #152]	; (8007128 <TIM_OC3_SetConfig+0x100>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d10d      	bne.n	80070ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <TIM_OC3_SetConfig+0xfc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00f      	beq.n	80070d6 <TIM_OC3_SetConfig+0xae>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <TIM_OC3_SetConfig+0x100>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00b      	beq.n	80070d6 <TIM_OC3_SetConfig+0xae>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a1a      	ldr	r2, [pc, #104]	; (800712c <TIM_OC3_SetConfig+0x104>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d007      	beq.n	80070d6 <TIM_OC3_SetConfig+0xae>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a19      	ldr	r2, [pc, #100]	; (8007130 <TIM_OC3_SetConfig+0x108>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_OC3_SetConfig+0xae>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a18      	ldr	r2, [pc, #96]	; (8007134 <TIM_OC3_SetConfig+0x10c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d113      	bne.n	80070fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	621a      	str	r2, [r3, #32]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40013400 	.word	0x40013400
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800

08007138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <TIM_OC4_SetConfig+0xc0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_OC4_SetConfig+0x84>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <TIM_OC4_SetConfig+0xc4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_OC4_SetConfig+0x84>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a16      	ldr	r2, [pc, #88]	; (8007200 <TIM_OC4_SetConfig+0xc8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_OC4_SetConfig+0x84>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a15      	ldr	r2, [pc, #84]	; (8007204 <TIM_OC4_SetConfig+0xcc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_OC4_SetConfig+0x84>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a14      	ldr	r2, [pc, #80]	; (8007208 <TIM_OC4_SetConfig+0xd0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d109      	bne.n	80071d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	019b      	lsls	r3, r3, #6
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40012c00 	.word	0x40012c00
 80071fc:	40013400 	.word	0x40013400
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400
 8007208:	40014800 	.word	0x40014800

0800720c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007250:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a17      	ldr	r2, [pc, #92]	; (80072c0 <TIM_OC5_SetConfig+0xb4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00f      	beq.n	8007286 <TIM_OC5_SetConfig+0x7a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <TIM_OC5_SetConfig+0xb8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00b      	beq.n	8007286 <TIM_OC5_SetConfig+0x7a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <TIM_OC5_SetConfig+0xbc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d007      	beq.n	8007286 <TIM_OC5_SetConfig+0x7a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a14      	ldr	r2, [pc, #80]	; (80072cc <TIM_OC5_SetConfig+0xc0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_OC5_SetConfig+0x7a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <TIM_OC5_SetConfig+0xc4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d109      	bne.n	800729a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	621a      	str	r2, [r3, #32]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40012c00 	.word	0x40012c00
 80072c4:	40013400 	.word	0x40013400
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40014400 	.word	0x40014400
 80072d0:	40014800 	.word	0x40014800

080072d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800731a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	051b      	lsls	r3, r3, #20
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a18      	ldr	r2, [pc, #96]	; (800738c <TIM_OC6_SetConfig+0xb8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00f      	beq.n	8007350 <TIM_OC6_SetConfig+0x7c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a17      	ldr	r2, [pc, #92]	; (8007390 <TIM_OC6_SetConfig+0xbc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00b      	beq.n	8007350 <TIM_OC6_SetConfig+0x7c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a16      	ldr	r2, [pc, #88]	; (8007394 <TIM_OC6_SetConfig+0xc0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d007      	beq.n	8007350 <TIM_OC6_SetConfig+0x7c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a15      	ldr	r2, [pc, #84]	; (8007398 <TIM_OC6_SetConfig+0xc4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_OC6_SetConfig+0x7c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a14      	ldr	r2, [pc, #80]	; (800739c <TIM_OC6_SetConfig+0xc8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d109      	bne.n	8007364 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007356:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	029b      	lsls	r3, r3, #10
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40013400 	.word	0x40013400
 8007394:	40014000 	.word	0x40014000
 8007398:	40014400 	.word	0x40014400
 800739c:	40014800 	.word	0x40014800

080073a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f023 0201 	bic.w	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f023 030a 	bic.w	r3, r3, #10
 80073dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f023 0210 	bic.w	r2, r3, #16
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800743a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	f043 0307 	orr.w	r3, r3, #7
 8007480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	609a      	str	r2, [r3, #8]
}
 80074c8:	bf00      	nop
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2201      	movs	r2, #1
 80074e8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	43db      	mvns	r3, r3
 80074f6:	401a      	ands	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	431a      	orrs	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e063      	b.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a2b      	ldr	r2, [pc, #172]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d004      	beq.n	800756c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007584:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4313      	orrs	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075aa:	d013      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a17      	ldr	r2, [pc, #92]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a12      	ldr	r2, [pc, #72]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a13      	ldr	r2, [pc, #76]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d10c      	bne.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40012c00 	.word	0x40012c00
 8007610:	40013400 	.word	0x40013400
 8007614:	40000400 	.word	0x40000400
 8007618:	40000800 	.word	0x40000800
 800761c:	40014000 	.word	0x40014000

08007620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007638:	2302      	movs	r3, #2
 800763a:	e065      	b.n	8007708 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a16      	ldr	r2, [pc, #88]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a14      	ldr	r2, [pc, #80]	; (8007718 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d115      	bne.n	80076f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	051b      	lsls	r3, r3, #20
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40013400 	.word	0x40013400

0800771c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e040      	b.n	80077ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fa f98c 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f97e 	bl	8007a98 <UART_SetConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e022      	b.n	80077ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fb46 	bl	8007e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fbcd 	bl	8007f84 <UART_CheckIdleState>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4613      	mov	r3, r2
 8007802:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007808:	2b20      	cmp	r3, #32
 800780a:	f040 8082 	bne.w	8007912 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_UART_Transmit+0x26>
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e07a      	b.n	8007914 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_UART_Transmit+0x38>
 8007828:	2302      	movs	r3, #2
 800782a:	e073      	b.n	8007914 <HAL_UART_Transmit+0x120>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2221      	movs	r2, #33	; 0x21
 8007840:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007842:	f7fc f871 	bl	8003928 <HAL_GetTick>
 8007846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	88fa      	ldrh	r2, [r7, #6]
 8007854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d108      	bne.n	8007874 <HAL_UART_Transmit+0x80>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	e003      	b.n	800787c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007884:	e02d      	b.n	80078e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2180      	movs	r1, #128	; 0x80
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fbc0 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e039      	b.n	8007914 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	881a      	ldrh	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b2:	b292      	uxth	r2, r2
 80078b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	3302      	adds	r3, #2
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e008      	b.n	80078d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	b292      	uxth	r2, r2
 80078c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3301      	adds	r3, #1
 80078ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1cb      	bne.n	8007886 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2140      	movs	r1, #64	; 0x40
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fb8c 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e005      	b.n	8007914 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3720      	adds	r7, #32
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007930:	2b20      	cmp	r3, #32
 8007932:	f040 80ac 	bne.w	8007a8e <HAL_UART_Receive+0x172>
  {
    if ((pData == NULL) || (Size == 0U))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <HAL_UART_Receive+0x26>
 800793c:	88fb      	ldrh	r3, [r7, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e0a4      	b.n	8007a90 <HAL_UART_Receive+0x174>
    }

    __HAL_LOCK(huart);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_UART_Receive+0x38>
 8007950:	2302      	movs	r3, #2
 8007952:	e09d      	b.n	8007a90 <HAL_UART_Receive+0x174>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2222      	movs	r2, #34	; 0x22
 8007968:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007970:	f7fb ffda 	bl	8003928 <HAL_GetTick>
 8007974:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798e:	d10e      	bne.n	80079ae <HAL_UART_Receive+0x92>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <HAL_UART_Receive+0x88>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800799e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079a2:	e01a      	b.n	80079da <HAL_UART_Receive+0xbe>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	22ff      	movs	r2, #255	; 0xff
 80079a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079ac:	e015      	b.n	80079da <HAL_UART_Receive+0xbe>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10d      	bne.n	80079d2 <HAL_UART_Receive+0xb6>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <HAL_UART_Receive+0xac>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	22ff      	movs	r2, #255	; 0xff
 80079c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079c6:	e008      	b.n	80079da <HAL_UART_Receive+0xbe>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	227f      	movs	r2, #127	; 0x7f
 80079cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d0:	e003      	b.n	80079da <HAL_UART_Receive+0xbe>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ea:	d108      	bne.n	80079fe <HAL_UART_Receive+0xe2>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <HAL_UART_Receive+0xe2>
    {
      pdata8bits  = NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	61bb      	str	r3, [r7, #24]
 80079fc:	e003      	b.n	8007a06 <HAL_UART_Receive+0xea>
    }
    else
    {
      pdata8bits  = pData;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007a0e:	e033      	b.n	8007a78 <HAL_UART_Receive+0x15c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2200      	movs	r2, #0
 8007a18:	2120      	movs	r1, #32
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 fafb 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <HAL_UART_Receive+0x10e>
      {
        return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e032      	b.n	8007a90 <HAL_UART_Receive+0x174>
      }
      if (pdata8bits == NULL)
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <HAL_UART_Receive+0x12e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	8a7b      	ldrh	r3, [r7, #18]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	3302      	adds	r3, #2
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	e00d      	b.n	8007a66 <HAL_UART_Receive+0x14a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	8a7b      	ldrh	r3, [r7, #18]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	4013      	ands	r3, r2
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1c5      	bne.n	8007a10 <HAL_UART_Receive+0xf4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e000      	b.n	8007a90 <HAL_UART_Receive+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a8e:	2302      	movs	r3, #2
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ac6:	f023 030c 	bic.w	r3, r3, #12
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6812      	ldr	r2, [r2, #0]
 8007ace:	6979      	ldr	r1, [r7, #20]
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4aae      	ldr	r2, [pc, #696]	; (8007dcc <UART_SetConfig+0x334>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d120      	bne.n	8007b5a <UART_SetConfig+0xc2>
 8007b18:	4bad      	ldr	r3, [pc, #692]	; (8007dd0 <UART_SetConfig+0x338>)
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d817      	bhi.n	8007b54 <UART_SetConfig+0xbc>
 8007b24:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <UART_SetConfig+0x94>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b4f 	.word	0x08007b4f
 8007b38:	08007b43 	.word	0x08007b43
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e0b5      	b.n	8007cae <UART_SetConfig+0x216>
 8007b42:	2302      	movs	r3, #2
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e0b2      	b.n	8007cae <UART_SetConfig+0x216>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e0af      	b.n	8007cae <UART_SetConfig+0x216>
 8007b4e:	2308      	movs	r3, #8
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e0ac      	b.n	8007cae <UART_SetConfig+0x216>
 8007b54:	2310      	movs	r3, #16
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e0a9      	b.n	8007cae <UART_SetConfig+0x216>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a9d      	ldr	r2, [pc, #628]	; (8007dd4 <UART_SetConfig+0x33c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d124      	bne.n	8007bae <UART_SetConfig+0x116>
 8007b64:	4b9a      	ldr	r3, [pc, #616]	; (8007dd0 <UART_SetConfig+0x338>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b70:	d011      	beq.n	8007b96 <UART_SetConfig+0xfe>
 8007b72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b76:	d817      	bhi.n	8007ba8 <UART_SetConfig+0x110>
 8007b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7c:	d011      	beq.n	8007ba2 <UART_SetConfig+0x10a>
 8007b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b82:	d811      	bhi.n	8007ba8 <UART_SetConfig+0x110>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <UART_SetConfig+0xf8>
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8c:	d006      	beq.n	8007b9c <UART_SetConfig+0x104>
 8007b8e:	e00b      	b.n	8007ba8 <UART_SetConfig+0x110>
 8007b90:	2300      	movs	r3, #0
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e08b      	b.n	8007cae <UART_SetConfig+0x216>
 8007b96:	2302      	movs	r3, #2
 8007b98:	77fb      	strb	r3, [r7, #31]
 8007b9a:	e088      	b.n	8007cae <UART_SetConfig+0x216>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e085      	b.n	8007cae <UART_SetConfig+0x216>
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e082      	b.n	8007cae <UART_SetConfig+0x216>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e07f      	b.n	8007cae <UART_SetConfig+0x216>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a89      	ldr	r2, [pc, #548]	; (8007dd8 <UART_SetConfig+0x340>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d124      	bne.n	8007c02 <UART_SetConfig+0x16a>
 8007bb8:	4b85      	ldr	r3, [pc, #532]	; (8007dd0 <UART_SetConfig+0x338>)
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007bc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007bc4:	d011      	beq.n	8007bea <UART_SetConfig+0x152>
 8007bc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007bca:	d817      	bhi.n	8007bfc <UART_SetConfig+0x164>
 8007bcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bd0:	d011      	beq.n	8007bf6 <UART_SetConfig+0x15e>
 8007bd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bd6:	d811      	bhi.n	8007bfc <UART_SetConfig+0x164>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <UART_SetConfig+0x14c>
 8007bdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be0:	d006      	beq.n	8007bf0 <UART_SetConfig+0x158>
 8007be2:	e00b      	b.n	8007bfc <UART_SetConfig+0x164>
 8007be4:	2300      	movs	r3, #0
 8007be6:	77fb      	strb	r3, [r7, #31]
 8007be8:	e061      	b.n	8007cae <UART_SetConfig+0x216>
 8007bea:	2302      	movs	r3, #2
 8007bec:	77fb      	strb	r3, [r7, #31]
 8007bee:	e05e      	b.n	8007cae <UART_SetConfig+0x216>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e05b      	b.n	8007cae <UART_SetConfig+0x216>
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	77fb      	strb	r3, [r7, #31]
 8007bfa:	e058      	b.n	8007cae <UART_SetConfig+0x216>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e055      	b.n	8007cae <UART_SetConfig+0x216>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a75      	ldr	r2, [pc, #468]	; (8007ddc <UART_SetConfig+0x344>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d124      	bne.n	8007c56 <UART_SetConfig+0x1be>
 8007c0c:	4b70      	ldr	r3, [pc, #448]	; (8007dd0 <UART_SetConfig+0x338>)
 8007c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c18:	d011      	beq.n	8007c3e <UART_SetConfig+0x1a6>
 8007c1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c1e:	d817      	bhi.n	8007c50 <UART_SetConfig+0x1b8>
 8007c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c24:	d011      	beq.n	8007c4a <UART_SetConfig+0x1b2>
 8007c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c2a:	d811      	bhi.n	8007c50 <UART_SetConfig+0x1b8>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <UART_SetConfig+0x1a0>
 8007c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c34:	d006      	beq.n	8007c44 <UART_SetConfig+0x1ac>
 8007c36:	e00b      	b.n	8007c50 <UART_SetConfig+0x1b8>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	77fb      	strb	r3, [r7, #31]
 8007c3c:	e037      	b.n	8007cae <UART_SetConfig+0x216>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	77fb      	strb	r3, [r7, #31]
 8007c42:	e034      	b.n	8007cae <UART_SetConfig+0x216>
 8007c44:	2304      	movs	r3, #4
 8007c46:	77fb      	strb	r3, [r7, #31]
 8007c48:	e031      	b.n	8007cae <UART_SetConfig+0x216>
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	77fb      	strb	r3, [r7, #31]
 8007c4e:	e02e      	b.n	8007cae <UART_SetConfig+0x216>
 8007c50:	2310      	movs	r3, #16
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e02b      	b.n	8007cae <UART_SetConfig+0x216>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a61      	ldr	r2, [pc, #388]	; (8007de0 <UART_SetConfig+0x348>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d124      	bne.n	8007caa <UART_SetConfig+0x212>
 8007c60:	4b5b      	ldr	r3, [pc, #364]	; (8007dd0 <UART_SetConfig+0x338>)
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c6c:	d011      	beq.n	8007c92 <UART_SetConfig+0x1fa>
 8007c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c72:	d817      	bhi.n	8007ca4 <UART_SetConfig+0x20c>
 8007c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c78:	d011      	beq.n	8007c9e <UART_SetConfig+0x206>
 8007c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c7e:	d811      	bhi.n	8007ca4 <UART_SetConfig+0x20c>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <UART_SetConfig+0x1f4>
 8007c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c88:	d006      	beq.n	8007c98 <UART_SetConfig+0x200>
 8007c8a:	e00b      	b.n	8007ca4 <UART_SetConfig+0x20c>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e00d      	b.n	8007cae <UART_SetConfig+0x216>
 8007c92:	2302      	movs	r3, #2
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e00a      	b.n	8007cae <UART_SetConfig+0x216>
 8007c98:	2304      	movs	r3, #4
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e007      	b.n	8007cae <UART_SetConfig+0x216>
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e004      	b.n	8007cae <UART_SetConfig+0x216>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e001      	b.n	8007cae <UART_SetConfig+0x216>
 8007caa:	2310      	movs	r3, #16
 8007cac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb6:	d15c      	bne.n	8007d72 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8007cb8:	7ffb      	ldrb	r3, [r7, #31]
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d827      	bhi.n	8007d0e <UART_SetConfig+0x276>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <UART_SetConfig+0x22c>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cf1 	.word	0x08007cf1
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	08007d0f 	.word	0x08007d0f
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007d0f 	.word	0x08007d0f
 8007cdc:	08007d0f 	.word	0x08007d0f
 8007ce0:	08007d0f 	.word	0x08007d0f
 8007ce4:	08007d07 	.word	0x08007d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce8:	f7fd fc3a 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8007cec:	61b8      	str	r0, [r7, #24]
        break;
 8007cee:	e013      	b.n	8007d18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf0:	f7fd fc58 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 8007cf4:	61b8      	str	r0, [r7, #24]
        break;
 8007cf6:	e00f      	b.n	8007d18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b3a      	ldr	r3, [pc, #232]	; (8007de4 <UART_SetConfig+0x34c>)
 8007cfa:	61bb      	str	r3, [r7, #24]
        break;
 8007cfc:	e00c      	b.n	8007d18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7fd fbb9 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8007d02:	61b8      	str	r0, [r7, #24]
        break;
 8007d04:	e008      	b.n	8007d18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d0a:	61bb      	str	r3, [r7, #24]
        break;
 8007d0c:	e004      	b.n	8007d18 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	77bb      	strb	r3, [r7, #30]
        break;
 8007d16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8085 	beq.w	8007e2a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	005a      	lsls	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	441a      	add	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d916      	bls.n	8007d6c <UART_SetConfig+0x2d4>
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d44:	d212      	bcs.n	8007d6c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f023 030f 	bic.w	r3, r3, #15
 8007d4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	89fa      	ldrh	r2, [r7, #14]
 8007d68:	60da      	str	r2, [r3, #12]
 8007d6a:	e05e      	b.n	8007e2a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	77bb      	strb	r3, [r7, #30]
 8007d70:	e05b      	b.n	8007e2a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d72:	7ffb      	ldrb	r3, [r7, #31]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d837      	bhi.n	8007de8 <UART_SetConfig+0x350>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0x2e8>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	08007de9 	.word	0x08007de9
 8007d90:	08007dbb 	.word	0x08007dbb
 8007d94:	08007de9 	.word	0x08007de9
 8007d98:	08007de9 	.word	0x08007de9
 8007d9c:	08007de9 	.word	0x08007de9
 8007da0:	08007dc3 	.word	0x08007dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da4:	f7fd fbdc 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8007da8:	61b8      	str	r0, [r7, #24]
        break;
 8007daa:	e022      	b.n	8007df2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dac:	f7fd fbfa 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 8007db0:	61b8      	str	r0, [r7, #24]
        break;
 8007db2:	e01e      	b.n	8007df2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db4:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <UART_SetConfig+0x34c>)
 8007db6:	61bb      	str	r3, [r7, #24]
        break;
 8007db8:	e01b      	b.n	8007df2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dba:	f7fd fb5b 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8007dbe:	61b8      	str	r0, [r7, #24]
        break;
 8007dc0:	e017      	b.n	8007df2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc6:	61bb      	str	r3, [r7, #24]
        break;
 8007dc8:	e013      	b.n	8007df2 <UART_SetConfig+0x35a>
 8007dca:	bf00      	nop
 8007dcc:	40013800 	.word	0x40013800
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	40004400 	.word	0x40004400
 8007dd8:	40004800 	.word	0x40004800
 8007ddc:	40004c00 	.word	0x40004c00
 8007de0:	40005000 	.word	0x40005000
 8007de4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	77bb      	strb	r3, [r7, #30]
        break;
 8007df0:	bf00      	nop
    }

    if (pclk != 0U)
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d018      	beq.n	8007e2a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	085a      	lsrs	r2, r3, #1
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	441a      	add	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b0f      	cmp	r3, #15
 8007e12:	d908      	bls.n	8007e26 <UART_SetConfig+0x38e>
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e1a:	d204      	bcs.n	8007e26 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	60da      	str	r2, [r3, #12]
 8007e24:	e001      	b.n	8007e2a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e36:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00a      	beq.n	8007e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01a      	beq.n	8007f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3e:	d10a      	bne.n	8007f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  }
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f94:	f7fb fcc8 	bl	8003928 <HAL_GetTick>
 8007f98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d10e      	bne.n	8007fc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f82d 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e023      	b.n	800800e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d10e      	bne.n	8007ff2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f817 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e00d      	b.n	800800e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b09c      	sub	sp, #112	; 0x70
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008026:	e0a5      	b.n	8008174 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	f000 80a1 	beq.w	8008174 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008032:	f7fb fc79 	bl	8003928 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <UART_WaitOnFlagUntilTimeout+0x32>
 8008042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008044:	2b00      	cmp	r3, #0
 8008046:	d13e      	bne.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800805c:	667b      	str	r3, [r7, #100]	; 0x64
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008068:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800806c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e6      	bne.n	8008048 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	663b      	str	r3, [r7, #96]	; 0x60
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3308      	adds	r3, #8
 8008098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800809a:	64ba      	str	r2, [r7, #72]	; 0x48
 800809c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e5      	bne.n	800807a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2220      	movs	r2, #32
 80080b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e067      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d04f      	beq.n	8008174 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e2:	d147      	bne.n	8008174 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
 800810e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e6      	bne.n	80080ee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	613b      	str	r3, [r7, #16]
   return(result);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f023 0301 	bic.w	r3, r3, #1
 8008136:	66bb      	str	r3, [r7, #104]	; 0x68
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3308      	adds	r3, #8
 800813e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008140:	623a      	str	r2, [r7, #32]
 8008142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	69f9      	ldr	r1, [r7, #28]
 8008146:	6a3a      	ldr	r2, [r7, #32]
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	61bb      	str	r3, [r7, #24]
   return(result);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e5      	bne.n	8008120 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2220      	movs	r2, #32
 8008164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e010      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69da      	ldr	r2, [r3, #28]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	429a      	cmp	r2, r3
 8008190:	f43f af4a 	beq.w	8008028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3770      	adds	r7, #112	; 0x70
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80081aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	43db      	mvns	r3, r3
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4013      	ands	r3, r2
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081d4:	b084      	sub	sp, #16
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	f107 0014 	add.w	r0, r7, #20
 80081e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	b004      	add	sp, #16
 8008214:	4770      	bx	lr
	...

08008218 <__errno>:
 8008218:	4b01      	ldr	r3, [pc, #4]	; (8008220 <__errno+0x8>)
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	200001b0 	.word	0x200001b0

08008224 <__libc_init_array>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	4d0d      	ldr	r5, [pc, #52]	; (800825c <__libc_init_array+0x38>)
 8008228:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <__libc_init_array+0x3c>)
 800822a:	1b64      	subs	r4, r4, r5
 800822c:	10a4      	asrs	r4, r4, #2
 800822e:	2600      	movs	r6, #0
 8008230:	42a6      	cmp	r6, r4
 8008232:	d109      	bne.n	8008248 <__libc_init_array+0x24>
 8008234:	4d0b      	ldr	r5, [pc, #44]	; (8008264 <__libc_init_array+0x40>)
 8008236:	4c0c      	ldr	r4, [pc, #48]	; (8008268 <__libc_init_array+0x44>)
 8008238:	f001 fa66 	bl	8009708 <_init>
 800823c:	1b64      	subs	r4, r4, r5
 800823e:	10a4      	asrs	r4, r4, #2
 8008240:	2600      	movs	r6, #0
 8008242:	42a6      	cmp	r6, r4
 8008244:	d105      	bne.n	8008252 <__libc_init_array+0x2e>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	f855 3b04 	ldr.w	r3, [r5], #4
 800824c:	4798      	blx	r3
 800824e:	3601      	adds	r6, #1
 8008250:	e7ee      	b.n	8008230 <__libc_init_array+0xc>
 8008252:	f855 3b04 	ldr.w	r3, [r5], #4
 8008256:	4798      	blx	r3
 8008258:	3601      	adds	r6, #1
 800825a:	e7f2      	b.n	8008242 <__libc_init_array+0x1e>
 800825c:	080099f8 	.word	0x080099f8
 8008260:	080099f8 	.word	0x080099f8
 8008264:	080099f8 	.word	0x080099f8
 8008268:	080099fc 	.word	0x080099fc

0800826c <memset>:
 800826c:	4402      	add	r2, r0
 800826e:	4603      	mov	r3, r0
 8008270:	4293      	cmp	r3, r2
 8008272:	d100      	bne.n	8008276 <memset+0xa>
 8008274:	4770      	bx	lr
 8008276:	f803 1b01 	strb.w	r1, [r3], #1
 800827a:	e7f9      	b.n	8008270 <memset+0x4>

0800827c <srand>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <srand+0x44>)
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008284:	4604      	mov	r4, r0
 8008286:	b9b3      	cbnz	r3, 80082b6 <srand+0x3a>
 8008288:	2018      	movs	r0, #24
 800828a:	f000 f8f1 	bl	8008470 <malloc>
 800828e:	4602      	mov	r2, r0
 8008290:	63a8      	str	r0, [r5, #56]	; 0x38
 8008292:	b920      	cbnz	r0, 800829e <srand+0x22>
 8008294:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <srand+0x48>)
 8008296:	480c      	ldr	r0, [pc, #48]	; (80082c8 <srand+0x4c>)
 8008298:	2142      	movs	r1, #66	; 0x42
 800829a:	f000 f8a7 	bl	80083ec <__assert_func>
 800829e:	490b      	ldr	r1, [pc, #44]	; (80082cc <srand+0x50>)
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <srand+0x54>)
 80082a2:	e9c0 1300 	strd	r1, r3, [r0]
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <srand+0x58>)
 80082a8:	6083      	str	r3, [r0, #8]
 80082aa:	230b      	movs	r3, #11
 80082ac:	8183      	strh	r3, [r0, #12]
 80082ae:	2100      	movs	r1, #0
 80082b0:	2001      	movs	r0, #1
 80082b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80082b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80082b8:	2200      	movs	r2, #0
 80082ba:	611c      	str	r4, [r3, #16]
 80082bc:	615a      	str	r2, [r3, #20]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	200001b0 	.word	0x200001b0
 80082c4:	080098b0 	.word	0x080098b0
 80082c8:	080098c7 	.word	0x080098c7
 80082cc:	abcd330e 	.word	0xabcd330e
 80082d0:	e66d1234 	.word	0xe66d1234
 80082d4:	0005deec 	.word	0x0005deec

080082d8 <rand>:
 80082d8:	4b17      	ldr	r3, [pc, #92]	; (8008338 <rand+0x60>)
 80082da:	b510      	push	{r4, lr}
 80082dc:	681c      	ldr	r4, [r3, #0]
 80082de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082e0:	b9b3      	cbnz	r3, 8008310 <rand+0x38>
 80082e2:	2018      	movs	r0, #24
 80082e4:	f000 f8c4 	bl	8008470 <malloc>
 80082e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80082ea:	b928      	cbnz	r0, 80082f8 <rand+0x20>
 80082ec:	4602      	mov	r2, r0
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <rand+0x64>)
 80082f0:	4813      	ldr	r0, [pc, #76]	; (8008340 <rand+0x68>)
 80082f2:	214e      	movs	r1, #78	; 0x4e
 80082f4:	f000 f87a 	bl	80083ec <__assert_func>
 80082f8:	4a12      	ldr	r2, [pc, #72]	; (8008344 <rand+0x6c>)
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <rand+0x70>)
 80082fc:	e9c0 2300 	strd	r2, r3, [r0]
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <rand+0x74>)
 8008302:	6083      	str	r3, [r0, #8]
 8008304:	230b      	movs	r3, #11
 8008306:	8183      	strh	r3, [r0, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	2300      	movs	r3, #0
 800830c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008310:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008312:	480f      	ldr	r0, [pc, #60]	; (8008350 <rand+0x78>)
 8008314:	690a      	ldr	r2, [r1, #16]
 8008316:	694b      	ldr	r3, [r1, #20]
 8008318:	4c0e      	ldr	r4, [pc, #56]	; (8008354 <rand+0x7c>)
 800831a:	4350      	muls	r0, r2
 800831c:	fb04 0003 	mla	r0, r4, r3, r0
 8008320:	fba2 3404 	umull	r3, r4, r2, r4
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	4404      	add	r4, r0
 8008328:	f144 0000 	adc.w	r0, r4, #0
 800832c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008330:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008334:	bd10      	pop	{r4, pc}
 8008336:	bf00      	nop
 8008338:	200001b0 	.word	0x200001b0
 800833c:	080098b0 	.word	0x080098b0
 8008340:	080098c7 	.word	0x080098c7
 8008344:	abcd330e 	.word	0xabcd330e
 8008348:	e66d1234 	.word	0xe66d1234
 800834c:	0005deec 	.word	0x0005deec
 8008350:	5851f42d 	.word	0x5851f42d
 8008354:	4c957f2d 	.word	0x4c957f2d

08008358 <siprintf>:
 8008358:	b40e      	push	{r1, r2, r3}
 800835a:	b500      	push	{lr}
 800835c:	b09c      	sub	sp, #112	; 0x70
 800835e:	ab1d      	add	r3, sp, #116	; 0x74
 8008360:	9002      	str	r0, [sp, #8]
 8008362:	9006      	str	r0, [sp, #24]
 8008364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008368:	4809      	ldr	r0, [pc, #36]	; (8008390 <siprintf+0x38>)
 800836a:	9107      	str	r1, [sp, #28]
 800836c:	9104      	str	r1, [sp, #16]
 800836e:	4909      	ldr	r1, [pc, #36]	; (8008394 <siprintf+0x3c>)
 8008370:	f853 2b04 	ldr.w	r2, [r3], #4
 8008374:	9105      	str	r1, [sp, #20]
 8008376:	6800      	ldr	r0, [r0, #0]
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	a902      	add	r1, sp, #8
 800837c:	f000 f986 	bl	800868c <_svfiprintf_r>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	b01c      	add	sp, #112	; 0x70
 8008388:	f85d eb04 	ldr.w	lr, [sp], #4
 800838c:	b003      	add	sp, #12
 800838e:	4770      	bx	lr
 8008390:	200001b0 	.word	0x200001b0
 8008394:	ffff0208 	.word	0xffff0208

08008398 <strcat>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4602      	mov	r2, r0
 800839c:	7814      	ldrb	r4, [r2, #0]
 800839e:	4613      	mov	r3, r2
 80083a0:	3201      	adds	r2, #1
 80083a2:	2c00      	cmp	r4, #0
 80083a4:	d1fa      	bne.n	800839c <strcat+0x4>
 80083a6:	3b01      	subs	r3, #1
 80083a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	d1f9      	bne.n	80083a8 <strcat+0x10>
 80083b4:	bd10      	pop	{r4, pc}
	...

080083b8 <time>:
 80083b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <time+0x30>)
 80083bc:	2200      	movs	r2, #0
 80083be:	4669      	mov	r1, sp
 80083c0:	4604      	mov	r4, r0
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	f000 f842 	bl	800844c <_gettimeofday_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	bfbe      	ittt	lt
 80083cc:	f04f 32ff 	movlt.w	r2, #4294967295
 80083d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80083d4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80083d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083dc:	b10c      	cbz	r4, 80083e2 <time+0x2a>
 80083de:	e9c4 0100 	strd	r0, r1, [r4]
 80083e2:	b004      	add	sp, #16
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	bf00      	nop
 80083e8:	200001b0 	.word	0x200001b0

080083ec <__assert_func>:
 80083ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ee:	4614      	mov	r4, r2
 80083f0:	461a      	mov	r2, r3
 80083f2:	4b09      	ldr	r3, [pc, #36]	; (8008418 <__assert_func+0x2c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4605      	mov	r5, r0
 80083f8:	68d8      	ldr	r0, [r3, #12]
 80083fa:	b14c      	cbz	r4, 8008410 <__assert_func+0x24>
 80083fc:	4b07      	ldr	r3, [pc, #28]	; (800841c <__assert_func+0x30>)
 80083fe:	9100      	str	r1, [sp, #0]
 8008400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008404:	4906      	ldr	r1, [pc, #24]	; (8008420 <__assert_func+0x34>)
 8008406:	462b      	mov	r3, r5
 8008408:	f000 f80e 	bl	8008428 <fiprintf>
 800840c:	f000 fdfc 	bl	8009008 <abort>
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <__assert_func+0x38>)
 8008412:	461c      	mov	r4, r3
 8008414:	e7f3      	b.n	80083fe <__assert_func+0x12>
 8008416:	bf00      	nop
 8008418:	200001b0 	.word	0x200001b0
 800841c:	08009926 	.word	0x08009926
 8008420:	08009933 	.word	0x08009933
 8008424:	08009961 	.word	0x08009961

08008428 <fiprintf>:
 8008428:	b40e      	push	{r1, r2, r3}
 800842a:	b503      	push	{r0, r1, lr}
 800842c:	4601      	mov	r1, r0
 800842e:	ab03      	add	r3, sp, #12
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <fiprintf+0x20>)
 8008432:	f853 2b04 	ldr.w	r2, [r3], #4
 8008436:	6800      	ldr	r0, [r0, #0]
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	f000 fa51 	bl	80088e0 <_vfiprintf_r>
 800843e:	b002      	add	sp, #8
 8008440:	f85d eb04 	ldr.w	lr, [sp], #4
 8008444:	b003      	add	sp, #12
 8008446:	4770      	bx	lr
 8008448:	200001b0 	.word	0x200001b0

0800844c <_gettimeofday_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	; (800846c <_gettimeofday_r+0x20>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	602b      	str	r3, [r5, #0]
 800845a:	f001 f94d 	bl	80096f8 <_gettimeofday>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d102      	bne.n	8008468 <_gettimeofday_r+0x1c>
 8008462:	682b      	ldr	r3, [r5, #0]
 8008464:	b103      	cbz	r3, 8008468 <_gettimeofday_r+0x1c>
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	bd38      	pop	{r3, r4, r5, pc}
 800846a:	bf00      	nop
 800846c:	200009b4 	.word	0x200009b4

08008470 <malloc>:
 8008470:	4b02      	ldr	r3, [pc, #8]	; (800847c <malloc+0xc>)
 8008472:	4601      	mov	r1, r0
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	f000 b853 	b.w	8008520 <_malloc_r>
 800847a:	bf00      	nop
 800847c:	200001b0 	.word	0x200001b0

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d048      	beq.n	8008518 <_free_r+0x98>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f001 f805 	bl	80094a4 <__malloc_lock>
 800849a:	4a20      	ldr	r2, [pc, #128]	; (800851c <_free_r+0x9c>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	4615      	mov	r5, r2
 80084a2:	b933      	cbnz	r3, 80084b2 <_free_r+0x32>
 80084a4:	6063      	str	r3, [r4, #4]
 80084a6:	6014      	str	r4, [r2, #0]
 80084a8:	b003      	add	sp, #12
 80084aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ae:	f000 bfff 	b.w	80094b0 <__malloc_unlock>
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	d90b      	bls.n	80084ce <_free_r+0x4e>
 80084b6:	6821      	ldr	r1, [r4, #0]
 80084b8:	1862      	adds	r2, r4, r1
 80084ba:	4293      	cmp	r3, r2
 80084bc:	bf04      	itt	eq
 80084be:	681a      	ldreq	r2, [r3, #0]
 80084c0:	685b      	ldreq	r3, [r3, #4]
 80084c2:	6063      	str	r3, [r4, #4]
 80084c4:	bf04      	itt	eq
 80084c6:	1852      	addeq	r2, r2, r1
 80084c8:	6022      	streq	r2, [r4, #0]
 80084ca:	602c      	str	r4, [r5, #0]
 80084cc:	e7ec      	b.n	80084a8 <_free_r+0x28>
 80084ce:	461a      	mov	r2, r3
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b10b      	cbz	r3, 80084d8 <_free_r+0x58>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d9fa      	bls.n	80084ce <_free_r+0x4e>
 80084d8:	6811      	ldr	r1, [r2, #0]
 80084da:	1855      	adds	r5, r2, r1
 80084dc:	42a5      	cmp	r5, r4
 80084de:	d10b      	bne.n	80084f8 <_free_r+0x78>
 80084e0:	6824      	ldr	r4, [r4, #0]
 80084e2:	4421      	add	r1, r4
 80084e4:	1854      	adds	r4, r2, r1
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	d1dd      	bne.n	80084a8 <_free_r+0x28>
 80084ec:	681c      	ldr	r4, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	6053      	str	r3, [r2, #4]
 80084f2:	4421      	add	r1, r4
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	e7d7      	b.n	80084a8 <_free_r+0x28>
 80084f8:	d902      	bls.n	8008500 <_free_r+0x80>
 80084fa:	230c      	movs	r3, #12
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	e7d3      	b.n	80084a8 <_free_r+0x28>
 8008500:	6825      	ldr	r5, [r4, #0]
 8008502:	1961      	adds	r1, r4, r5
 8008504:	428b      	cmp	r3, r1
 8008506:	bf04      	itt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	bf04      	itt	eq
 8008510:	1949      	addeq	r1, r1, r5
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	6054      	str	r4, [r2, #4]
 8008516:	e7c7      	b.n	80084a8 <_free_r+0x28>
 8008518:	b003      	add	sp, #12
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	200003a0 	.word	0x200003a0

08008520 <_malloc_r>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	1ccd      	adds	r5, r1, #3
 8008524:	f025 0503 	bic.w	r5, r5, #3
 8008528:	3508      	adds	r5, #8
 800852a:	2d0c      	cmp	r5, #12
 800852c:	bf38      	it	cc
 800852e:	250c      	movcc	r5, #12
 8008530:	2d00      	cmp	r5, #0
 8008532:	4606      	mov	r6, r0
 8008534:	db01      	blt.n	800853a <_malloc_r+0x1a>
 8008536:	42a9      	cmp	r1, r5
 8008538:	d903      	bls.n	8008542 <_malloc_r+0x22>
 800853a:	230c      	movs	r3, #12
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	2000      	movs	r0, #0
 8008540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008542:	f000 ffaf 	bl	80094a4 <__malloc_lock>
 8008546:	4921      	ldr	r1, [pc, #132]	; (80085cc <_malloc_r+0xac>)
 8008548:	680a      	ldr	r2, [r1, #0]
 800854a:	4614      	mov	r4, r2
 800854c:	b99c      	cbnz	r4, 8008576 <_malloc_r+0x56>
 800854e:	4f20      	ldr	r7, [pc, #128]	; (80085d0 <_malloc_r+0xb0>)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	b923      	cbnz	r3, 800855e <_malloc_r+0x3e>
 8008554:	4621      	mov	r1, r4
 8008556:	4630      	mov	r0, r6
 8008558:	f000 fc86 	bl	8008e68 <_sbrk_r>
 800855c:	6038      	str	r0, [r7, #0]
 800855e:	4629      	mov	r1, r5
 8008560:	4630      	mov	r0, r6
 8008562:	f000 fc81 	bl	8008e68 <_sbrk_r>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	d123      	bne.n	80085b2 <_malloc_r+0x92>
 800856a:	230c      	movs	r3, #12
 800856c:	6033      	str	r3, [r6, #0]
 800856e:	4630      	mov	r0, r6
 8008570:	f000 ff9e 	bl	80094b0 <__malloc_unlock>
 8008574:	e7e3      	b.n	800853e <_malloc_r+0x1e>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	1b5b      	subs	r3, r3, r5
 800857a:	d417      	bmi.n	80085ac <_malloc_r+0x8c>
 800857c:	2b0b      	cmp	r3, #11
 800857e:	d903      	bls.n	8008588 <_malloc_r+0x68>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	441c      	add	r4, r3
 8008584:	6025      	str	r5, [r4, #0]
 8008586:	e004      	b.n	8008592 <_malloc_r+0x72>
 8008588:	6863      	ldr	r3, [r4, #4]
 800858a:	42a2      	cmp	r2, r4
 800858c:	bf0c      	ite	eq
 800858e:	600b      	streq	r3, [r1, #0]
 8008590:	6053      	strne	r3, [r2, #4]
 8008592:	4630      	mov	r0, r6
 8008594:	f000 ff8c 	bl	80094b0 <__malloc_unlock>
 8008598:	f104 000b 	add.w	r0, r4, #11
 800859c:	1d23      	adds	r3, r4, #4
 800859e:	f020 0007 	bic.w	r0, r0, #7
 80085a2:	1ac2      	subs	r2, r0, r3
 80085a4:	d0cc      	beq.n	8008540 <_malloc_r+0x20>
 80085a6:	1a1b      	subs	r3, r3, r0
 80085a8:	50a3      	str	r3, [r4, r2]
 80085aa:	e7c9      	b.n	8008540 <_malloc_r+0x20>
 80085ac:	4622      	mov	r2, r4
 80085ae:	6864      	ldr	r4, [r4, #4]
 80085b0:	e7cc      	b.n	800854c <_malloc_r+0x2c>
 80085b2:	1cc4      	adds	r4, r0, #3
 80085b4:	f024 0403 	bic.w	r4, r4, #3
 80085b8:	42a0      	cmp	r0, r4
 80085ba:	d0e3      	beq.n	8008584 <_malloc_r+0x64>
 80085bc:	1a21      	subs	r1, r4, r0
 80085be:	4630      	mov	r0, r6
 80085c0:	f000 fc52 	bl	8008e68 <_sbrk_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	d1dd      	bne.n	8008584 <_malloc_r+0x64>
 80085c8:	e7cf      	b.n	800856a <_malloc_r+0x4a>
 80085ca:	bf00      	nop
 80085cc:	200003a0 	.word	0x200003a0
 80085d0:	200003a4 	.word	0x200003a4

080085d4 <__ssputs_r>:
 80085d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	688e      	ldr	r6, [r1, #8]
 80085da:	429e      	cmp	r6, r3
 80085dc:	4682      	mov	sl, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	4690      	mov	r8, r2
 80085e2:	461f      	mov	r7, r3
 80085e4:	d838      	bhi.n	8008658 <__ssputs_r+0x84>
 80085e6:	898a      	ldrh	r2, [r1, #12]
 80085e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085ec:	d032      	beq.n	8008654 <__ssputs_r+0x80>
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	6909      	ldr	r1, [r1, #16]
 80085f2:	eba5 0901 	sub.w	r9, r5, r1
 80085f6:	6965      	ldr	r5, [r4, #20]
 80085f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008600:	3301      	adds	r3, #1
 8008602:	444b      	add	r3, r9
 8008604:	106d      	asrs	r5, r5, #1
 8008606:	429d      	cmp	r5, r3
 8008608:	bf38      	it	cc
 800860a:	461d      	movcc	r5, r3
 800860c:	0553      	lsls	r3, r2, #21
 800860e:	d531      	bpl.n	8008674 <__ssputs_r+0xa0>
 8008610:	4629      	mov	r1, r5
 8008612:	f7ff ff85 	bl	8008520 <_malloc_r>
 8008616:	4606      	mov	r6, r0
 8008618:	b950      	cbnz	r0, 8008630 <__ssputs_r+0x5c>
 800861a:	230c      	movs	r3, #12
 800861c:	f8ca 3000 	str.w	r3, [sl]
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008630:	6921      	ldr	r1, [r4, #16]
 8008632:	464a      	mov	r2, r9
 8008634:	f000 ff0e 	bl	8009454 <memcpy>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800863e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	6126      	str	r6, [r4, #16]
 8008646:	6165      	str	r5, [r4, #20]
 8008648:	444e      	add	r6, r9
 800864a:	eba5 0509 	sub.w	r5, r5, r9
 800864e:	6026      	str	r6, [r4, #0]
 8008650:	60a5      	str	r5, [r4, #8]
 8008652:	463e      	mov	r6, r7
 8008654:	42be      	cmp	r6, r7
 8008656:	d900      	bls.n	800865a <__ssputs_r+0x86>
 8008658:	463e      	mov	r6, r7
 800865a:	4632      	mov	r2, r6
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4641      	mov	r1, r8
 8008660:	f000 ff06 	bl	8009470 <memmove>
 8008664:	68a3      	ldr	r3, [r4, #8]
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	1b9b      	subs	r3, r3, r6
 800866a:	4432      	add	r2, r6
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	6022      	str	r2, [r4, #0]
 8008670:	2000      	movs	r0, #0
 8008672:	e7db      	b.n	800862c <__ssputs_r+0x58>
 8008674:	462a      	mov	r2, r5
 8008676:	f000 ff21 	bl	80094bc <_realloc_r>
 800867a:	4606      	mov	r6, r0
 800867c:	2800      	cmp	r0, #0
 800867e:	d1e1      	bne.n	8008644 <__ssputs_r+0x70>
 8008680:	6921      	ldr	r1, [r4, #16]
 8008682:	4650      	mov	r0, sl
 8008684:	f7ff fefc 	bl	8008480 <_free_r>
 8008688:	e7c7      	b.n	800861a <__ssputs_r+0x46>
	...

0800868c <_svfiprintf_r>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	4698      	mov	r8, r3
 8008692:	898b      	ldrh	r3, [r1, #12]
 8008694:	061b      	lsls	r3, r3, #24
 8008696:	b09d      	sub	sp, #116	; 0x74
 8008698:	4607      	mov	r7, r0
 800869a:	460d      	mov	r5, r1
 800869c:	4614      	mov	r4, r2
 800869e:	d50e      	bpl.n	80086be <_svfiprintf_r+0x32>
 80086a0:	690b      	ldr	r3, [r1, #16]
 80086a2:	b963      	cbnz	r3, 80086be <_svfiprintf_r+0x32>
 80086a4:	2140      	movs	r1, #64	; 0x40
 80086a6:	f7ff ff3b 	bl	8008520 <_malloc_r>
 80086aa:	6028      	str	r0, [r5, #0]
 80086ac:	6128      	str	r0, [r5, #16]
 80086ae:	b920      	cbnz	r0, 80086ba <_svfiprintf_r+0x2e>
 80086b0:	230c      	movs	r3, #12
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	e0d1      	b.n	800885e <_svfiprintf_r+0x1d2>
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	616b      	str	r3, [r5, #20]
 80086be:	2300      	movs	r3, #0
 80086c0:	9309      	str	r3, [sp, #36]	; 0x24
 80086c2:	2320      	movs	r3, #32
 80086c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80086cc:	2330      	movs	r3, #48	; 0x30
 80086ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008878 <_svfiprintf_r+0x1ec>
 80086d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086d6:	f04f 0901 	mov.w	r9, #1
 80086da:	4623      	mov	r3, r4
 80086dc:	469a      	mov	sl, r3
 80086de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e2:	b10a      	cbz	r2, 80086e8 <_svfiprintf_r+0x5c>
 80086e4:	2a25      	cmp	r2, #37	; 0x25
 80086e6:	d1f9      	bne.n	80086dc <_svfiprintf_r+0x50>
 80086e8:	ebba 0b04 	subs.w	fp, sl, r4
 80086ec:	d00b      	beq.n	8008706 <_svfiprintf_r+0x7a>
 80086ee:	465b      	mov	r3, fp
 80086f0:	4622      	mov	r2, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff ff6d 	bl	80085d4 <__ssputs_r>
 80086fa:	3001      	adds	r0, #1
 80086fc:	f000 80aa 	beq.w	8008854 <_svfiprintf_r+0x1c8>
 8008700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008702:	445a      	add	r2, fp
 8008704:	9209      	str	r2, [sp, #36]	; 0x24
 8008706:	f89a 3000 	ldrb.w	r3, [sl]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 80a2 	beq.w	8008854 <_svfiprintf_r+0x1c8>
 8008710:	2300      	movs	r3, #0
 8008712:	f04f 32ff 	mov.w	r2, #4294967295
 8008716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871a:	f10a 0a01 	add.w	sl, sl, #1
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008726:	931a      	str	r3, [sp, #104]	; 0x68
 8008728:	4654      	mov	r4, sl
 800872a:	2205      	movs	r2, #5
 800872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008730:	4851      	ldr	r0, [pc, #324]	; (8008878 <_svfiprintf_r+0x1ec>)
 8008732:	f7f7 fd65 	bl	8000200 <memchr>
 8008736:	9a04      	ldr	r2, [sp, #16]
 8008738:	b9d8      	cbnz	r0, 8008772 <_svfiprintf_r+0xe6>
 800873a:	06d0      	lsls	r0, r2, #27
 800873c:	bf44      	itt	mi
 800873e:	2320      	movmi	r3, #32
 8008740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008744:	0711      	lsls	r1, r2, #28
 8008746:	bf44      	itt	mi
 8008748:	232b      	movmi	r3, #43	; 0x2b
 800874a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800874e:	f89a 3000 	ldrb.w	r3, [sl]
 8008752:	2b2a      	cmp	r3, #42	; 0x2a
 8008754:	d015      	beq.n	8008782 <_svfiprintf_r+0xf6>
 8008756:	9a07      	ldr	r2, [sp, #28]
 8008758:	4654      	mov	r4, sl
 800875a:	2000      	movs	r0, #0
 800875c:	f04f 0c0a 	mov.w	ip, #10
 8008760:	4621      	mov	r1, r4
 8008762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008766:	3b30      	subs	r3, #48	; 0x30
 8008768:	2b09      	cmp	r3, #9
 800876a:	d94e      	bls.n	800880a <_svfiprintf_r+0x17e>
 800876c:	b1b0      	cbz	r0, 800879c <_svfiprintf_r+0x110>
 800876e:	9207      	str	r2, [sp, #28]
 8008770:	e014      	b.n	800879c <_svfiprintf_r+0x110>
 8008772:	eba0 0308 	sub.w	r3, r0, r8
 8008776:	fa09 f303 	lsl.w	r3, r9, r3
 800877a:	4313      	orrs	r3, r2
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	46a2      	mov	sl, r4
 8008780:	e7d2      	b.n	8008728 <_svfiprintf_r+0x9c>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	1d19      	adds	r1, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9103      	str	r1, [sp, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfbb      	ittet	lt
 800878e:	425b      	neglt	r3, r3
 8008790:	f042 0202 	orrlt.w	r2, r2, #2
 8008794:	9307      	strge	r3, [sp, #28]
 8008796:	9307      	strlt	r3, [sp, #28]
 8008798:	bfb8      	it	lt
 800879a:	9204      	strlt	r2, [sp, #16]
 800879c:	7823      	ldrb	r3, [r4, #0]
 800879e:	2b2e      	cmp	r3, #46	; 0x2e
 80087a0:	d10c      	bne.n	80087bc <_svfiprintf_r+0x130>
 80087a2:	7863      	ldrb	r3, [r4, #1]
 80087a4:	2b2a      	cmp	r3, #42	; 0x2a
 80087a6:	d135      	bne.n	8008814 <_svfiprintf_r+0x188>
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	1d1a      	adds	r2, r3, #4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	9203      	str	r2, [sp, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bfb8      	it	lt
 80087b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80087b8:	3402      	adds	r4, #2
 80087ba:	9305      	str	r3, [sp, #20]
 80087bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008888 <_svfiprintf_r+0x1fc>
 80087c0:	7821      	ldrb	r1, [r4, #0]
 80087c2:	2203      	movs	r2, #3
 80087c4:	4650      	mov	r0, sl
 80087c6:	f7f7 fd1b 	bl	8000200 <memchr>
 80087ca:	b140      	cbz	r0, 80087de <_svfiprintf_r+0x152>
 80087cc:	2340      	movs	r3, #64	; 0x40
 80087ce:	eba0 000a 	sub.w	r0, r0, sl
 80087d2:	fa03 f000 	lsl.w	r0, r3, r0
 80087d6:	9b04      	ldr	r3, [sp, #16]
 80087d8:	4303      	orrs	r3, r0
 80087da:	3401      	adds	r4, #1
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e2:	4826      	ldr	r0, [pc, #152]	; (800887c <_svfiprintf_r+0x1f0>)
 80087e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087e8:	2206      	movs	r2, #6
 80087ea:	f7f7 fd09 	bl	8000200 <memchr>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d038      	beq.n	8008864 <_svfiprintf_r+0x1d8>
 80087f2:	4b23      	ldr	r3, [pc, #140]	; (8008880 <_svfiprintf_r+0x1f4>)
 80087f4:	bb1b      	cbnz	r3, 800883e <_svfiprintf_r+0x1b2>
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	3307      	adds	r3, #7
 80087fa:	f023 0307 	bic.w	r3, r3, #7
 80087fe:	3308      	adds	r3, #8
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008804:	4433      	add	r3, r6
 8008806:	9309      	str	r3, [sp, #36]	; 0x24
 8008808:	e767      	b.n	80086da <_svfiprintf_r+0x4e>
 800880a:	fb0c 3202 	mla	r2, ip, r2, r3
 800880e:	460c      	mov	r4, r1
 8008810:	2001      	movs	r0, #1
 8008812:	e7a5      	b.n	8008760 <_svfiprintf_r+0xd4>
 8008814:	2300      	movs	r3, #0
 8008816:	3401      	adds	r4, #1
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	4619      	mov	r1, r3
 800881c:	f04f 0c0a 	mov.w	ip, #10
 8008820:	4620      	mov	r0, r4
 8008822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008826:	3a30      	subs	r2, #48	; 0x30
 8008828:	2a09      	cmp	r2, #9
 800882a:	d903      	bls.n	8008834 <_svfiprintf_r+0x1a8>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0c5      	beq.n	80087bc <_svfiprintf_r+0x130>
 8008830:	9105      	str	r1, [sp, #20]
 8008832:	e7c3      	b.n	80087bc <_svfiprintf_r+0x130>
 8008834:	fb0c 2101 	mla	r1, ip, r1, r2
 8008838:	4604      	mov	r4, r0
 800883a:	2301      	movs	r3, #1
 800883c:	e7f0      	b.n	8008820 <_svfiprintf_r+0x194>
 800883e:	ab03      	add	r3, sp, #12
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	462a      	mov	r2, r5
 8008844:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <_svfiprintf_r+0x1f8>)
 8008846:	a904      	add	r1, sp, #16
 8008848:	4638      	mov	r0, r7
 800884a:	f3af 8000 	nop.w
 800884e:	1c42      	adds	r2, r0, #1
 8008850:	4606      	mov	r6, r0
 8008852:	d1d6      	bne.n	8008802 <_svfiprintf_r+0x176>
 8008854:	89ab      	ldrh	r3, [r5, #12]
 8008856:	065b      	lsls	r3, r3, #25
 8008858:	f53f af2c 	bmi.w	80086b4 <_svfiprintf_r+0x28>
 800885c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800885e:	b01d      	add	sp, #116	; 0x74
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	ab03      	add	r3, sp, #12
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	462a      	mov	r2, r5
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <_svfiprintf_r+0x1f8>)
 800886c:	a904      	add	r1, sp, #16
 800886e:	4638      	mov	r0, r7
 8008870:	f000 f9d4 	bl	8008c1c <_printf_i>
 8008874:	e7eb      	b.n	800884e <_svfiprintf_r+0x1c2>
 8008876:	bf00      	nop
 8008878:	08009962 	.word	0x08009962
 800887c:	0800996c 	.word	0x0800996c
 8008880:	00000000 	.word	0x00000000
 8008884:	080085d5 	.word	0x080085d5
 8008888:	08009968 	.word	0x08009968

0800888c <__sfputc_r>:
 800888c:	6893      	ldr	r3, [r2, #8]
 800888e:	3b01      	subs	r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	b410      	push	{r4}
 8008894:	6093      	str	r3, [r2, #8]
 8008896:	da08      	bge.n	80088aa <__sfputc_r+0x1e>
 8008898:	6994      	ldr	r4, [r2, #24]
 800889a:	42a3      	cmp	r3, r4
 800889c:	db01      	blt.n	80088a2 <__sfputc_r+0x16>
 800889e:	290a      	cmp	r1, #10
 80088a0:	d103      	bne.n	80088aa <__sfputc_r+0x1e>
 80088a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088a6:	f000 baef 	b.w	8008e88 <__swbuf_r>
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	1c58      	adds	r0, r3, #1
 80088ae:	6010      	str	r0, [r2, #0]
 80088b0:	7019      	strb	r1, [r3, #0]
 80088b2:	4608      	mov	r0, r1
 80088b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <__sfputs_r>:
 80088ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088bc:	4606      	mov	r6, r0
 80088be:	460f      	mov	r7, r1
 80088c0:	4614      	mov	r4, r2
 80088c2:	18d5      	adds	r5, r2, r3
 80088c4:	42ac      	cmp	r4, r5
 80088c6:	d101      	bne.n	80088cc <__sfputs_r+0x12>
 80088c8:	2000      	movs	r0, #0
 80088ca:	e007      	b.n	80088dc <__sfputs_r+0x22>
 80088cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d0:	463a      	mov	r2, r7
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7ff ffda 	bl	800888c <__sfputc_r>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d1f3      	bne.n	80088c4 <__sfputs_r+0xa>
 80088dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088e0 <_vfiprintf_r>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	460d      	mov	r5, r1
 80088e6:	b09d      	sub	sp, #116	; 0x74
 80088e8:	4614      	mov	r4, r2
 80088ea:	4698      	mov	r8, r3
 80088ec:	4606      	mov	r6, r0
 80088ee:	b118      	cbz	r0, 80088f8 <_vfiprintf_r+0x18>
 80088f0:	6983      	ldr	r3, [r0, #24]
 80088f2:	b90b      	cbnz	r3, 80088f8 <_vfiprintf_r+0x18>
 80088f4:	f000 fcaa 	bl	800924c <__sinit>
 80088f8:	4b89      	ldr	r3, [pc, #548]	; (8008b20 <_vfiprintf_r+0x240>)
 80088fa:	429d      	cmp	r5, r3
 80088fc:	d11b      	bne.n	8008936 <_vfiprintf_r+0x56>
 80088fe:	6875      	ldr	r5, [r6, #4]
 8008900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008902:	07d9      	lsls	r1, r3, #31
 8008904:	d405      	bmi.n	8008912 <_vfiprintf_r+0x32>
 8008906:	89ab      	ldrh	r3, [r5, #12]
 8008908:	059a      	lsls	r2, r3, #22
 800890a:	d402      	bmi.n	8008912 <_vfiprintf_r+0x32>
 800890c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800890e:	f000 fd3b 	bl	8009388 <__retarget_lock_acquire_recursive>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	071b      	lsls	r3, r3, #28
 8008916:	d501      	bpl.n	800891c <_vfiprintf_r+0x3c>
 8008918:	692b      	ldr	r3, [r5, #16]
 800891a:	b9eb      	cbnz	r3, 8008958 <_vfiprintf_r+0x78>
 800891c:	4629      	mov	r1, r5
 800891e:	4630      	mov	r0, r6
 8008920:	f000 fb04 	bl	8008f2c <__swsetup_r>
 8008924:	b1c0      	cbz	r0, 8008958 <_vfiprintf_r+0x78>
 8008926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008928:	07dc      	lsls	r4, r3, #31
 800892a:	d50e      	bpl.n	800894a <_vfiprintf_r+0x6a>
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	b01d      	add	sp, #116	; 0x74
 8008932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008936:	4b7b      	ldr	r3, [pc, #492]	; (8008b24 <_vfiprintf_r+0x244>)
 8008938:	429d      	cmp	r5, r3
 800893a:	d101      	bne.n	8008940 <_vfiprintf_r+0x60>
 800893c:	68b5      	ldr	r5, [r6, #8]
 800893e:	e7df      	b.n	8008900 <_vfiprintf_r+0x20>
 8008940:	4b79      	ldr	r3, [pc, #484]	; (8008b28 <_vfiprintf_r+0x248>)
 8008942:	429d      	cmp	r5, r3
 8008944:	bf08      	it	eq
 8008946:	68f5      	ldreq	r5, [r6, #12]
 8008948:	e7da      	b.n	8008900 <_vfiprintf_r+0x20>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	0598      	lsls	r0, r3, #22
 800894e:	d4ed      	bmi.n	800892c <_vfiprintf_r+0x4c>
 8008950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008952:	f000 fd1a 	bl	800938a <__retarget_lock_release_recursive>
 8008956:	e7e9      	b.n	800892c <_vfiprintf_r+0x4c>
 8008958:	2300      	movs	r3, #0
 800895a:	9309      	str	r3, [sp, #36]	; 0x24
 800895c:	2320      	movs	r3, #32
 800895e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008962:	f8cd 800c 	str.w	r8, [sp, #12]
 8008966:	2330      	movs	r3, #48	; 0x30
 8008968:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b2c <_vfiprintf_r+0x24c>
 800896c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008970:	f04f 0901 	mov.w	r9, #1
 8008974:	4623      	mov	r3, r4
 8008976:	469a      	mov	sl, r3
 8008978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897c:	b10a      	cbz	r2, 8008982 <_vfiprintf_r+0xa2>
 800897e:	2a25      	cmp	r2, #37	; 0x25
 8008980:	d1f9      	bne.n	8008976 <_vfiprintf_r+0x96>
 8008982:	ebba 0b04 	subs.w	fp, sl, r4
 8008986:	d00b      	beq.n	80089a0 <_vfiprintf_r+0xc0>
 8008988:	465b      	mov	r3, fp
 800898a:	4622      	mov	r2, r4
 800898c:	4629      	mov	r1, r5
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ff93 	bl	80088ba <__sfputs_r>
 8008994:	3001      	adds	r0, #1
 8008996:	f000 80aa 	beq.w	8008aee <_vfiprintf_r+0x20e>
 800899a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800899c:	445a      	add	r2, fp
 800899e:	9209      	str	r2, [sp, #36]	; 0x24
 80089a0:	f89a 3000 	ldrb.w	r3, [sl]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 80a2 	beq.w	8008aee <_vfiprintf_r+0x20e>
 80089aa:	2300      	movs	r3, #0
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b4:	f10a 0a01 	add.w	sl, sl, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	9307      	str	r3, [sp, #28]
 80089bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089c0:	931a      	str	r3, [sp, #104]	; 0x68
 80089c2:	4654      	mov	r4, sl
 80089c4:	2205      	movs	r2, #5
 80089c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ca:	4858      	ldr	r0, [pc, #352]	; (8008b2c <_vfiprintf_r+0x24c>)
 80089cc:	f7f7 fc18 	bl	8000200 <memchr>
 80089d0:	9a04      	ldr	r2, [sp, #16]
 80089d2:	b9d8      	cbnz	r0, 8008a0c <_vfiprintf_r+0x12c>
 80089d4:	06d1      	lsls	r1, r2, #27
 80089d6:	bf44      	itt	mi
 80089d8:	2320      	movmi	r3, #32
 80089da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089de:	0713      	lsls	r3, r2, #28
 80089e0:	bf44      	itt	mi
 80089e2:	232b      	movmi	r3, #43	; 0x2b
 80089e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e8:	f89a 3000 	ldrb.w	r3, [sl]
 80089ec:	2b2a      	cmp	r3, #42	; 0x2a
 80089ee:	d015      	beq.n	8008a1c <_vfiprintf_r+0x13c>
 80089f0:	9a07      	ldr	r2, [sp, #28]
 80089f2:	4654      	mov	r4, sl
 80089f4:	2000      	movs	r0, #0
 80089f6:	f04f 0c0a 	mov.w	ip, #10
 80089fa:	4621      	mov	r1, r4
 80089fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a00:	3b30      	subs	r3, #48	; 0x30
 8008a02:	2b09      	cmp	r3, #9
 8008a04:	d94e      	bls.n	8008aa4 <_vfiprintf_r+0x1c4>
 8008a06:	b1b0      	cbz	r0, 8008a36 <_vfiprintf_r+0x156>
 8008a08:	9207      	str	r2, [sp, #28]
 8008a0a:	e014      	b.n	8008a36 <_vfiprintf_r+0x156>
 8008a0c:	eba0 0308 	sub.w	r3, r0, r8
 8008a10:	fa09 f303 	lsl.w	r3, r9, r3
 8008a14:	4313      	orrs	r3, r2
 8008a16:	9304      	str	r3, [sp, #16]
 8008a18:	46a2      	mov	sl, r4
 8008a1a:	e7d2      	b.n	80089c2 <_vfiprintf_r+0xe2>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	1d19      	adds	r1, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	9103      	str	r1, [sp, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bfbb      	ittet	lt
 8008a28:	425b      	neglt	r3, r3
 8008a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a2e:	9307      	strge	r3, [sp, #28]
 8008a30:	9307      	strlt	r3, [sp, #28]
 8008a32:	bfb8      	it	lt
 8008a34:	9204      	strlt	r2, [sp, #16]
 8008a36:	7823      	ldrb	r3, [r4, #0]
 8008a38:	2b2e      	cmp	r3, #46	; 0x2e
 8008a3a:	d10c      	bne.n	8008a56 <_vfiprintf_r+0x176>
 8008a3c:	7863      	ldrb	r3, [r4, #1]
 8008a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a40:	d135      	bne.n	8008aae <_vfiprintf_r+0x1ce>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	1d1a      	adds	r2, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	9203      	str	r2, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfb8      	it	lt
 8008a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a52:	3402      	adds	r4, #2
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b3c <_vfiprintf_r+0x25c>
 8008a5a:	7821      	ldrb	r1, [r4, #0]
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	4650      	mov	r0, sl
 8008a60:	f7f7 fbce 	bl	8000200 <memchr>
 8008a64:	b140      	cbz	r0, 8008a78 <_vfiprintf_r+0x198>
 8008a66:	2340      	movs	r3, #64	; 0x40
 8008a68:	eba0 000a 	sub.w	r0, r0, sl
 8008a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8008a70:	9b04      	ldr	r3, [sp, #16]
 8008a72:	4303      	orrs	r3, r0
 8008a74:	3401      	adds	r4, #1
 8008a76:	9304      	str	r3, [sp, #16]
 8008a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7c:	482c      	ldr	r0, [pc, #176]	; (8008b30 <_vfiprintf_r+0x250>)
 8008a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a82:	2206      	movs	r2, #6
 8008a84:	f7f7 fbbc 	bl	8000200 <memchr>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d03f      	beq.n	8008b0c <_vfiprintf_r+0x22c>
 8008a8c:	4b29      	ldr	r3, [pc, #164]	; (8008b34 <_vfiprintf_r+0x254>)
 8008a8e:	bb1b      	cbnz	r3, 8008ad8 <_vfiprintf_r+0x1f8>
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	3307      	adds	r3, #7
 8008a94:	f023 0307 	bic.w	r3, r3, #7
 8008a98:	3308      	adds	r3, #8
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9e:	443b      	add	r3, r7
 8008aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008aa2:	e767      	b.n	8008974 <_vfiprintf_r+0x94>
 8008aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7a5      	b.n	80089fa <_vfiprintf_r+0x11a>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	3401      	adds	r4, #1
 8008ab2:	9305      	str	r3, [sp, #20]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f04f 0c0a 	mov.w	ip, #10
 8008aba:	4620      	mov	r0, r4
 8008abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac0:	3a30      	subs	r2, #48	; 0x30
 8008ac2:	2a09      	cmp	r2, #9
 8008ac4:	d903      	bls.n	8008ace <_vfiprintf_r+0x1ee>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0c5      	beq.n	8008a56 <_vfiprintf_r+0x176>
 8008aca:	9105      	str	r1, [sp, #20]
 8008acc:	e7c3      	b.n	8008a56 <_vfiprintf_r+0x176>
 8008ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e7f0      	b.n	8008aba <_vfiprintf_r+0x1da>
 8008ad8:	ab03      	add	r3, sp, #12
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	462a      	mov	r2, r5
 8008ade:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <_vfiprintf_r+0x258>)
 8008ae0:	a904      	add	r1, sp, #16
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	4607      	mov	r7, r0
 8008aea:	1c78      	adds	r0, r7, #1
 8008aec:	d1d6      	bne.n	8008a9c <_vfiprintf_r+0x1bc>
 8008aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008af0:	07d9      	lsls	r1, r3, #31
 8008af2:	d405      	bmi.n	8008b00 <_vfiprintf_r+0x220>
 8008af4:	89ab      	ldrh	r3, [r5, #12]
 8008af6:	059a      	lsls	r2, r3, #22
 8008af8:	d402      	bmi.n	8008b00 <_vfiprintf_r+0x220>
 8008afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008afc:	f000 fc45 	bl	800938a <__retarget_lock_release_recursive>
 8008b00:	89ab      	ldrh	r3, [r5, #12]
 8008b02:	065b      	lsls	r3, r3, #25
 8008b04:	f53f af12 	bmi.w	800892c <_vfiprintf_r+0x4c>
 8008b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b0a:	e711      	b.n	8008930 <_vfiprintf_r+0x50>
 8008b0c:	ab03      	add	r3, sp, #12
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	462a      	mov	r2, r5
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <_vfiprintf_r+0x258>)
 8008b14:	a904      	add	r1, sp, #16
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 f880 	bl	8008c1c <_printf_i>
 8008b1c:	e7e4      	b.n	8008ae8 <_vfiprintf_r+0x208>
 8008b1e:	bf00      	nop
 8008b20:	080099b8 	.word	0x080099b8
 8008b24:	080099d8 	.word	0x080099d8
 8008b28:	08009998 	.word	0x08009998
 8008b2c:	08009962 	.word	0x08009962
 8008b30:	0800996c 	.word	0x0800996c
 8008b34:	00000000 	.word	0x00000000
 8008b38:	080088bb 	.word	0x080088bb
 8008b3c:	08009968 	.word	0x08009968

08008b40 <_printf_common>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	4616      	mov	r6, r2
 8008b46:	4699      	mov	r9, r3
 8008b48:	688a      	ldr	r2, [r1, #8]
 8008b4a:	690b      	ldr	r3, [r1, #16]
 8008b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	bfb8      	it	lt
 8008b54:	4613      	movlt	r3, r2
 8008b56:	6033      	str	r3, [r6, #0]
 8008b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	b10a      	cbz	r2, 8008b66 <_printf_common+0x26>
 8008b62:	3301      	adds	r3, #1
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	0699      	lsls	r1, r3, #26
 8008b6a:	bf42      	ittt	mi
 8008b6c:	6833      	ldrmi	r3, [r6, #0]
 8008b6e:	3302      	addmi	r3, #2
 8008b70:	6033      	strmi	r3, [r6, #0]
 8008b72:	6825      	ldr	r5, [r4, #0]
 8008b74:	f015 0506 	ands.w	r5, r5, #6
 8008b78:	d106      	bne.n	8008b88 <_printf_common+0x48>
 8008b7a:	f104 0a19 	add.w	sl, r4, #25
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	6832      	ldr	r2, [r6, #0]
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	dc26      	bgt.n	8008bd6 <_printf_common+0x96>
 8008b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b8c:	1e13      	subs	r3, r2, #0
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	bf18      	it	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	0692      	lsls	r2, r2, #26
 8008b96:	d42b      	bmi.n	8008bf0 <_printf_common+0xb0>
 8008b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	47c0      	blx	r8
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d01e      	beq.n	8008be4 <_printf_common+0xa4>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	68e5      	ldr	r5, [r4, #12]
 8008baa:	6832      	ldr	r2, [r6, #0]
 8008bac:	f003 0306 	and.w	r3, r3, #6
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	bf08      	it	eq
 8008bb4:	1aad      	subeq	r5, r5, r2
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	bf0c      	ite	eq
 8008bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc0:	2500      	movne	r5, #0
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	bfc4      	itt	gt
 8008bc6:	1a9b      	subgt	r3, r3, r2
 8008bc8:	18ed      	addgt	r5, r5, r3
 8008bca:	2600      	movs	r6, #0
 8008bcc:	341a      	adds	r4, #26
 8008bce:	42b5      	cmp	r5, r6
 8008bd0:	d11a      	bne.n	8008c08 <_printf_common+0xc8>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e008      	b.n	8008be8 <_printf_common+0xa8>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4652      	mov	r2, sl
 8008bda:	4649      	mov	r1, r9
 8008bdc:	4638      	mov	r0, r7
 8008bde:	47c0      	blx	r8
 8008be0:	3001      	adds	r0, #1
 8008be2:	d103      	bne.n	8008bec <_printf_common+0xac>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	3501      	adds	r5, #1
 8008bee:	e7c6      	b.n	8008b7e <_printf_common+0x3e>
 8008bf0:	18e1      	adds	r1, r4, r3
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	2030      	movs	r0, #48	; 0x30
 8008bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bfa:	4422      	add	r2, r4
 8008bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c04:	3302      	adds	r3, #2
 8008c06:	e7c7      	b.n	8008b98 <_printf_common+0x58>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d0e6      	beq.n	8008be4 <_printf_common+0xa4>
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7d9      	b.n	8008bce <_printf_common+0x8e>
	...

08008c1c <_printf_i>:
 8008c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	460c      	mov	r4, r1
 8008c22:	4691      	mov	r9, r2
 8008c24:	7e27      	ldrb	r7, [r4, #24]
 8008c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c28:	2f78      	cmp	r7, #120	; 0x78
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	469a      	mov	sl, r3
 8008c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c32:	d807      	bhi.n	8008c44 <_printf_i+0x28>
 8008c34:	2f62      	cmp	r7, #98	; 0x62
 8008c36:	d80a      	bhi.n	8008c4e <_printf_i+0x32>
 8008c38:	2f00      	cmp	r7, #0
 8008c3a:	f000 80d8 	beq.w	8008dee <_printf_i+0x1d2>
 8008c3e:	2f58      	cmp	r7, #88	; 0x58
 8008c40:	f000 80a3 	beq.w	8008d8a <_printf_i+0x16e>
 8008c44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c4c:	e03a      	b.n	8008cc4 <_printf_i+0xa8>
 8008c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c52:	2b15      	cmp	r3, #21
 8008c54:	d8f6      	bhi.n	8008c44 <_printf_i+0x28>
 8008c56:	a001      	add	r0, pc, #4	; (adr r0, 8008c5c <_printf_i+0x40>)
 8008c58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c5c:	08008cb5 	.word	0x08008cb5
 8008c60:	08008cc9 	.word	0x08008cc9
 8008c64:	08008c45 	.word	0x08008c45
 8008c68:	08008c45 	.word	0x08008c45
 8008c6c:	08008c45 	.word	0x08008c45
 8008c70:	08008c45 	.word	0x08008c45
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008c45 	.word	0x08008c45
 8008c7c:	08008c45 	.word	0x08008c45
 8008c80:	08008c45 	.word	0x08008c45
 8008c84:	08008c45 	.word	0x08008c45
 8008c88:	08008dd5 	.word	0x08008dd5
 8008c8c:	08008cf9 	.word	0x08008cf9
 8008c90:	08008db7 	.word	0x08008db7
 8008c94:	08008c45 	.word	0x08008c45
 8008c98:	08008c45 	.word	0x08008c45
 8008c9c:	08008df7 	.word	0x08008df7
 8008ca0:	08008c45 	.word	0x08008c45
 8008ca4:	08008cf9 	.word	0x08008cf9
 8008ca8:	08008c45 	.word	0x08008c45
 8008cac:	08008c45 	.word	0x08008c45
 8008cb0:	08008dbf 	.word	0x08008dbf
 8008cb4:	680b      	ldr	r3, [r1, #0]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	600a      	str	r2, [r1, #0]
 8008cbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0a3      	b.n	8008e10 <_printf_i+0x1f4>
 8008cc8:	6825      	ldr	r5, [r4, #0]
 8008cca:	6808      	ldr	r0, [r1, #0]
 8008ccc:	062e      	lsls	r6, r5, #24
 8008cce:	f100 0304 	add.w	r3, r0, #4
 8008cd2:	d50a      	bpl.n	8008cea <_printf_i+0xce>
 8008cd4:	6805      	ldr	r5, [r0, #0]
 8008cd6:	600b      	str	r3, [r1, #0]
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	da03      	bge.n	8008ce4 <_printf_i+0xc8>
 8008cdc:	232d      	movs	r3, #45	; 0x2d
 8008cde:	426d      	negs	r5, r5
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce4:	485e      	ldr	r0, [pc, #376]	; (8008e60 <_printf_i+0x244>)
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	e019      	b.n	8008d1e <_printf_i+0x102>
 8008cea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cee:	6805      	ldr	r5, [r0, #0]
 8008cf0:	600b      	str	r3, [r1, #0]
 8008cf2:	bf18      	it	ne
 8008cf4:	b22d      	sxthne	r5, r5
 8008cf6:	e7ef      	b.n	8008cd8 <_printf_i+0xbc>
 8008cf8:	680b      	ldr	r3, [r1, #0]
 8008cfa:	6825      	ldr	r5, [r4, #0]
 8008cfc:	1d18      	adds	r0, r3, #4
 8008cfe:	6008      	str	r0, [r1, #0]
 8008d00:	0628      	lsls	r0, r5, #24
 8008d02:	d501      	bpl.n	8008d08 <_printf_i+0xec>
 8008d04:	681d      	ldr	r5, [r3, #0]
 8008d06:	e002      	b.n	8008d0e <_printf_i+0xf2>
 8008d08:	0669      	lsls	r1, r5, #25
 8008d0a:	d5fb      	bpl.n	8008d04 <_printf_i+0xe8>
 8008d0c:	881d      	ldrh	r5, [r3, #0]
 8008d0e:	4854      	ldr	r0, [pc, #336]	; (8008e60 <_printf_i+0x244>)
 8008d10:	2f6f      	cmp	r7, #111	; 0x6f
 8008d12:	bf0c      	ite	eq
 8008d14:	2308      	moveq	r3, #8
 8008d16:	230a      	movne	r3, #10
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d1e:	6866      	ldr	r6, [r4, #4]
 8008d20:	60a6      	str	r6, [r4, #8]
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	bfa2      	ittt	ge
 8008d26:	6821      	ldrge	r1, [r4, #0]
 8008d28:	f021 0104 	bicge.w	r1, r1, #4
 8008d2c:	6021      	strge	r1, [r4, #0]
 8008d2e:	b90d      	cbnz	r5, 8008d34 <_printf_i+0x118>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	d04d      	beq.n	8008dd0 <_printf_i+0x1b4>
 8008d34:	4616      	mov	r6, r2
 8008d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d3e:	5dc7      	ldrb	r7, [r0, r7]
 8008d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d44:	462f      	mov	r7, r5
 8008d46:	42bb      	cmp	r3, r7
 8008d48:	460d      	mov	r5, r1
 8008d4a:	d9f4      	bls.n	8008d36 <_printf_i+0x11a>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d10b      	bne.n	8008d68 <_printf_i+0x14c>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	07df      	lsls	r7, r3, #31
 8008d54:	d508      	bpl.n	8008d68 <_printf_i+0x14c>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	6861      	ldr	r1, [r4, #4]
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	bfde      	ittt	le
 8008d5e:	2330      	movle	r3, #48	; 0x30
 8008d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d68:	1b92      	subs	r2, r2, r6
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	f8cd a000 	str.w	sl, [sp]
 8008d70:	464b      	mov	r3, r9
 8008d72:	aa03      	add	r2, sp, #12
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fee2 	bl	8008b40 <_printf_common>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d14c      	bne.n	8008e1a <_printf_i+0x1fe>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b004      	add	sp, #16
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	4835      	ldr	r0, [pc, #212]	; (8008e60 <_printf_i+0x244>)
 8008d8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	680e      	ldr	r6, [r1, #0]
 8008d94:	061f      	lsls	r7, r3, #24
 8008d96:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d9a:	600e      	str	r6, [r1, #0]
 8008d9c:	d514      	bpl.n	8008dc8 <_printf_i+0x1ac>
 8008d9e:	07d9      	lsls	r1, r3, #31
 8008da0:	bf44      	itt	mi
 8008da2:	f043 0320 	orrmi.w	r3, r3, #32
 8008da6:	6023      	strmi	r3, [r4, #0]
 8008da8:	b91d      	cbnz	r5, 8008db2 <_printf_i+0x196>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f023 0320 	bic.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	2310      	movs	r3, #16
 8008db4:	e7b0      	b.n	8008d18 <_printf_i+0xfc>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	f043 0320 	orr.w	r3, r3, #32
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	2378      	movs	r3, #120	; 0x78
 8008dc0:	4828      	ldr	r0, [pc, #160]	; (8008e64 <_printf_i+0x248>)
 8008dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dc6:	e7e3      	b.n	8008d90 <_printf_i+0x174>
 8008dc8:	065e      	lsls	r6, r3, #25
 8008dca:	bf48      	it	mi
 8008dcc:	b2ad      	uxthmi	r5, r5
 8008dce:	e7e6      	b.n	8008d9e <_printf_i+0x182>
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	e7bb      	b.n	8008d4c <_printf_i+0x130>
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	6826      	ldr	r6, [r4, #0]
 8008dd8:	6960      	ldr	r0, [r4, #20]
 8008dda:	1d1d      	adds	r5, r3, #4
 8008ddc:	600d      	str	r5, [r1, #0]
 8008dde:	0635      	lsls	r5, r6, #24
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0x1cc>
 8008de4:	6018      	str	r0, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0x1d2>
 8008de8:	0671      	lsls	r1, r6, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0x1c8>
 8008dec:	8018      	strh	r0, [r3, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	6123      	str	r3, [r4, #16]
 8008df2:	4616      	mov	r6, r2
 8008df4:	e7ba      	b.n	8008d6c <_printf_i+0x150>
 8008df6:	680b      	ldr	r3, [r1, #0]
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	600a      	str	r2, [r1, #0]
 8008dfc:	681e      	ldr	r6, [r3, #0]
 8008dfe:	6862      	ldr	r2, [r4, #4]
 8008e00:	2100      	movs	r1, #0
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7f7 f9fc 	bl	8000200 <memchr>
 8008e08:	b108      	cbz	r0, 8008e0e <_printf_i+0x1f2>
 8008e0a:	1b80      	subs	r0, r0, r6
 8008e0c:	6060      	str	r0, [r4, #4]
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	2300      	movs	r3, #0
 8008e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e18:	e7a8      	b.n	8008d6c <_printf_i+0x150>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4649      	mov	r1, r9
 8008e20:	4640      	mov	r0, r8
 8008e22:	47d0      	blx	sl
 8008e24:	3001      	adds	r0, #1
 8008e26:	d0ab      	beq.n	8008d80 <_printf_i+0x164>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	079b      	lsls	r3, r3, #30
 8008e2c:	d413      	bmi.n	8008e56 <_printf_i+0x23a>
 8008e2e:	68e0      	ldr	r0, [r4, #12]
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	4298      	cmp	r0, r3
 8008e34:	bfb8      	it	lt
 8008e36:	4618      	movlt	r0, r3
 8008e38:	e7a4      	b.n	8008d84 <_printf_i+0x168>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d09b      	beq.n	8008d80 <_printf_i+0x164>
 8008e48:	3501      	adds	r5, #1
 8008e4a:	68e3      	ldr	r3, [r4, #12]
 8008e4c:	9903      	ldr	r1, [sp, #12]
 8008e4e:	1a5b      	subs	r3, r3, r1
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	dcf2      	bgt.n	8008e3a <_printf_i+0x21e>
 8008e54:	e7eb      	b.n	8008e2e <_printf_i+0x212>
 8008e56:	2500      	movs	r5, #0
 8008e58:	f104 0619 	add.w	r6, r4, #25
 8008e5c:	e7f5      	b.n	8008e4a <_printf_i+0x22e>
 8008e5e:	bf00      	nop
 8008e60:	08009973 	.word	0x08009973
 8008e64:	08009984 	.word	0x08009984

08008e68 <_sbrk_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d06      	ldr	r5, [pc, #24]	; (8008e84 <_sbrk_r+0x1c>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7fa fc8c 	bl	8003790 <_sbrk>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_sbrk_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_sbrk_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	200009b4 	.word	0x200009b4

08008e88 <__swbuf_r>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	460e      	mov	r6, r1
 8008e8c:	4614      	mov	r4, r2
 8008e8e:	4605      	mov	r5, r0
 8008e90:	b118      	cbz	r0, 8008e9a <__swbuf_r+0x12>
 8008e92:	6983      	ldr	r3, [r0, #24]
 8008e94:	b90b      	cbnz	r3, 8008e9a <__swbuf_r+0x12>
 8008e96:	f000 f9d9 	bl	800924c <__sinit>
 8008e9a:	4b21      	ldr	r3, [pc, #132]	; (8008f20 <__swbuf_r+0x98>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	d12b      	bne.n	8008ef8 <__swbuf_r+0x70>
 8008ea0:	686c      	ldr	r4, [r5, #4]
 8008ea2:	69a3      	ldr	r3, [r4, #24]
 8008ea4:	60a3      	str	r3, [r4, #8]
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	071a      	lsls	r2, r3, #28
 8008eaa:	d52f      	bpl.n	8008f0c <__swbuf_r+0x84>
 8008eac:	6923      	ldr	r3, [r4, #16]
 8008eae:	b36b      	cbz	r3, 8008f0c <__swbuf_r+0x84>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	1ac0      	subs	r0, r0, r3
 8008eb6:	6963      	ldr	r3, [r4, #20]
 8008eb8:	b2f6      	uxtb	r6, r6
 8008eba:	4283      	cmp	r3, r0
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	dc04      	bgt.n	8008eca <__swbuf_r+0x42>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f92e 	bl	8009124 <_fflush_r>
 8008ec8:	bb30      	cbnz	r0, 8008f18 <__swbuf_r+0x90>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	6022      	str	r2, [r4, #0]
 8008ed6:	701e      	strb	r6, [r3, #0]
 8008ed8:	6963      	ldr	r3, [r4, #20]
 8008eda:	3001      	adds	r0, #1
 8008edc:	4283      	cmp	r3, r0
 8008ede:	d004      	beq.n	8008eea <__swbuf_r+0x62>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	07db      	lsls	r3, r3, #31
 8008ee4:	d506      	bpl.n	8008ef4 <__swbuf_r+0x6c>
 8008ee6:	2e0a      	cmp	r6, #10
 8008ee8:	d104      	bne.n	8008ef4 <__swbuf_r+0x6c>
 8008eea:	4621      	mov	r1, r4
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 f919 	bl	8009124 <_fflush_r>
 8008ef2:	b988      	cbnz	r0, 8008f18 <__swbuf_r+0x90>
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <__swbuf_r+0x9c>)
 8008efa:	429c      	cmp	r4, r3
 8008efc:	d101      	bne.n	8008f02 <__swbuf_r+0x7a>
 8008efe:	68ac      	ldr	r4, [r5, #8]
 8008f00:	e7cf      	b.n	8008ea2 <__swbuf_r+0x1a>
 8008f02:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <__swbuf_r+0xa0>)
 8008f04:	429c      	cmp	r4, r3
 8008f06:	bf08      	it	eq
 8008f08:	68ec      	ldreq	r4, [r5, #12]
 8008f0a:	e7ca      	b.n	8008ea2 <__swbuf_r+0x1a>
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 f80c 	bl	8008f2c <__swsetup_r>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d0cb      	beq.n	8008eb0 <__swbuf_r+0x28>
 8008f18:	f04f 37ff 	mov.w	r7, #4294967295
 8008f1c:	e7ea      	b.n	8008ef4 <__swbuf_r+0x6c>
 8008f1e:	bf00      	nop
 8008f20:	080099b8 	.word	0x080099b8
 8008f24:	080099d8 	.word	0x080099d8
 8008f28:	08009998 	.word	0x08009998

08008f2c <__swsetup_r>:
 8008f2c:	4b32      	ldr	r3, [pc, #200]	; (8008ff8 <__swsetup_r+0xcc>)
 8008f2e:	b570      	push	{r4, r5, r6, lr}
 8008f30:	681d      	ldr	r5, [r3, #0]
 8008f32:	4606      	mov	r6, r0
 8008f34:	460c      	mov	r4, r1
 8008f36:	b125      	cbz	r5, 8008f42 <__swsetup_r+0x16>
 8008f38:	69ab      	ldr	r3, [r5, #24]
 8008f3a:	b913      	cbnz	r3, 8008f42 <__swsetup_r+0x16>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 f985 	bl	800924c <__sinit>
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <__swsetup_r+0xd0>)
 8008f44:	429c      	cmp	r4, r3
 8008f46:	d10f      	bne.n	8008f68 <__swsetup_r+0x3c>
 8008f48:	686c      	ldr	r4, [r5, #4]
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f50:	0719      	lsls	r1, r3, #28
 8008f52:	d42c      	bmi.n	8008fae <__swsetup_r+0x82>
 8008f54:	06dd      	lsls	r5, r3, #27
 8008f56:	d411      	bmi.n	8008f7c <__swsetup_r+0x50>
 8008f58:	2309      	movs	r3, #9
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	e03e      	b.n	8008fe6 <__swsetup_r+0xba>
 8008f68:	4b25      	ldr	r3, [pc, #148]	; (8009000 <__swsetup_r+0xd4>)
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d101      	bne.n	8008f72 <__swsetup_r+0x46>
 8008f6e:	68ac      	ldr	r4, [r5, #8]
 8008f70:	e7eb      	b.n	8008f4a <__swsetup_r+0x1e>
 8008f72:	4b24      	ldr	r3, [pc, #144]	; (8009004 <__swsetup_r+0xd8>)
 8008f74:	429c      	cmp	r4, r3
 8008f76:	bf08      	it	eq
 8008f78:	68ec      	ldreq	r4, [r5, #12]
 8008f7a:	e7e6      	b.n	8008f4a <__swsetup_r+0x1e>
 8008f7c:	0758      	lsls	r0, r3, #29
 8008f7e:	d512      	bpl.n	8008fa6 <__swsetup_r+0x7a>
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	b141      	cbz	r1, 8008f96 <__swsetup_r+0x6a>
 8008f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	d002      	beq.n	8008f92 <__swsetup_r+0x66>
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff fa77 	bl	8008480 <_free_r>
 8008f92:	2300      	movs	r3, #0
 8008f94:	6363      	str	r3, [r4, #52]	; 0x34
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0308 	orr.w	r3, r3, #8
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b94b      	cbnz	r3, 8008fc6 <__swsetup_r+0x9a>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fbc:	d003      	beq.n	8008fc6 <__swsetup_r+0x9a>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 fa07 	bl	80093d4 <__smakebuf_r>
 8008fc6:	89a0      	ldrh	r0, [r4, #12]
 8008fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fcc:	f010 0301 	ands.w	r3, r0, #1
 8008fd0:	d00a      	beq.n	8008fe8 <__swsetup_r+0xbc>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60a3      	str	r3, [r4, #8]
 8008fd6:	6963      	ldr	r3, [r4, #20]
 8008fd8:	425b      	negs	r3, r3
 8008fda:	61a3      	str	r3, [r4, #24]
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	b943      	cbnz	r3, 8008ff2 <__swsetup_r+0xc6>
 8008fe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fe4:	d1ba      	bne.n	8008f5c <__swsetup_r+0x30>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	0781      	lsls	r1, r0, #30
 8008fea:	bf58      	it	pl
 8008fec:	6963      	ldrpl	r3, [r4, #20]
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	e7f4      	b.n	8008fdc <__swsetup_r+0xb0>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e7f7      	b.n	8008fe6 <__swsetup_r+0xba>
 8008ff6:	bf00      	nop
 8008ff8:	200001b0 	.word	0x200001b0
 8008ffc:	080099b8 	.word	0x080099b8
 8009000:	080099d8 	.word	0x080099d8
 8009004:	08009998 	.word	0x08009998

08009008 <abort>:
 8009008:	b508      	push	{r3, lr}
 800900a:	2006      	movs	r0, #6
 800900c:	f000 faa4 	bl	8009558 <raise>
 8009010:	2001      	movs	r0, #1
 8009012:	f7fa fb45 	bl	80036a0 <_exit>
	...

08009018 <__sflush_r>:
 8009018:	898a      	ldrh	r2, [r1, #12]
 800901a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	4605      	mov	r5, r0
 8009020:	0710      	lsls	r0, r2, #28
 8009022:	460c      	mov	r4, r1
 8009024:	d458      	bmi.n	80090d8 <__sflush_r+0xc0>
 8009026:	684b      	ldr	r3, [r1, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	dc05      	bgt.n	8009038 <__sflush_r+0x20>
 800902c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	dc02      	bgt.n	8009038 <__sflush_r+0x20>
 8009032:	2000      	movs	r0, #0
 8009034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903a:	2e00      	cmp	r6, #0
 800903c:	d0f9      	beq.n	8009032 <__sflush_r+0x1a>
 800903e:	2300      	movs	r3, #0
 8009040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009044:	682f      	ldr	r7, [r5, #0]
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	d032      	beq.n	80090b0 <__sflush_r+0x98>
 800904a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	075a      	lsls	r2, r3, #29
 8009050:	d505      	bpl.n	800905e <__sflush_r+0x46>
 8009052:	6863      	ldr	r3, [r4, #4]
 8009054:	1ac0      	subs	r0, r0, r3
 8009056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009058:	b10b      	cbz	r3, 800905e <__sflush_r+0x46>
 800905a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800905c:	1ac0      	subs	r0, r0, r3
 800905e:	2300      	movs	r3, #0
 8009060:	4602      	mov	r2, r0
 8009062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009064:	6a21      	ldr	r1, [r4, #32]
 8009066:	4628      	mov	r0, r5
 8009068:	47b0      	blx	r6
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	d106      	bne.n	800907e <__sflush_r+0x66>
 8009070:	6829      	ldr	r1, [r5, #0]
 8009072:	291d      	cmp	r1, #29
 8009074:	d82c      	bhi.n	80090d0 <__sflush_r+0xb8>
 8009076:	4a2a      	ldr	r2, [pc, #168]	; (8009120 <__sflush_r+0x108>)
 8009078:	40ca      	lsrs	r2, r1
 800907a:	07d6      	lsls	r6, r2, #31
 800907c:	d528      	bpl.n	80090d0 <__sflush_r+0xb8>
 800907e:	2200      	movs	r2, #0
 8009080:	6062      	str	r2, [r4, #4]
 8009082:	04d9      	lsls	r1, r3, #19
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	d504      	bpl.n	8009094 <__sflush_r+0x7c>
 800908a:	1c42      	adds	r2, r0, #1
 800908c:	d101      	bne.n	8009092 <__sflush_r+0x7a>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	b903      	cbnz	r3, 8009094 <__sflush_r+0x7c>
 8009092:	6560      	str	r0, [r4, #84]	; 0x54
 8009094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009096:	602f      	str	r7, [r5, #0]
 8009098:	2900      	cmp	r1, #0
 800909a:	d0ca      	beq.n	8009032 <__sflush_r+0x1a>
 800909c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a0:	4299      	cmp	r1, r3
 80090a2:	d002      	beq.n	80090aa <__sflush_r+0x92>
 80090a4:	4628      	mov	r0, r5
 80090a6:	f7ff f9eb 	bl	8008480 <_free_r>
 80090aa:	2000      	movs	r0, #0
 80090ac:	6360      	str	r0, [r4, #52]	; 0x34
 80090ae:	e7c1      	b.n	8009034 <__sflush_r+0x1c>
 80090b0:	6a21      	ldr	r1, [r4, #32]
 80090b2:	2301      	movs	r3, #1
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b0      	blx	r6
 80090b8:	1c41      	adds	r1, r0, #1
 80090ba:	d1c7      	bne.n	800904c <__sflush_r+0x34>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0c4      	beq.n	800904c <__sflush_r+0x34>
 80090c2:	2b1d      	cmp	r3, #29
 80090c4:	d001      	beq.n	80090ca <__sflush_r+0xb2>
 80090c6:	2b16      	cmp	r3, #22
 80090c8:	d101      	bne.n	80090ce <__sflush_r+0xb6>
 80090ca:	602f      	str	r7, [r5, #0]
 80090cc:	e7b1      	b.n	8009032 <__sflush_r+0x1a>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	e7ad      	b.n	8009034 <__sflush_r+0x1c>
 80090d8:	690f      	ldr	r7, [r1, #16]
 80090da:	2f00      	cmp	r7, #0
 80090dc:	d0a9      	beq.n	8009032 <__sflush_r+0x1a>
 80090de:	0793      	lsls	r3, r2, #30
 80090e0:	680e      	ldr	r6, [r1, #0]
 80090e2:	bf08      	it	eq
 80090e4:	694b      	ldreq	r3, [r1, #20]
 80090e6:	600f      	str	r7, [r1, #0]
 80090e8:	bf18      	it	ne
 80090ea:	2300      	movne	r3, #0
 80090ec:	eba6 0807 	sub.w	r8, r6, r7
 80090f0:	608b      	str	r3, [r1, #8]
 80090f2:	f1b8 0f00 	cmp.w	r8, #0
 80090f6:	dd9c      	ble.n	8009032 <__sflush_r+0x1a>
 80090f8:	6a21      	ldr	r1, [r4, #32]
 80090fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090fc:	4643      	mov	r3, r8
 80090fe:	463a      	mov	r2, r7
 8009100:	4628      	mov	r0, r5
 8009102:	47b0      	blx	r6
 8009104:	2800      	cmp	r0, #0
 8009106:	dc06      	bgt.n	8009116 <__sflush_r+0xfe>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e78e      	b.n	8009034 <__sflush_r+0x1c>
 8009116:	4407      	add	r7, r0
 8009118:	eba8 0800 	sub.w	r8, r8, r0
 800911c:	e7e9      	b.n	80090f2 <__sflush_r+0xda>
 800911e:	bf00      	nop
 8009120:	20400001 	.word	0x20400001

08009124 <_fflush_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	b913      	cbnz	r3, 8009134 <_fflush_r+0x10>
 800912e:	2500      	movs	r5, #0
 8009130:	4628      	mov	r0, r5
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	b118      	cbz	r0, 800913e <_fflush_r+0x1a>
 8009136:	6983      	ldr	r3, [r0, #24]
 8009138:	b90b      	cbnz	r3, 800913e <_fflush_r+0x1a>
 800913a:	f000 f887 	bl	800924c <__sinit>
 800913e:	4b14      	ldr	r3, [pc, #80]	; (8009190 <_fflush_r+0x6c>)
 8009140:	429c      	cmp	r4, r3
 8009142:	d11b      	bne.n	800917c <_fflush_r+0x58>
 8009144:	686c      	ldr	r4, [r5, #4]
 8009146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0ef      	beq.n	800912e <_fflush_r+0xa>
 800914e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009150:	07d0      	lsls	r0, r2, #31
 8009152:	d404      	bmi.n	800915e <_fflush_r+0x3a>
 8009154:	0599      	lsls	r1, r3, #22
 8009156:	d402      	bmi.n	800915e <_fflush_r+0x3a>
 8009158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800915a:	f000 f915 	bl	8009388 <__retarget_lock_acquire_recursive>
 800915e:	4628      	mov	r0, r5
 8009160:	4621      	mov	r1, r4
 8009162:	f7ff ff59 	bl	8009018 <__sflush_r>
 8009166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009168:	07da      	lsls	r2, r3, #31
 800916a:	4605      	mov	r5, r0
 800916c:	d4e0      	bmi.n	8009130 <_fflush_r+0xc>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	059b      	lsls	r3, r3, #22
 8009172:	d4dd      	bmi.n	8009130 <_fflush_r+0xc>
 8009174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009176:	f000 f908 	bl	800938a <__retarget_lock_release_recursive>
 800917a:	e7d9      	b.n	8009130 <_fflush_r+0xc>
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <_fflush_r+0x70>)
 800917e:	429c      	cmp	r4, r3
 8009180:	d101      	bne.n	8009186 <_fflush_r+0x62>
 8009182:	68ac      	ldr	r4, [r5, #8]
 8009184:	e7df      	b.n	8009146 <_fflush_r+0x22>
 8009186:	4b04      	ldr	r3, [pc, #16]	; (8009198 <_fflush_r+0x74>)
 8009188:	429c      	cmp	r4, r3
 800918a:	bf08      	it	eq
 800918c:	68ec      	ldreq	r4, [r5, #12]
 800918e:	e7da      	b.n	8009146 <_fflush_r+0x22>
 8009190:	080099b8 	.word	0x080099b8
 8009194:	080099d8 	.word	0x080099d8
 8009198:	08009998 	.word	0x08009998

0800919c <std>:
 800919c:	2300      	movs	r3, #0
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	e9c0 3300 	strd	r3, r3, [r0]
 80091a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091aa:	6083      	str	r3, [r0, #8]
 80091ac:	8181      	strh	r1, [r0, #12]
 80091ae:	6643      	str	r3, [r0, #100]	; 0x64
 80091b0:	81c2      	strh	r2, [r0, #14]
 80091b2:	6183      	str	r3, [r0, #24]
 80091b4:	4619      	mov	r1, r3
 80091b6:	2208      	movs	r2, #8
 80091b8:	305c      	adds	r0, #92	; 0x5c
 80091ba:	f7ff f857 	bl	800826c <memset>
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x38>)
 80091c0:	6263      	str	r3, [r4, #36]	; 0x24
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <std+0x3c>)
 80091c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <std+0x40>)
 80091c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <std+0x44>)
 80091cc:	6224      	str	r4, [r4, #32]
 80091ce:	6323      	str	r3, [r4, #48]	; 0x30
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	bf00      	nop
 80091d4:	08009591 	.word	0x08009591
 80091d8:	080095b3 	.word	0x080095b3
 80091dc:	080095eb 	.word	0x080095eb
 80091e0:	0800960f 	.word	0x0800960f

080091e4 <_cleanup_r>:
 80091e4:	4901      	ldr	r1, [pc, #4]	; (80091ec <_cleanup_r+0x8>)
 80091e6:	f000 b8af 	b.w	8009348 <_fwalk_reent>
 80091ea:	bf00      	nop
 80091ec:	08009125 	.word	0x08009125

080091f0 <__sfmoreglue>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	1e4a      	subs	r2, r1, #1
 80091f4:	2568      	movs	r5, #104	; 0x68
 80091f6:	4355      	muls	r5, r2
 80091f8:	460e      	mov	r6, r1
 80091fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091fe:	f7ff f98f 	bl	8008520 <_malloc_r>
 8009202:	4604      	mov	r4, r0
 8009204:	b140      	cbz	r0, 8009218 <__sfmoreglue+0x28>
 8009206:	2100      	movs	r1, #0
 8009208:	e9c0 1600 	strd	r1, r6, [r0]
 800920c:	300c      	adds	r0, #12
 800920e:	60a0      	str	r0, [r4, #8]
 8009210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009214:	f7ff f82a 	bl	800826c <memset>
 8009218:	4620      	mov	r0, r4
 800921a:	bd70      	pop	{r4, r5, r6, pc}

0800921c <__sfp_lock_acquire>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__sfp_lock_acquire+0x8>)
 800921e:	f000 b8b3 	b.w	8009388 <__retarget_lock_acquire_recursive>
 8009222:	bf00      	nop
 8009224:	200009c0 	.word	0x200009c0

08009228 <__sfp_lock_release>:
 8009228:	4801      	ldr	r0, [pc, #4]	; (8009230 <__sfp_lock_release+0x8>)
 800922a:	f000 b8ae 	b.w	800938a <__retarget_lock_release_recursive>
 800922e:	bf00      	nop
 8009230:	200009c0 	.word	0x200009c0

08009234 <__sinit_lock_acquire>:
 8009234:	4801      	ldr	r0, [pc, #4]	; (800923c <__sinit_lock_acquire+0x8>)
 8009236:	f000 b8a7 	b.w	8009388 <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	200009bb 	.word	0x200009bb

08009240 <__sinit_lock_release>:
 8009240:	4801      	ldr	r0, [pc, #4]	; (8009248 <__sinit_lock_release+0x8>)
 8009242:	f000 b8a2 	b.w	800938a <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	200009bb 	.word	0x200009bb

0800924c <__sinit>:
 800924c:	b510      	push	{r4, lr}
 800924e:	4604      	mov	r4, r0
 8009250:	f7ff fff0 	bl	8009234 <__sinit_lock_acquire>
 8009254:	69a3      	ldr	r3, [r4, #24]
 8009256:	b11b      	cbz	r3, 8009260 <__sinit+0x14>
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	f7ff bff0 	b.w	8009240 <__sinit_lock_release>
 8009260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009264:	6523      	str	r3, [r4, #80]	; 0x50
 8009266:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <__sinit+0x68>)
 8009268:	4a13      	ldr	r2, [pc, #76]	; (80092b8 <__sinit+0x6c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	62a2      	str	r2, [r4, #40]	; 0x28
 800926e:	42a3      	cmp	r3, r4
 8009270:	bf04      	itt	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	61a3      	streq	r3, [r4, #24]
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f820 	bl	80092bc <__sfp>
 800927c:	6060      	str	r0, [r4, #4]
 800927e:	4620      	mov	r0, r4
 8009280:	f000 f81c 	bl	80092bc <__sfp>
 8009284:	60a0      	str	r0, [r4, #8]
 8009286:	4620      	mov	r0, r4
 8009288:	f000 f818 	bl	80092bc <__sfp>
 800928c:	2200      	movs	r2, #0
 800928e:	60e0      	str	r0, [r4, #12]
 8009290:	2104      	movs	r1, #4
 8009292:	6860      	ldr	r0, [r4, #4]
 8009294:	f7ff ff82 	bl	800919c <std>
 8009298:	68a0      	ldr	r0, [r4, #8]
 800929a:	2201      	movs	r2, #1
 800929c:	2109      	movs	r1, #9
 800929e:	f7ff ff7d 	bl	800919c <std>
 80092a2:	68e0      	ldr	r0, [r4, #12]
 80092a4:	2202      	movs	r2, #2
 80092a6:	2112      	movs	r1, #18
 80092a8:	f7ff ff78 	bl	800919c <std>
 80092ac:	2301      	movs	r3, #1
 80092ae:	61a3      	str	r3, [r4, #24]
 80092b0:	e7d2      	b.n	8009258 <__sinit+0xc>
 80092b2:	bf00      	nop
 80092b4:	080098ac 	.word	0x080098ac
 80092b8:	080091e5 	.word	0x080091e5

080092bc <__sfp>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	4607      	mov	r7, r0
 80092c0:	f7ff ffac 	bl	800921c <__sfp_lock_acquire>
 80092c4:	4b1e      	ldr	r3, [pc, #120]	; (8009340 <__sfp+0x84>)
 80092c6:	681e      	ldr	r6, [r3, #0]
 80092c8:	69b3      	ldr	r3, [r6, #24]
 80092ca:	b913      	cbnz	r3, 80092d2 <__sfp+0x16>
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff ffbd 	bl	800924c <__sinit>
 80092d2:	3648      	adds	r6, #72	; 0x48
 80092d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092d8:	3b01      	subs	r3, #1
 80092da:	d503      	bpl.n	80092e4 <__sfp+0x28>
 80092dc:	6833      	ldr	r3, [r6, #0]
 80092de:	b30b      	cbz	r3, 8009324 <__sfp+0x68>
 80092e0:	6836      	ldr	r6, [r6, #0]
 80092e2:	e7f7      	b.n	80092d4 <__sfp+0x18>
 80092e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092e8:	b9d5      	cbnz	r5, 8009320 <__sfp+0x64>
 80092ea:	4b16      	ldr	r3, [pc, #88]	; (8009344 <__sfp+0x88>)
 80092ec:	60e3      	str	r3, [r4, #12]
 80092ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092f2:	6665      	str	r5, [r4, #100]	; 0x64
 80092f4:	f000 f847 	bl	8009386 <__retarget_lock_init_recursive>
 80092f8:	f7ff ff96 	bl	8009228 <__sfp_lock_release>
 80092fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	61a5      	str	r5, [r4, #24]
 8009308:	2208      	movs	r2, #8
 800930a:	4629      	mov	r1, r5
 800930c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009310:	f7fe ffac 	bl	800826c <memset>
 8009314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800931c:	4620      	mov	r0, r4
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009320:	3468      	adds	r4, #104	; 0x68
 8009322:	e7d9      	b.n	80092d8 <__sfp+0x1c>
 8009324:	2104      	movs	r1, #4
 8009326:	4638      	mov	r0, r7
 8009328:	f7ff ff62 	bl	80091f0 <__sfmoreglue>
 800932c:	4604      	mov	r4, r0
 800932e:	6030      	str	r0, [r6, #0]
 8009330:	2800      	cmp	r0, #0
 8009332:	d1d5      	bne.n	80092e0 <__sfp+0x24>
 8009334:	f7ff ff78 	bl	8009228 <__sfp_lock_release>
 8009338:	230c      	movs	r3, #12
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	e7ee      	b.n	800931c <__sfp+0x60>
 800933e:	bf00      	nop
 8009340:	080098ac 	.word	0x080098ac
 8009344:	ffff0001 	.word	0xffff0001

08009348 <_fwalk_reent>:
 8009348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800934c:	4606      	mov	r6, r0
 800934e:	4688      	mov	r8, r1
 8009350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009354:	2700      	movs	r7, #0
 8009356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800935a:	f1b9 0901 	subs.w	r9, r9, #1
 800935e:	d505      	bpl.n	800936c <_fwalk_reent+0x24>
 8009360:	6824      	ldr	r4, [r4, #0]
 8009362:	2c00      	cmp	r4, #0
 8009364:	d1f7      	bne.n	8009356 <_fwalk_reent+0xe>
 8009366:	4638      	mov	r0, r7
 8009368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936c:	89ab      	ldrh	r3, [r5, #12]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d907      	bls.n	8009382 <_fwalk_reent+0x3a>
 8009372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009376:	3301      	adds	r3, #1
 8009378:	d003      	beq.n	8009382 <_fwalk_reent+0x3a>
 800937a:	4629      	mov	r1, r5
 800937c:	4630      	mov	r0, r6
 800937e:	47c0      	blx	r8
 8009380:	4307      	orrs	r7, r0
 8009382:	3568      	adds	r5, #104	; 0x68
 8009384:	e7e9      	b.n	800935a <_fwalk_reent+0x12>

08009386 <__retarget_lock_init_recursive>:
 8009386:	4770      	bx	lr

08009388 <__retarget_lock_acquire_recursive>:
 8009388:	4770      	bx	lr

0800938a <__retarget_lock_release_recursive>:
 800938a:	4770      	bx	lr

0800938c <__swhatbuf_r>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	460e      	mov	r6, r1
 8009390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009394:	2900      	cmp	r1, #0
 8009396:	b096      	sub	sp, #88	; 0x58
 8009398:	4614      	mov	r4, r2
 800939a:	461d      	mov	r5, r3
 800939c:	da07      	bge.n	80093ae <__swhatbuf_r+0x22>
 800939e:	2300      	movs	r3, #0
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	89b3      	ldrh	r3, [r6, #12]
 80093a4:	061a      	lsls	r2, r3, #24
 80093a6:	d410      	bmi.n	80093ca <__swhatbuf_r+0x3e>
 80093a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ac:	e00e      	b.n	80093cc <__swhatbuf_r+0x40>
 80093ae:	466a      	mov	r2, sp
 80093b0:	f000 f954 	bl	800965c <_fstat_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	dbf2      	blt.n	800939e <__swhatbuf_r+0x12>
 80093b8:	9a01      	ldr	r2, [sp, #4]
 80093ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093c2:	425a      	negs	r2, r3
 80093c4:	415a      	adcs	r2, r3
 80093c6:	602a      	str	r2, [r5, #0]
 80093c8:	e7ee      	b.n	80093a8 <__swhatbuf_r+0x1c>
 80093ca:	2340      	movs	r3, #64	; 0x40
 80093cc:	2000      	movs	r0, #0
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	b016      	add	sp, #88	; 0x58
 80093d2:	bd70      	pop	{r4, r5, r6, pc}

080093d4 <__smakebuf_r>:
 80093d4:	898b      	ldrh	r3, [r1, #12]
 80093d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d8:	079d      	lsls	r5, r3, #30
 80093da:	4606      	mov	r6, r0
 80093dc:	460c      	mov	r4, r1
 80093de:	d507      	bpl.n	80093f0 <__smakebuf_r+0x1c>
 80093e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	2301      	movs	r3, #1
 80093ea:	6163      	str	r3, [r4, #20]
 80093ec:	b002      	add	sp, #8
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	ab01      	add	r3, sp, #4
 80093f2:	466a      	mov	r2, sp
 80093f4:	f7ff ffca 	bl	800938c <__swhatbuf_r>
 80093f8:	9900      	ldr	r1, [sp, #0]
 80093fa:	4605      	mov	r5, r0
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff f88f 	bl	8008520 <_malloc_r>
 8009402:	b948      	cbnz	r0, 8009418 <__smakebuf_r+0x44>
 8009404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009408:	059a      	lsls	r2, r3, #22
 800940a:	d4ef      	bmi.n	80093ec <__smakebuf_r+0x18>
 800940c:	f023 0303 	bic.w	r3, r3, #3
 8009410:	f043 0302 	orr.w	r3, r3, #2
 8009414:	81a3      	strh	r3, [r4, #12]
 8009416:	e7e3      	b.n	80093e0 <__smakebuf_r+0xc>
 8009418:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <__smakebuf_r+0x7c>)
 800941a:	62b3      	str	r3, [r6, #40]	; 0x28
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	6020      	str	r0, [r4, #0]
 8009420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	9b00      	ldr	r3, [sp, #0]
 8009428:	6163      	str	r3, [r4, #20]
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	6120      	str	r0, [r4, #16]
 800942e:	b15b      	cbz	r3, 8009448 <__smakebuf_r+0x74>
 8009430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009434:	4630      	mov	r0, r6
 8009436:	f000 f923 	bl	8009680 <_isatty_r>
 800943a:	b128      	cbz	r0, 8009448 <__smakebuf_r+0x74>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	f043 0301 	orr.w	r3, r3, #1
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	89a0      	ldrh	r0, [r4, #12]
 800944a:	4305      	orrs	r5, r0
 800944c:	81a5      	strh	r5, [r4, #12]
 800944e:	e7cd      	b.n	80093ec <__smakebuf_r+0x18>
 8009450:	080091e5 	.word	0x080091e5

08009454 <memcpy>:
 8009454:	440a      	add	r2, r1
 8009456:	4291      	cmp	r1, r2
 8009458:	f100 33ff 	add.w	r3, r0, #4294967295
 800945c:	d100      	bne.n	8009460 <memcpy+0xc>
 800945e:	4770      	bx	lr
 8009460:	b510      	push	{r4, lr}
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946a:	4291      	cmp	r1, r2
 800946c:	d1f9      	bne.n	8009462 <memcpy+0xe>
 800946e:	bd10      	pop	{r4, pc}

08009470 <memmove>:
 8009470:	4288      	cmp	r0, r1
 8009472:	b510      	push	{r4, lr}
 8009474:	eb01 0402 	add.w	r4, r1, r2
 8009478:	d902      	bls.n	8009480 <memmove+0x10>
 800947a:	4284      	cmp	r4, r0
 800947c:	4623      	mov	r3, r4
 800947e:	d807      	bhi.n	8009490 <memmove+0x20>
 8009480:	1e43      	subs	r3, r0, #1
 8009482:	42a1      	cmp	r1, r4
 8009484:	d008      	beq.n	8009498 <memmove+0x28>
 8009486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800948a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948e:	e7f8      	b.n	8009482 <memmove+0x12>
 8009490:	4402      	add	r2, r0
 8009492:	4601      	mov	r1, r0
 8009494:	428a      	cmp	r2, r1
 8009496:	d100      	bne.n	800949a <memmove+0x2a>
 8009498:	bd10      	pop	{r4, pc}
 800949a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094a2:	e7f7      	b.n	8009494 <memmove+0x24>

080094a4 <__malloc_lock>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__malloc_lock+0x8>)
 80094a6:	f7ff bf6f 	b.w	8009388 <__retarget_lock_acquire_recursive>
 80094aa:	bf00      	nop
 80094ac:	200009bc 	.word	0x200009bc

080094b0 <__malloc_unlock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__malloc_unlock+0x8>)
 80094b2:	f7ff bf6a 	b.w	800938a <__retarget_lock_release_recursive>
 80094b6:	bf00      	nop
 80094b8:	200009bc 	.word	0x200009bc

080094bc <_realloc_r>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	4607      	mov	r7, r0
 80094c0:	4614      	mov	r4, r2
 80094c2:	460e      	mov	r6, r1
 80094c4:	b921      	cbnz	r1, 80094d0 <_realloc_r+0x14>
 80094c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094ca:	4611      	mov	r1, r2
 80094cc:	f7ff b828 	b.w	8008520 <_malloc_r>
 80094d0:	b922      	cbnz	r2, 80094dc <_realloc_r+0x20>
 80094d2:	f7fe ffd5 	bl	8008480 <_free_r>
 80094d6:	4625      	mov	r5, r4
 80094d8:	4628      	mov	r0, r5
 80094da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094dc:	f000 f8f2 	bl	80096c4 <_malloc_usable_size_r>
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d20f      	bcs.n	8009504 <_realloc_r+0x48>
 80094e4:	4621      	mov	r1, r4
 80094e6:	4638      	mov	r0, r7
 80094e8:	f7ff f81a 	bl	8008520 <_malloc_r>
 80094ec:	4605      	mov	r5, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d0f2      	beq.n	80094d8 <_realloc_r+0x1c>
 80094f2:	4631      	mov	r1, r6
 80094f4:	4622      	mov	r2, r4
 80094f6:	f7ff ffad 	bl	8009454 <memcpy>
 80094fa:	4631      	mov	r1, r6
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7fe ffbf 	bl	8008480 <_free_r>
 8009502:	e7e9      	b.n	80094d8 <_realloc_r+0x1c>
 8009504:	4635      	mov	r5, r6
 8009506:	e7e7      	b.n	80094d8 <_realloc_r+0x1c>

08009508 <_raise_r>:
 8009508:	291f      	cmp	r1, #31
 800950a:	b538      	push	{r3, r4, r5, lr}
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	d904      	bls.n	800951c <_raise_r+0x14>
 8009512:	2316      	movs	r3, #22
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	f04f 30ff 	mov.w	r0, #4294967295
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800951e:	b112      	cbz	r2, 8009526 <_raise_r+0x1e>
 8009520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009524:	b94b      	cbnz	r3, 800953a <_raise_r+0x32>
 8009526:	4620      	mov	r0, r4
 8009528:	f000 f830 	bl	800958c <_getpid_r>
 800952c:	462a      	mov	r2, r5
 800952e:	4601      	mov	r1, r0
 8009530:	4620      	mov	r0, r4
 8009532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009536:	f000 b817 	b.w	8009568 <_kill_r>
 800953a:	2b01      	cmp	r3, #1
 800953c:	d00a      	beq.n	8009554 <_raise_r+0x4c>
 800953e:	1c59      	adds	r1, r3, #1
 8009540:	d103      	bne.n	800954a <_raise_r+0x42>
 8009542:	2316      	movs	r3, #22
 8009544:	6003      	str	r3, [r0, #0]
 8009546:	2001      	movs	r0, #1
 8009548:	e7e7      	b.n	800951a <_raise_r+0x12>
 800954a:	2400      	movs	r4, #0
 800954c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009550:	4628      	mov	r0, r5
 8009552:	4798      	blx	r3
 8009554:	2000      	movs	r0, #0
 8009556:	e7e0      	b.n	800951a <_raise_r+0x12>

08009558 <raise>:
 8009558:	4b02      	ldr	r3, [pc, #8]	; (8009564 <raise+0xc>)
 800955a:	4601      	mov	r1, r0
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	f7ff bfd3 	b.w	8009508 <_raise_r>
 8009562:	bf00      	nop
 8009564:	200001b0 	.word	0x200001b0

08009568 <_kill_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d07      	ldr	r5, [pc, #28]	; (8009588 <_kill_r+0x20>)
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	f7fa f883 	bl	8003680 <_kill>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d102      	bne.n	8009584 <_kill_r+0x1c>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	b103      	cbz	r3, 8009584 <_kill_r+0x1c>
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	bd38      	pop	{r3, r4, r5, pc}
 8009586:	bf00      	nop
 8009588:	200009b4 	.word	0x200009b4

0800958c <_getpid_r>:
 800958c:	f7fa b870 	b.w	8003670 <_getpid>

08009590 <__sread>:
 8009590:	b510      	push	{r4, lr}
 8009592:	460c      	mov	r4, r1
 8009594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009598:	f000 f89c 	bl	80096d4 <_read_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	bfab      	itete	ge
 80095a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095a2:	89a3      	ldrhlt	r3, [r4, #12]
 80095a4:	181b      	addge	r3, r3, r0
 80095a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095aa:	bfac      	ite	ge
 80095ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ae:	81a3      	strhlt	r3, [r4, #12]
 80095b0:	bd10      	pop	{r4, pc}

080095b2 <__swrite>:
 80095b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b6:	461f      	mov	r7, r3
 80095b8:	898b      	ldrh	r3, [r1, #12]
 80095ba:	05db      	lsls	r3, r3, #23
 80095bc:	4605      	mov	r5, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	4616      	mov	r6, r2
 80095c2:	d505      	bpl.n	80095d0 <__swrite+0x1e>
 80095c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c8:	2302      	movs	r3, #2
 80095ca:	2200      	movs	r2, #0
 80095cc:	f000 f868 	bl	80096a0 <_lseek_r>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	4632      	mov	r2, r6
 80095de:	463b      	mov	r3, r7
 80095e0:	4628      	mov	r0, r5
 80095e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e6:	f000 b817 	b.w	8009618 <_write_r>

080095ea <__sseek>:
 80095ea:	b510      	push	{r4, lr}
 80095ec:	460c      	mov	r4, r1
 80095ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f2:	f000 f855 	bl	80096a0 <_lseek_r>
 80095f6:	1c43      	adds	r3, r0, #1
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	bf15      	itete	ne
 80095fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80095fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009606:	81a3      	strheq	r3, [r4, #12]
 8009608:	bf18      	it	ne
 800960a:	81a3      	strhne	r3, [r4, #12]
 800960c:	bd10      	pop	{r4, pc}

0800960e <__sclose>:
 800960e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009612:	f000 b813 	b.w	800963c <_close_r>
	...

08009618 <_write_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	; (8009638 <_write_r+0x20>)
 800961c:	4604      	mov	r4, r0
 800961e:	4608      	mov	r0, r1
 8009620:	4611      	mov	r1, r2
 8009622:	2200      	movs	r2, #0
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f7fa f861 	bl	80036ee <_write>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_write_r+0x1e>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_write_r+0x1e>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	200009b4 	.word	0x200009b4

0800963c <_close_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d06      	ldr	r5, [pc, #24]	; (8009658 <_close_r+0x1c>)
 8009640:	2300      	movs	r3, #0
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	602b      	str	r3, [r5, #0]
 8009648:	f7fa f86d 	bl	8003726 <_close>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_close_r+0x1a>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_close_r+0x1a>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	200009b4 	.word	0x200009b4

0800965c <_fstat_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d07      	ldr	r5, [pc, #28]	; (800967c <_fstat_r+0x20>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	4611      	mov	r1, r2
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	f7fa f868 	bl	800373e <_fstat>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d102      	bne.n	8009678 <_fstat_r+0x1c>
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	b103      	cbz	r3, 8009678 <_fstat_r+0x1c>
 8009676:	6023      	str	r3, [r4, #0]
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	200009b4 	.word	0x200009b4

08009680 <_isatty_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d06      	ldr	r5, [pc, #24]	; (800969c <_isatty_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	f7fa f867 	bl	800375e <_isatty>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_isatty_r+0x1a>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_isatty_r+0x1a>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	200009b4 	.word	0x200009b4

080096a0 <_lseek_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d07      	ldr	r5, [pc, #28]	; (80096c0 <_lseek_r+0x20>)
 80096a4:	4604      	mov	r4, r0
 80096a6:	4608      	mov	r0, r1
 80096a8:	4611      	mov	r1, r2
 80096aa:	2200      	movs	r2, #0
 80096ac:	602a      	str	r2, [r5, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f7fa f860 	bl	8003774 <_lseek>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_lseek_r+0x1e>
 80096b8:	682b      	ldr	r3, [r5, #0]
 80096ba:	b103      	cbz	r3, 80096be <_lseek_r+0x1e>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	200009b4 	.word	0x200009b4

080096c4 <_malloc_usable_size_r>:
 80096c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c8:	1f18      	subs	r0, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfbc      	itt	lt
 80096ce:	580b      	ldrlt	r3, [r1, r0]
 80096d0:	18c0      	addlt	r0, r0, r3
 80096d2:	4770      	bx	lr

080096d4 <_read_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_read_r+0x20>)
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
 80096dc:	4611      	mov	r1, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f7f9 ffe6 	bl	80036b4 <_read>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_read_r+0x1e>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_read_r+0x1e>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	200009b4 	.word	0x200009b4

080096f8 <_gettimeofday>:
 80096f8:	4b02      	ldr	r3, [pc, #8]	; (8009704 <_gettimeofday+0xc>)
 80096fa:	2258      	movs	r2, #88	; 0x58
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009702:	4770      	bx	lr
 8009704:	200009b4 	.word	0x200009b4

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
